{
	"config": {},
	"libraries": [
		"../release/third-party/WebAudio.js",
		"../release/third-party/three.js",
		"../release/third-party/vr-controller.js",
		"../release/third-party/WebVR.js",
		"../release/third-party/tween.js"
	],
	"includes": [
		[
			"AudioManager",
			[
				"function Track ( name, clips ) {",
				"",
				"\tvar ctx = WebAudio.getContext();",
				"",
				"\tthis.index = 0;",
				"\tthis.name = name;",
				"\tthis.clips = clips;",
				"",
				"\tthis.node = ctx.createGain();",
				"\tthis.next();",
				"",
				"}",
				"",
				"Track.prototype.start = function ( startTime ) {",
				"",
				"\tif ( !this.current ) {",
				"\t\treturn;",
				"\t}",
				"",
				"\tvar ctx = WebAudio.getContext();",
				"\tthis.current.cue( startTime || 0, 'play' );",
				"",
				"\treturn this;",
				"",
				"};",
				"",
				"Track.prototype.stop = function ( endTime ) {",
				"",
				"\tif ( !this.current ) {",
				"\t\treturn this;",
				"\t}",
				"",
				"\tvar ctx = WebAudio.getContext();",
				"\tthis.current.cue( endTime || 0, 'pause' );",
				"",
				"\treturn this;",
				"",
				"};",
				"",
				"Track.prototype.next = function () {",
				"",
				"\tthis.current = this.clips[ this.index ];",
				"\tthis.index = ( this.index + 1 ) % this.clips.length;",
				"",
				"\treturn this.current;",
				"",
				"};",
				"",
				"Track.prototype.transition = function ( time ) {",
				"",
				"\tthis.stop( time );",
				"\tthis.next();",
				"\tthis.start( time );",
				"",
				"\treturn this;",
				"",
				"};",
				"",
				"function AudioManager ( bpm, bars ) {",
				"",
				"\tvar ctx = WebAudio.getContext();",
				"",
				"\tif ( /number/i.test( typeof bpm ) ) {",
				"\t\tthis.bpm = bpm;",
				"\t}",
				"\tif ( /number/i.test( typeof bars ) ) {",
				"\t\tthis.bars = bars;",
				"\t}",
				"",
				"\tthis.tracks = [];",
				"\tthis.clips = [];",
				"",
				"\tthis.destination = ctx.createGain();",
				"\tthis.master = ctx.createGain();",
				"\tthis.master.connect( ctx.destination );",
				"",
				"}",
				"",
				"AudioManager.Track = Track;",
				"",
				"AudioManager.prototype.startTime = null;",
				"AudioManager.prototype.bpm = 90;",
				"AudioManager.prototype.bars = 10;",
				"AudioManager.prototype.isPlaying = false;",
				"AudioManager.prototype.started = false;",
				"",
				"AudioManager.prototype.addTrack = function ( name, clips ) {",
				"",
				"\tvar track = new Track( name, clips );",
				"\ttrack.node.connect( this.destination );",
				"\t",
				"\tfor ( var i = 0; i < clips.length; i++ ) {",
				"\t\tvar clip = clips[ i ];",
				"\t\tclip.connect( track.node );",
				"\t}",
				"\t",
				"\tthis.tracks.push( track );",
				"\tthis.clips.concat( clips );",
				"",
				"\treturn track;",
				"",
				"};",
				"",
				"AudioManager.prototype.start = function () {",
				"",
				"\tvar ctx = WebAudio.getContext();",
				"\tthis.isPlaying = true;",
				"",
				"\tif ( !this.started ) {",
				"",
				"\t\tthis.startTime = ctx.currentTime;",
				"",
				"\t\tfor ( var i = 0; i < this.tracks.length; i++ ) {",
				"\t\t\tthis.tracks[ i ].start();",
				"\t\t}",
				"",
				"\t\tthis.destination.connect( this.master );",
				"",
				"\t}",
				"\t",
				"\tthis.destination.gain.value = 1;",
				"\tthis.started = true;",
				"",
				"\treturn this;",
				"",
				"};",
				"",
				"AudioManager.prototype.stop = function () {",
				"",
				"\tvar ctx = WebAudio.getContext();",
				"\tthis.isPlaying = false;",
				"",
				"\tthis.destination.gain.value = 0;",
				"",
				"\treturn this;",
				"",
				"};",
				"",
				"AudioManager.prototype.getDuration = function () {",
				"\treturn 4 * this.bars * ( 60 / this.bpm );",
				"};",
				"",
				"AudioManager.prototype.update = function () {",
				"",
				"\treturn this;",
				"",
				"};",
				"",
				"resources.set( 'AudioManager', AudioManager );"
			]
		],
		[
			"AudioSetup",
			[
				"var AudioManager = resources.get( 'AudioManager' );",
				"",
				"var tracks = [",
				"\t'vocals', 'machine-drum', 'instrumental',",
				"\t'melody', 'blips', 'sub-tone', 'sfx',",
				"\t'summation'",
				"];",
				"",
				"/**",
				" * An array describing what audio clips exist for",
				" * each track at every section of the \"song\". `false`",
				" * means there isn't a clip available for that section.",
				" * `true` means there is a clip available and its",
				" * filename corresponds to the sections array. Finally,",
				" * a String represents the exact base filename to be",
				" * used to select the specific clip.",
				" */",
				"tracks.data = {",
				"\t'vocals': [",
				"\t\tfalse, true, true, true, true, true, true ],",
				"\t'machine-drum': [",
				"\t\ttrue, true, true, true, 'chorus', 'breakdown', true ],",
				"\t'instrumental': [",
				"\t\tfalse, true, true, true, 'chorus', 'breakdown', true ],",
				"\t'melody': [",
				"\t\ttrue, true, true, true, 'chorus', 'breakdown', true ],",
				"\t'blips': [",
				"\t\tfalse, false, false, true, true, true, false ],",
				"\t'sub-tone': [",
				"\t\tfalse, true, true, true, 'chorus', 'breakdown', true ],",
				"\t'sfx': [",
				"\t\ttrue, false, false, true, true, true, true ],",
				"\t'summation': [",
				"\t\ttrue, true, true, true, 'chorus', 'breakdown', true ]",
				"};",
				"",
				"var sections = [",
				"\t'intro', 'verse-1', 'verse-2', 'chorus',",
				"\t'verse-3', 'verse-4', 'breakdown'",
				"];",
				"",
				"sections.data = {};",
				"",
				"var manager = new AudioManager();",
				"",
				"var ua = navigator.userAgent;",
				"var isSafari = !!ua.match( /Safari/ig ) && ( !ua.match( /Chrome/ig ) || !!ua.match( /Edge/ig ) );",
				"var ctx = WebAudio.getContext();",
				"var extension = isSafari ? 'mp3' : 'ogg';",
				"",
				"for ( var name in tracks.data ) {",
				"",
				"\tvar clips = tracks.data[ name ];",
				"\tvar sounds = []",
				"",
				"\tfor ( var i = 0; i < clips.length; i++ ) {",
				"",
				"\t\tvar section = clips[ i ];",
				"",
				"\t\tif ( section === true ) {",
				"\t\t\tsection = sections[ i ];",
				"\t\t}",
				"",
				"\t\tvar url = '../assets/v1/' + section + '-' + name + '.' + extension;",
				"\t\tvar sound = new WebAudio();",
				"\t\tif ( section ) {",
				"\t\t\tsound.src = url;",
				"\t\t}",
				"\t\tsound.loop = true;",
				"",
				"\t\tsounds.push( sound );",
				"",
				"\t}",
				"",
				"\tmanager.addTrack( name, sounds );",
				"",
				"}",
				"",
				"resources.set( 'audio-manager', manager );"
			]
		],
		[
			"Setup",
			[
				"var scene = new THREE.Scene();",
				"",
				"var renderer = new THREE.WebGLRenderer( { antialias: true, preserveDrawingBuffer: true } );",
				"renderer.setClearColor( 0xBBBBBB, 1 );",
				"renderer.setPixelRatio( window.devicePixelRatio );",
				"renderer.setSize( window.innerWidth, window.innerHeight );",
				"",
				"var domElement = resources.get( 'dom' );",
				"domElement.appendChild( renderer.domElement );",
				"",
				"renderer.vr.enabled = true;",
				"domElement.appendChild( WEBVR.createButton( renderer ) );",
				"",
				"var camera = new THREE.PerspectiveCamera( 60, window.innerWidth / window.innerHeight, .01, 100000 );",
				"var camGroup = new THREE.Group();",
				"camGroup.position.set( 0, 1.6, 3 );",
				"",
				"camGroup.add( camera );",
				"scene.add( camGroup );",
				"",
				"var interaction = new THREE.Group();",
				"var mouse = new THREE.Vector2();",
				"",
				"interaction.userData.searchables = [];",
				"interaction.userData.update = function() {",
				"",
				"\tTHREE.VRController.update();",
				"\tvar list = interaction.userData.searchables;",
				"\tvar raycaster = interaction.userData.raycaster;",
				"",
				"\tif ( list.length <= 0 ) {",
				"\t\treturn;",
				"\t}",
				"",
				"\tif ( THREE.VRController.controllers.length > 0 ) {",
				"",
				"\t\tfor ( var i = 0; i < THREE.VRController.controllers.length; i++ ) {",
				"",
				"\t\t\tvar controller = THREE.VRController.controllers[ i ];",
				"",
				"\t\t\tif ( !controller ) {",
				"\t\t\t\tcontinue;",
				"\t\t\t}",
				"",
				"\t\t\traycaster.ray.origin.setFromMatrixPosition( controller.matrixWorld );",
				"\t\t\traycaster.ray.direction.set( 0, 0, - 1 )",
				"\t\t\t\t.transformDirection( controller.matrixWorld );",
				"",
				"\t\t\tvar intersects = raycaster.intersectObjects( list );",
				"",
				"\t\t\tif ( interaction.userData.intersection ) {",
				"\t\t\t\tinteraction.userData.intersection.object.dispatchEvent( {",
				"\t\t\t\t\ttype: 'out',",
				"\t\t\t\t\tcontroller: controller",
				"\t\t\t\t} );",
				"\t\t\t}",
				"",
				"\t\t\tif ( interaction.userData.intersection !== intersects[ 0 ] ) {",
				"\t\t\t\tinteraction.userData.intersection = intersects[ 0 ];",
				"\t\t\t\tif ( !!intersects[ 0 ] ) {",
				"\t\t\t\t\tinteraction.userData.intersection.object.dispatchEvent( {",
				"\t\t\t\t\t\ttype: 'over',",
				"\t\t\t\t\t\tcontroller: controller",
				"\t\t\t\t\t} );",
				"\t\t\t\t}",
				"\t\t\t}",
				"",
				"\t\t}",
				"",
				"\t} else {",
				"",
				"\t\t// No controllers available / connected",
				"\t\t",
				"\t\traycaster.setFromCamera( mouse, camera );",
				"\t\t",
				"\t\tvar intersects = raycaster.intersectObjects( list );",
				"",
				"\t\tif ( interaction.userData.intersection ) {",
				"\t\t\tinteraction.userData.intersection.object.dispatchEvent( {",
				"\t\t\t\ttype: 'out',",
				"\t\t\t\tcontroller: mouse",
				"\t\t\t} );",
				"\t\t}",
				"",
				"\t\tif ( interaction.userData.intersection !== intersects[ 0 ] ) {",
				"\t\t\tinteraction.userData.intersection = intersects[ 0 ];",
				"\t\t\tif ( !!intersects[ 0 ] ) {",
				"\t\t\t\tinteraction.userData.intersection.object.dispatchEvent( {",
				"\t\t\t\t\ttype: 'over',",
				"\t\t\t\t\tcontroller: mouse",
				"\t\t\t\t} );",
				"\t\t\t\trenderer.domElement.style.cursor = 'pointer';",
				"\t\t\t} else {",
				"\t\t\t\trenderer.domElement.style.cursor = 'default';",
				"\t\t\t}",
				"\t\t}",
				"",
				"\t}",
				"",
				"};",
				"",
				"interaction.userData.listen = function ( obj ) {",
				"\tvar list = interaction.userData.searchables;",
				"\tvar index = list.indexOf( obj );",
				"\tif ( index >= 0 ) {",
				"\t\treturn;",
				"\t}",
				"\tlist.push( obj );",
				"};",
				"",
				"interaction.userData.ignore = function ( obj ) {",
				"\tvar list = interaction.userData.searchables;",
				"\tvar index = list.indexOf( obj );",
				"\tif ( index < 0 ) {",
				"\t\treturn;",
				"\t}",
				"\tlist.splice( index, 1 );",
				"};",
				"",
				"interaction.userData.raycaster = new THREE.Raycaster();",
				"camGroup.add( interaction );",
				"window.addEventListener( 'vr controller connected', connectController );",
				"",
				"resources.set( 'scene', scene );",
				"resources.set( 'renderer', renderer );",
				"resources.set( 'camera', camera );",
				"resources.set( 'interaction', interaction );",
				"",
				"renderer.domElement.addEventListener( 'mousedown', mousedown, false );",
				"renderer.domElement.addEventListener( 'mousemove', mousemove, false );",
				"renderer.domElement.addEventListener( 'mouseup', mouseup, false );",
				"window.addEventListener( 'resize', resize, false );",
				"",
				"function resize() {",
				"",
				"\tvar rect = domElement.getBoundingClientRect();",
				"\tvar width = rect.width;",
				"\tvar height = rect.height;",
				"",
				"\tcamera.aspect = width / height;",
				"\tcamera.updateProjectionMatrix();",
				"\trenderer.setSize( width, height );",
				"}",
				"",
				"function mousedown ( event ) {",
				"\tvar item = interaction.userData.intersection;",
				"\tif ( item ) {",
				"\t\titem.object.dispatchEvent( {",
				"\t\t\ttype: 'primary-down',",
				"\t\t\tcontroller: mouse",
				"\t\t} );",
				"\t}",
				"\tinteraction.dispatchEvent( {",
				"\t  type: 'primary-down',",
				"\t  controller: mouse",
				"\t} );",
				"}",
				"",
				"function mousemove ( event ) {",
				"",
				"\tvar rect = renderer.domElement.getBoundingClientRect();",
				"",
				"\tmouse.x = ( event.clientX - rect.left ) / rect.width;",
				"\tmouse.y = ( event.clientY - rect.top ) / rect.height;",
				"",
				"\tmouse.x = 2 * mouse.x - 1;",
				"\tmouse.y = - 2 * mouse.y + 1;",
				"",
				"}",
				"",
				"function mouseup ( event ) {",
				"\tvar item = interaction.userData.intersection;",
				"\tif ( item ) {",
				"\t\titem.object.dispatchEvent( {",
				"\t\t\ttype: 'primary-up',",
				"\t\t\tcontroller: mouse",
				"\t\t} );",
				"\t}",
				"\tinteraction.dispatchEvent( {",
				"\t  type: 'primary-up',",
				"\t  controller: mouse",
				"\t} );",
				"}",
				"",
				"function connectController ( event ) {",
				"",
				"\tvar controller = event.detail;",
				"\tinteraction.add( controller );",
				"",
				"\tcontroller.standingMatrix = renderer.vr.getStandingMatrix();",
				"",
				"\tvar laserRadius = 0.001;",
				"\tvar laserLength = 1;",
				"\tvar laserGeo = new THREE.CylinderBufferGeometry( laserRadius, laserRadius, laserLength, 8, 1, true );",
				"\t// set origin to bottom side for scale.y",
				"\tlaserGeo.translate( 0, laserLength / 2, 0 );",
				"\tvar laserMat = new THREE.MeshBasicMaterial({ color: 0x0c89c4 });",
				"",
				"\tvar laser = new THREE.Mesh( laserGeo, laserMat );",
				"\tlaser.rotation.x = - Math.PI / 2;",
				"\tlaser.userData.defaultLength = 6;",
				"\tlaser.scale.y = laser.userData.defaultLength;",
				"",
				"\tlaser.userData.length = new THREE.Vector3();",
				"",
				"\tcontroller.add( laser );",
				"\tcontroller.userData.laser = laser;",
				"",
				"\tcontroller.addEventListener( 'primary press began', function() {",
				"\t\tvar item = interaction.userData.intersection;",
				"\t\tif ( item ) {",
				"\t\t\titem.object.dispatchEvent( {",
				"\t\t\t\ttype: 'primary-down',",
				"\t\t\t\tcontroller: controller",
				"\t\t  \t} );",
				"\t\t}",
				"\t\tinteraction.dispatchEvent( {",
				"\t\t  type: 'primary-down',",
				"\t\t  controller: controller",
				"\t\t} );",
				"\t} );",
				"\tcontroller.addEventListener( 'primary press ended', function() {",
				"\t\tvar item = interaction.userData.intersection;",
				"\t\tif ( item ) {",
				"\t\t\titem.object.dispatchEvent( {",
				"\t\t\t\ttype: 'primary-up',",
				"\t\t\t\tcontroller: controller",
				"\t\t\t} );",
				"\t\t}",
				"\t\tinteraction.dispatchEvent( {",
				"\t\t  type: 'primary-up',",
				"\t\t  controller: controller",
				"\t\t} );",
				"\t} );",
				"",
				"\tcontroller.addEventListener( 'primary touch began', function() {",
				"\t\tvar item = interaction.userData.intersection;",
				"\t\tif ( item ) {",
				"\t\t\titem.object.dispatchEvent( {",
				"\t\t\t\ttype: 'primary-touchstart',",
				"\t\t\t\tcontroller: controller",
				"\t\t  \t} );",
				"\t\t}",
				"\t\tinteraction.dispatchEvent( {",
				"\t\t  type: 'primary-touchstart',",
				"\t\t  controller: controller",
				"\t\t} );",
				"\t} );",
				"\tcontroller.addEventListener( 'primary touch ended', function() {",
				"\t\tvar item = interaction.userData.intersection;",
				"\t\tif ( item ) {",
				"\t\t\titem.object.dispatchEvent( {",
				"\t\t\t\ttype: 'primary-touchend',",
				"\t\t\t\tcontroller: controller",
				"\t\t  \t} );",
				"\t\t}",
				"\t\tinteraction.dispatchEvent( {",
				"\t\t  type: 'primary-touchend',",
				"\t\t  controller: controller",
				"\t\t} );",
				"\t} );",
				"",
				"//\tcontroller.addEventListener( 'touchpad axes changed', axesChanged );",
				"",
				"\tcontroller.addEventListener( 'disconnected', function( event ) {",
				"\t\tif ( controller.parent ) {",
				"\t\t\tcontroller.parent.remove( controller );",
				"\t\t}",
				"\t});",
				"",
				"}"
			]
		]
	],
	"effects": [
		[
			"Initialize Audio",
			[
				"var manager = resources.get( 'audio-manager' );",
				"",
				"for ( var i = 0; i < manager.tracks.length; i++ ) {",
				"\tvar track = manager.tracks[ i ];",
				"\ttrack.node.gain.value = 0;",
				"}",
				"",
				"player.onplay = function() {",
				"\tmanager.start();",
				"};",
				"",
				"player.onpause = function() {",
				"\tmanager.stop();",
				"};",
				"",
				"function start ( progress ) {",
				"}",
				"",
				"function end( progress ) {",
				"}",
				"",
				"function update( progress ) {",
				"}"
			]
		],
		[
			"Change Verse",
			[
				"var manager = resources.get( 'audio-manager' );",
				"",
				"function start( progress ) {",
				"",
				"\tvar duration = manager.getDuration();",
				"\tvar currentTime = WebAudio.getContext().currentTime;",
				"\tvar startTime = manager.startTime;",
				"\tvar elapsed = currentTime - startTime;",
				"\tvar reps = Math.floor( elapsed / duration );",
				"\tvar time = startTime + duration * ( reps + 1 );",
				"",
				"\tfor ( var i = 0; i < manager.tracks.length; i++ ) {",
				"\t\tvar track = manager.tracks[ i ];",
				"\t\ttrack.transition( time );",
				"\t}",
				"",
				"}",
				"",
				"function end( progress ){}",
				"",
				"function update( progress ){}"
			]
		],
		[
			"Boxes Stage",
			[
				"var interaction = resources.get( 'interaction' );",
				"var scene = resources.get( 'scene' );",
				"var stage = new THREE.Group();",
				"",
				"var dlight = new THREE.DirectionalLight( 0xffffff, 0.8 );",
				"dlight.position.set( 1, 1, 1 );",
				"stage.add( dlight );",
				"",
				"var floor = new THREE.Group();",
				"stage.add( floor );",
				"var amount = 10;",
				"",
				"var geometry = new THREE.BoxBufferGeometry( 0.5, 5, 0.5 );",
				"geometry.translate( 0, 2.5, 0 );",
				"",
				"for ( var i = 0; i < amount; i++ ) {",
				"",
				"\tvar pct = i / amount;",
				"\tvar theta = Math.PI * pct * 2;",
				"\tvar radius = 5;",
				"",
				"\tvar mesh = new THREE.Mesh( geometry, new THREE.MeshPhongMaterial( {",
				"\t\tcolor: 'white',",
				"\t\topacity: 0.5,",
				"\t\ttransparent: true",
				"\t} ) );",
				"",
				"\tmesh.position.x = radius * Math.cos( theta );",
				"\tmesh.position.z = radius * Math.sin( theta );",
				"\tmesh.scale.y = 0.001;",
				"",
				"\tfloor.add( mesh );",
				"",
				"}",
				"",
				"stage.userData.floor = floor;",
				"resources.set( 'stage-1', stage );",
				"",
				"function start ( progress ) {",
				"\tscene.add( stage );",
				"}",
				"",
				"function end ( progress ) {",
				"\tscene.remove( stage );",
				"}",
				"",
				"function update ( progress ) {}"
			]
		],
		[
			"render",
			[
				"var renderer = resources.get( 'renderer' );",
				"var interaction = resources.get( 'interaction' );",
				"var camera = resources.get( 'camera' );",
				"var scene = resources.get( 'scene' );",
				"",
				"function start( progress ){}",
				"",
				"function end( progress ){}",
				"",
				"function update( progress ) {",
				"",
				"\tinteraction.userData.update();",
				"\trenderer.render( scene, camera );",
				"",
				"}"
			]
		],
		[
			"Animate In",
			[
				"var stage = resources.get( 'stage-1' );",
				"",
				"function start( progress ){}",
				"",
				"function end( progress ){}",
				"",
				"function update( progress ) {",
				"",
				"\tvar floor = stage.userData.floor;",
				"\tvar item = floor.children[ 7 ];",
				"\tvar t = TWEEN.Easing.Circular.InOut( progress );",
				"",
				"\titem.scale.y = t + 0.001;",
				"",
				"}"
			]
		],
		[
			"Set Loop",
			[
				"var manager = resources.get( 'audio-manager' );",
				"var interaction = resources.get( 'interaction' );",
				"var stage = resources.get( 'stage-1' );",
				"var floor = stage.userData.floor;",
				"var element = floor.children[ 7 ];",
				"",
				"function start ( progress ) {",
				"",
				"\tplayer.setLoop( [ 2, 4 ] );",
				"\tinteraction.userData.listen( element );",
				"",
				"\telement.addEventListener( 'over', over );",
				"\telement.addEventListener( 'out', out );",
				"\telement.addEventListener( 'primary-down', select );",
				"",
				"}",
				"",
				"function end ( progress ) {",
				"",
				"\tinteraction.userData.ignore( element );",
				"\telement.removeEventListener( 'over', over );",
				"\telement.removeEventListener( 'out', out );",
				"\telement.removeEventListener( 'primary-down', select );",
				"",
				"}",
				"",
				"function update ( progress ) {",
				"}",
				"",
				"function over () {",
				"\telement.material.color.setStyle( 'red' );",
				"}",
				"",
				"function out () {",
				"\telement.material.color.setStyle( 'white' );",
				"}",
				"",
				"function select ( event ) {",
				"\tvar controller = event.controller;",
				"\tvar track = manager.tracks[ 1 ];",
				"\tif ( track.node.gain.value ) {",
				"\t\ttrack.node.gain.value = 0;",
				"\t\telement.material.opacity = 0.5;",
				"\t} else {",
				"\t\ttrack.node.gain.value = 1;",
				"\t\telement.material.opacity = 1;",
				"\t\tplayer.setLoop( null );",
				"\t}",
				"}",
				"",
				"",
				"",
				"",
				"",
				"",
				""
			]
		],
		[
			"Set Loop",
			[
				"var manager = resources.get( 'audio-manager' );",
				"var interaction = resources.get( 'interaction' );",
				"var stage = resources.get( 'stage-1' );",
				"var floor = stage.userData.floor;",
				"var element = floor.children[ 8 ];",
				"",
				"function start ( progress ) {",
				"",
				"\tplayer.setLoop( [ 4, 6 ] );",
				"\tinteraction.userData.listen( element );",
				"",
				"\telement.addEventListener( 'over', over );",
				"\telement.addEventListener( 'out', out );",
				"\telement.addEventListener( 'primary-down', select );",
				"",
				"}",
				"",
				"function end ( progress ) {",
				"",
				"\tinteraction.userData.ignore( element );",
				"\telement.removeEventListener( 'over', over );",
				"\telement.removeEventListener( 'out', out );",
				"\telement.removeEventListener( 'primary-down', select );",
				"",
				"}",
				"",
				"function update ( progress ) {",
				"}",
				"",
				"function over () {",
				"\telement.material.color.setStyle( 'red' );",
				"}",
				"",
				"function out () {",
				"\telement.material.color.setStyle( 'white' );",
				"}",
				"",
				"function select ( event ) {",
				"\tvar controller = event.controller;",
				"\tvar track = manager.tracks[ 3 ];",
				"\tif ( track.node.gain.value ) {",
				"\t\ttrack.node.gain.value = 0;",
				"\t\telement.material.opacity = 0.5;",
				"\t} else {",
				"\t\ttrack.node.gain.value = 1;",
				"\t\telement.material.opacity = 1;",
				"\t\tplayer.setsLoop( null );",
				"\t}",
				"}",
				"",
				"",
				"",
				"",
				"",
				"",
				""
			]
		]
	],
	"animations": [
		[
			"AudioManager",
			0,
			70,
			0,
			0,
			true
		],
		[
			"Stage 1",
			0,
			10,
			1,
			2,
			true
		],
		[
			"First Pillar",
			0,
			2,
			2,
			4,
			true
		],
		[
			"Update Video",
			0,
			70,
			6,
			3,
			true
		],
		[
			"Track 1 Loop",
			2,
			4,
			3,
			5,
			true
		],
		[
			"Track 2 Loop",
			4,
			6,
			2,
			6,
			true
		],
		[
			"Stage 2",
			10,
			20,
			2,
			1,
			true
		]
	]
}
