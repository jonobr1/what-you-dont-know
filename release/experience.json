{
	"config": {},
	"libraries": [
		"../release/third-party/WebAudio.js",
		"../release/third-party/three.js",
		"../release/third-party/vr-controller.js",
		"../release/third-party/WebVR.js",
		"../release/third-party/tween.js",
		"../release/src/audio-manager.js",
		"../release/src/interaction.js"
	],
	"includes": [
		[
			"AudioManager",
			[
				"var tracks = [",
				"\t'vocals', 'machine-drum', 'instrumental',",
				"\t'melody', 'blips', 'sub-tone', 'sfx',",
				"\t'summation'",
				"];",
				"",
				"/**",
				" * An array describing what audio clips exist for",
				" * each track at every section of the \"song\". `false`",
				" * means there isn't a clip available for that section.",
				" * `true` means there is a clip available and its",
				" * filename corresponds to the sections array. Finally,",
				" * a String represents the exact base filename to be",
				" * used to select the specific clip.",
				" */",
				"tracks.data = {",
				"\t'vocals': [",
				"\t\ttrue, true, true, true, true, true ],",
				"\t'machine-drum': [",
				"\t\ttrue, true, true, 'chorus', 'breakdown', true ],",
				"\t'instrumental': [",
				"\t\ttrue, true, true, 'chorus', 'breakdown', true ],",
				"\t'melody': [",
				"\t\ttrue, true, true, 'chorus', 'breakdown', true ],",
				"\t'blips': [",
				"\t\tfalse, false, true, true, true, false ],",
				"\t'sub-tone': [",
				"\t\ttrue, true, true, 'chorus', 'breakdown', true ],",
				"\t'sfx': [",
				"\t\tfalse, false, true, true, true, true ],",
				"\t'summation': [",
				"\t\ttrue, true, true, 'chorus', 'breakdown', true ]",
				"};",
				"",
				"var sections = [",
				"\t'verse-1', 'verse-2', 'chorus',",
				"\t'verse-3', 'verse-4', 'breakdown'",
				"];",
				"",
				"sections.data = {};",
				"",
				"var manager = new AudioManager();",
				"",
				"var ua = navigator.userAgent;",
				"var isSafari = !!ua.match( /Safari/ig ) && ( !ua.match( /Chrome/ig ) || !!ua.match( /Edge/ig ) );",
				"var ctx = WebAudio.getContext();",
				"var extension = isSafari ? 'mp3' : 'ogg';",
				"",
				"for ( var name in tracks.data ) {",
				"",
				"\tvar clips = tracks.data[ name ];",
				"\tvar sounds = []",
				"",
				"\tfor ( var i = 0; i < clips.length; i++ ) {",
				"",
				"\t\tvar section = clips[ i ];",
				"",
				"\t\tif ( section === true ) {",
				"\t\t\tsection = sections[ i ];",
				"\t\t}",
				"",
				"\t\tvar url = '../assets/v1/' + section + '-' + name + '.' + extension;",
				"\t\tvar sound = new WebAudio();",
				"\t\tif ( section ) {",
				"\t\t\tsound.onLoad = resources.queue();",
				"\t\t\tsound.src = url;",
				"\t\t}",
				"\t\t// Encforce a specific loop schedule",
				"\t\tsound.loopEnd = manager.getDuration();",
				"\t\tsound.loop = true;",
				"",
				"\t\tsounds.push( sound );",
				"",
				"\t}",
				"",
				"\tmanager.addTrack( name, sounds );",
				"",
				"}",
				"",
				"resources.set( 'audio-manager', manager );"
			]
		],
		[
			"Scene",
			[
				"var scene = new THREE.Scene();",
				"",
				"var ambient = new THREE.HemisphereLight( 0xFEFCFF, 0xB0ADAA, 0.9 );",
				"scene.add( ambient );",
				"",
				"var light = new THREE.DirectionalLight( 0xFFFFFF, 0.35 );",
				"light.position.set( 2.5, 5.0, 2.5 );",
				"light.castShadow = true;",
				"light.shadow.radius = 10;",
				"scene.add( light );",
				"",
				"resources.set( 'scene', scene );"
			]
		],
		[
			"Camera",
			[
				"var scene = resources.get( 'scene' );",
				"",
				"var camera = new THREE.PerspectiveCamera( 60, window.innerWidth / window.innerHeight, .01, 100000 );",
				"var group = new THREE.Group();",
				"group.position.set( 0, 0, 0 );",
				"",
				"group.add( camera );",
				"scene.add( group );",
				"",
				"resources.set( 'camera', camera );"
			]
		],
		[
			"Renderer",
			[
				"var camera = resources.get( 'camera' );",
				"",
				"var renderer = new THREE.WebGLRenderer( { antialias: true, preserveDrawingBuffer: true } );",
				"renderer.setClearColor( 0xf0c8c8, 1 );",
				"renderer.setPixelRatio( window.devicePixelRatio );",
				"",
				"var domElement = resources.get( 'dom' );",
				"domElement.appendChild( renderer.domElement );",
				"",
				"renderer.vr.enabled = true;",
				"domElement.appendChild( WEBVR.createButton( renderer ) );",
				"",
				"resize();",
				"window.addEventListener( 'resize', resize, false );",
				"",
				"function resize() {",
				"",
				"\tvar rect = domElement.getBoundingClientRect();",
				"\tvar width = rect.width;",
				"\tvar height = rect.height;",
				"",
				"\tcamera.aspect = width / height;",
				"",
				"\t// Calculate the fov based on",
				"\t// the aspect ratio to ensure that",
				"\t// some amount of \"left\" and \"right\"",
				"\t// faces are visible. This allows",
				"\t// the user to navigate to different",
				"\t// sections of the song.",
				"\tvar a = Math.pow( width / height, 3 );",
				"\tvar b = height / width;",
				"\tvar variance = 1 - Math.min( a, b );",
				"\tcamera.fov = 40 * variance + 60;",
				"",
				"\tcamera.updateProjectionMatrix();",
				"\trenderer.setSize( width, height );",
				"",
				"}",
				"",
				"resources.set( 'renderer', renderer );"
			]
		],
		[
			"Interaction",
			[
				"var camera = resources.get( 'camera' );",
				"var renderer = resources.get( 'renderer' );",
				"",
				"var interaction = new Interaction( renderer, camera );",
				"interaction.connect();",
				"",
				"resources.set( 'interaction', interaction );"
			]
		],
		[
			"Face",
			[
				"var Face = function( width, height ) {",
				"",
				"  var geometry = Face.Geometry;",
				"  var material = new THREE.ShaderMaterial()",
				"    .copy( Face.Material );",
				"",
				"  THREE.Mesh.call( this, geometry, material );",
				"",
				"  if ( !width ) {",
				"\twidth = 10;",
				"  }",
				"",
				"  if ( !height ) {",
				"\theight = width;",
				"  }",
				"",
				"  this.scale.set( width, height, 1 );",
				"",
				"};",
				"",
				"Face.prototype = Object.create( THREE.Mesh.prototype );",
				"",
				"Face.Geometry = new THREE.PlaneBufferGeometry( 1, 1 );",
				"Face.Material = new THREE.ShaderMaterial( {",
				"",
				"  transparent: true,",
				"  // blending: THREE.AdditiveBlending,",
				"",
				"  uniforms: {",
				"\topacity: { type: 'f', value: 1 },",
				"\tportion: { type: 'f', value: 0 },",
				"\tcolor: { type: 'c', value: new THREE.Color( 0xffffff ) },",
				"\tlinewidth: { type: 'f', value: 0.5 }",
				"  },",
				"",
				"  vertexShader: [",
				"",
				"\t\"varying vec2 vUv;\",",
				"",
				"\t\"void main() {\",",
				"",
				"\t  \"vUv = uv;\",",
				"\t  \"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",",
				"",
				"\t\"}\"",
				"",
				"  ].join( '\\n' ),",
				"",
				"  fragmentShader: [",
				"",
				"\t\"const float PI = 3.141592653589793;\",",
				"\t\"const float amount = 20.0;\",",
				"",
				"\t\"uniform float opacity;\",",
				"\t\"uniform float portion;\",",
				"\t\"uniform vec3 color;\",",
				"\t\"uniform float linewidth;\",",
				"",
				"\t\"varying vec2 vUv;\",",
				"",
				"\t\"float easing( in float k ) {\",",
				"\t  \"return 0.5 * ( 1.0 - cos( PI * k ) );\",",
				"\t\"}\",",
				"",
				"\t\"float line( in float x, in float axis, in float linewidth ) {\",",
				"",
				"\t  \"x *= ( 1.0 - linewidth );\",",
				"\t  \"x += linewidth / 2.0;\",",
				"",
				"\t  \"float t = 1.0 - distance( x, axis );\",",
				"\t  \"t = step( t, 1.0 - linewidth );\",",
				"\t  \"t = 1.0 - t;\",",
				"",
				"\t  \"return t;\",",
				"",
				"\t\"}\",",
				"",
				"\t\"void main() {\",",
				"",
				"\t  \"vec2 uv = vUv;\",",
				"\t  \"float width = linewidth * 0.0025;\",",
				"",
				"\t  \"float f = 0.0;\",",
				"",
				"\t  \"for ( float i = 0.0; i < amount; i ++ ) {\",",
				"",
				"\t\t\"float pct = i / ( amount - 1.0 );\",",
				"\t\t\"float pos = 1.0 - pow( 1.0 - pow( portion, 1.0 ), 8.0 * pct );\",",
				"",
				"\t\t\"f += line( pct, uv.x, width );\",",
				"\t\t\"f += line( pos, uv.y, width );\",",
				"",
				"\t  \"}\",",
				"",
				"\t  \"f += line( 1.0, uv.y, width );\",",
				"",
				"\t  \"gl_FragColor = vec4( color.rgb, clamp( f, 0.0, 1.0 ) * opacity );\",",
				"",
				"\t\"}\"",
				"",
				"  ].join( '\\n' )",
				"",
				"} );",
				"",
				"resources.set( 'Face', Face );"
			]
		],
		[
			"Assets",
			[
				"function load( url ) {",
				"",
				"\tvar img = document.createElement( 'img' );",
				"\timg.src = url;",
				"\treturn img;",
				"",
				"}",
				"",
				"resources.set( 'assets/images/matcap', load( '../assets/textures/matcap.jpg' ) );",
				"resources.set( 'assets/images/noise1', load( '../assets/textures/noise.png' ) );",
				"resources.set( 'assets/images/noise2', load( '../assets/textures/noise2.png' ) );"
			]
		],
		[
			"Geometries",
			[
				"/**",
				" * A collection of project specific geometries.",
				" */",
				"var geometries = [",
				"\tnew THREE.BoxBufferGeometry(),",
				"\tnew THREE.BoxBufferGeometry( 1, 0.1, 0.1 ),",
				"\tnew THREE.CylinderBufferGeometry( 0.1, 0.1, 1 ),",
				"\tnew THREE.CylinderBufferGeometry( 0, 0.5, 1, 32 ),",
				"\tnew THREE.CylinderBufferGeometry( 0, 0.5, 1, 4 ),",
				"\tnew THREE.SphereBufferGeometry( 0.5, 32, 32 )",
				"];",
				"",
				"resources.set( 'geometries', geometries );"
			]
		],
		[
			"Materials",
			[
				"var roughness = new THREE.Texture( resources.get( 'assets/images/noise2' ) );",
				"roughness.anisotropy = 16;",
				"if ( roughness.image.complete ) {",
				"\troughness.needsUpdate = true;",
				"} else {",
				"\troughness.image.addEventListener( 'load', onLoad( roughness ), false );",
				"}",
				"",
				"var metalness = new THREE.Texture( resources.get( 'assets/images/noise1' ) );",
				"metalness.anisotropy = 16;",
				"if ( metalness.image.complete ) {",
				"\tmetalness.needsUpdate = true;",
				"} else {",
				"\tmetalness.image.addEventListener( 'load', onLoad( metalness ), false );",
				"}",
				"",
				"var environment = new THREE.Texture( resources.get( 'assets/images/matcap' ) );",
				"environment.mapping = THREE.SphericalReflectionMapping;",
				"if ( environment.image.complete ) {",
				"\tenvironment.needsUpdate = true;",
				"} else {",
				"\tenvironment.image.addEventListener( 'load', onLoad( environment ), false );",
				"}",
				"",
				"function onLoad ( texture ) {",
				"\treturn function () {",
				"\t\ttexture.needsUpdate = true;",
				"\t};",
				"}",
				"",
				"/**",
				" * A collection of project specific geometries.",
				" */",
				"",
				"var materials = [",
				"\tnew THREE.MeshStandardMaterial( {",
				"\t\tcolor: 0x1982C4,",
				"\t\troughness: 1.0,",
				"\t\tmetalness: 1.0,",
				"\t\troughnessMap: roughness,",
				"\t\tmetalnessMap: metalness,",
				"\t\tenvMap: environment",
				"\t} ),",
				"\tnew THREE.MeshStandardMaterial( {",
				"\t\tcolor: 0x1E5782,",
				"\t\troughness: 1.0,",
				"\t\tmetalness: 1.0,",
				"\t\troughnessMap: roughness,",
				"\t\tmetalnessMap: metalness,",
				"\t\tenvMap: environment",
				"\t} ),",
				"\tnew THREE.MeshStandardMaterial( {",
				"\t\tcolor: 0xD0A1AA,",
				"\t\troughness: 1.0,",
				"\t\tmetalness: 1.0,",
				"\t\troughnessMap: roughness,",
				"\t\tmetalnessMap: metalness,",
				"\t\tenvMap: environment",
				"\t} ),",
				"\tnew THREE.MeshStandardMaterial( {",
				"\t\tcolor: 0x77D0AE,",
				"\t\troughness: 1.0,",
				"\t\tmetalness: 1.0,",
				"\t\troughnessMap: roughness,",
				"\t\tmetalnessMap: metalness,",
				"\t\tenvMap: environment",
				"\t} ),",
				"\tnew THREE.MeshStandardMaterial( {",
				"\t\tcolor: 0xA292A7,",
				"\t\troughness: 1.0,",
				"\t\tmetalness: 1.0,",
				"\t\troughnessMap: roughness,",
				"\t\tmetalnessMap: metalness,",
				"\t\tenvMap: environment",
				"\t} ),",
				"\tnew THREE.MeshStandardMaterial( {",
				"\t\tcolor: 0xFFD800,",
				"\t\troughness: 1.0,",
				"\t\tmetalness: 1.0,",
				"\t\troughnessMap: roughness,",
				"\t\tmetalnessMap: metalness,",
				"\t\tenvMap: environment",
				"\t} ),",
				"\tnew THREE.MeshBasicMaterial( {",
				"\t\tcolor: 0x000000,",
				"\t\twireframe: true",
				"\t} )",
				"];",
				"",
				"// Fill array based on desired weighting",
				"materials.push( materials[ 0 ] );",
				"materials.push( materials[ 1 ] );",
				"materials.push( materials[ 2 ] );",
				"materials.push( materials[ 3 ] );",
				"materials.push( materials[ 4 ] );",
				"materials.push( materials[ 5 ] );",
				"",
				"resources.set( 'materials', materials );"
			]
		]
	],
	"effects": [
		[
			"Initialize Audio",
			[
				"var manager = resources.get( 'audio-manager' );",
				"",
				"player.onplay = function() {",
				"\tmanager.start( 1 );",
				"};",
				"",
				"player.onpause = function() {",
				"\tmanager.stop();",
				"};",
				"",
				"function start ( progress ) {",
				"}",
				"",
				"function end( progress ) {",
				"}",
				"",
				"function update( progress ) {",
				"\tmanager.update();",
				"}"
			]
		],
		[
			"Render",
			[
				"var renderer = resources.get( 'renderer' );",
				"var interaction = resources.get( 'interaction' );",
				"var camera = resources.get( 'camera' );",
				"var scene = resources.get( 'scene' );",
				"",
				"function start( progress ){}",
				"",
				"function end( progress ){}",
				"",
				"function update( progress ) {",
				"",
				"\tTWEEN.update();",
				"\tTHREE.VRController.update();",
				"\tinteraction.update();",
				"\trenderer.render( scene, camera );",
				"",
				"}"
			]
		]
	],
	"animations": [
		[
			"AudioManager",
			0,
			60,
			0,
			0,
			true
		],
		[
			"Update Video",
			0,
			60,
			2,
			1,
			true
		]
	]
}
