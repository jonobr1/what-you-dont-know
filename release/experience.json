{
	"config": {},
	"libraries": [
		"../release/third-party/WebAudio.js",
		"../release/third-party/three.js",
		"../release/third-party/two.js",
		"../release/third-party/WebVR.js",
		"../release/third-party/tween.js",
		"../release/third-party/OrbitControls.js",
		"../release/src/interaction.js"
	],
	"includes": [
		[
			"Params",
			[
				"resources.set( 'params', {",
				"",
				"\tpalette: [",
				"\t\t{",
				"\t\t\tname: 'blue',",
				"\t\t\tsource: 0x6473aa,",
				"\t\t\ttarget: 0x8ba4ff",
				"\t\t},",
				"\t\t{",
				"\t\t\tname: 'green',",
				"\t\t\tsource: 0x63a987,",
				"\t\t\ttarget: 0xc7ff96",
				"\t\t},",
				"\t\t{",
				"\t\t\tname: 'neutral',",
				"\t\t\tsource: 0xc8c8c8,",
				"\t\t\ttarget: 0x141414",
				"\t\t},",
				"\t\t{",
				"\t\t\tname: 'orange',",
				"\t\t\tsource: 0xff9d00,",
				"\t\t\ttarget: 0xffd896",
				"\t\t},",
				"\t\t{",
				"\t\t\tname: 'red',",
				"\t\t\tsource: 0xff3333,",
				"\t\t\ttarget: 0xf0c8c8",
				"\t\t}",
				"\t],",
				"",
				"\tdrag: 0.2",
				"",
				"} );",
				"",
				""
			]
		],
		[
			"AudioManager",
			[
				"var tracks = {",
				"\t'vocals': [],",
				"\t'vocals-a': [],",
				"\t'vocals-b': [],",
				"\t'vocals-c': [],",
				"\t'vocals-d': [],",
				"\t'vocals-e': [],",
				"\t'machine-drum-a': [],",
				"\t'machine-drum-b': [],",
				"\t'instrumental': [], ",
				"\t'melody': [],",
				"\t'blips': [],",
				"\t'sub-tone': [],",
				"\t'sfx': [],",
				"\t'summation': []",
				"};",
				"",
				"// Simple flat array of every WebAudio object",
				"// for quick and easy access.",
				"var sources = [];",
				"var schedule = [];",
				"",
				"schedule.limit = 8;",
				"schedule.index = 0;",
				"schedule.reset = function() {",
				"\tif ( schedule.length !== 0 ) {",
				"\t\tschedule.length = 0;",
				"\t\tschedule.index = 0;",
				"\t}",
				"\treturn schedule;",
				"};",
				"",
				"// Lower is higher seeded",
				"var ranking = {",
				"\t'melody': 0,",
				"\t'machine-drum': 1,",
				"\t'sfx': 2,",
				"\t'summation': 2,",
				"\t'vocals': 3,",
				"\t'instrumental': 3,",
				"\t'blips': 4,",
				"\t'sub-tone': 5,",
				"\t'summation': 5,",
				"\tcomparator: function( a, b ) {",
				"\t\treturn ranking[ a.name ] - ranking[ b.name ];",
				"\t}",
				"};",
				"",
				"/**",
				" * An array describing what audio clips exist for",
				" * each track at every section of the \"song\".",
				" * `true` means there is a clip available and its",
				" * filename corresponds to its position within the object.",
				" * Finally, a `String` represents a corresponding",
				" * clip from a different section of the song. This is",
				" * used to select the specific clip.",
				" *",
				" * When there is a letter, e.g: 'A' or 'B', in the",
				" * id it means that track actually extends and has",
				" * a relationship with the other matching ids. This",
				" * is mainly used for vocals that are two sets of bars.",
				" */",
				"var sequence = [",
				"",
				"\t{",
				"\t\tid: '1.01',",
				"\t\tname: 'intro',",
				"\t\ttracks: {",
				"\t\t\t'machine-drum-a': true,",
				"\t\t\t'melody': true,",
				"\t\t},",
				"\t\tduration: 1",
				"\t},",
				"\t{",
				"\t\tid: '1.02A',",
				"\t\tname: 'intro',",
				"\t\ttracks: {",
				"\t\t\t'machine-drum-a': 'intro',",
				"\t\t\t'melody': 'intro',",
				"\t\t\t'sfx': true,",
				"\t\t\t'summation': true",
				"\t\t},",
				"\t\tduration: 1",
				"\t},",
				"\t{",
				"\t\tid: '1.02B',",
				"\t\tname: 'intro',",
				"\t\ttracks: {",
				"\t\t\t'machine-drum-a': 'intro',",
				"\t\t\t'melody': 'intro',",
				"\t\t\t'sfx': true,",
				"\t\t\t'summation': true",
				"\t\t},",
				"\t\tduration: 1",
				"\t},",
				"",
				"",
				"\t//",
				"",
				"\t{",
				"\t\tid: '1.03',",
				"\t\tname: 'verse-1',",
				"\t\ttracks: {",
				"\t\t\t'vocals-a': true,",
				"\t\t\t'machine-drum-a': 'intro',",
				"\t\t\t'melody': 'intro',",
				"\t\t\t'summation': 'intro'",
				"\t\t},",
				"\t\tduration: 1",
				"\t},",
				"\t{",
				"\t\tid: '1.04',",
				"\t\tname: 'verse-1',",
				"\t\ttracks: {",
				"\t\t\t'vocals-b': true,",
				"\t\t\t'machine-drum-a': 'intro',",
				"\t\t\t'melody': 'intro',",
				"\t\t\t'summation': 'intro'",
				"\t\t},",
				"\t\tduration: 1",
				"\t},",
				"\t{",
				"\t\tid: '1.05',",
				"\t\tname: 'verse-1',",
				"\t\ttracks: {",
				"\t\t\t'vocals-c': true,",
				"\t\t\t'machine-drum-a': 'intro',",
				"\t\t\t'melody': 'intro',",
				"\t\t\t'summation': 'intro'",
				"\t\t},",
				"\t\tduration: 1",
				"\t},",
				"\t{",
				"\t\tid: '1.06',",
				"\t\tname: 'verse-1',",
				"\t\ttracks: {",
				"\t\t\t'vocals-d': true,",
				"\t\t\t'machine-drum-a': 'intro',",
				"\t\t\t'melody': 'intro',",
				"\t\t\t'summation': 'intro'",
				"\t\t},",
				"\t\tduration: 1",
				"\t},",
				"\t{",
				"\t\tid: '1.07',",
				"\t\tname: 'verse-1',",
				"\t\ttracks: {",
				"\t\t\t'vocals-e': true,",
				"\t\t\t'machine-drum-a': 'intro',",
				"\t\t\t'melody': 'intro',",
				"\t\t\t'summation': 'intro'",
				"\t\t},",
				"\t\tduration: 1",
				"\t},",
				"\t{",
				"\t\tid: '1.08',",
				"\t\tname: 'verse-1',",
				"\t\ttracks: {",
				"\t\t\t'vocals-e': 'verse-1',",
				"\t\t\t'machine-drum-a': true,",
				"\t\t\t'instrumental': true,",
				"\t\t\t'melody': true,",
				"\t\t\t'sub-tone': true,",
				"\t\t\t'summation': true",
				"\t\t},",
				"\t\tduration: 1",
				"\t},",
				"",
				"\t//",
				"",
				"\t{",
				"\t\tid: '2.01',",
				"\t\tname: 'verse-2',",
				"\t\ttracks: {",
				"\t\t\t'vocals-a': true,",
				"\t\t\t'machine-drum-a': true,",
				"\t\t\t'instrumental': true,",
				"\t\t\t'melody': true,",
				"\t\t\t'sub-tone': true,",
				"\t\t\t'summation': true",
				"\t\t},",
				"\t\tduration: 1",
				"\t},",
				"\t{",
				"\t\tid: '2.02',",
				"\t\tname: 'verse-2',",
				"\t\ttracks: {",
				"\t\t\t'vocals-b': true,",
				"\t\t\t'machine-drum-a': 'verse-2',",
				"\t\t\t'instrumental': 'verse-2',",
				"\t\t\t'melody': 'verse-2',",
				"\t\t\t'sub-tone': 'verse-2',",
				"\t\t\t'summation': 'verse-2'",
				"\t\t},",
				"\t\tduration: 1",
				"\t},",
				"\t{",
				"\t\tid: '2.03',",
				"\t\tname: 'verse-2',",
				"\t\ttracks: {",
				"\t\t\t'vocals-c': true,",
				"\t\t\t'machine-drum-a': 'verse-2',",
				"\t\t\t'instrumental': 'verse-2',",
				"\t\t\t'melody': 'verse-2',",
				"\t\t\t'sub-tone': 'verse-2',",
				"\t\t\t'summation': 'verse-2'",
				"\t\t},",
				"\t\tduration: 1",
				"\t},",
				"\t{",
				"\t\tid: '2.04A',",
				"\t\tname: 'verse-2',",
				"\t\ttracks: {",
				"\t\t\t'vocals-d': true,",
				"\t\t\t'machine-drum-a': 'verse-2',",
				"\t\t\t'instrumental': 'verse-2',",
				"\t\t\t'melody': 'verse-2',",
				"\t\t\t'sub-tone': 'verse-2',",
				"\t\t\t'summation': 'verse-2'",
				"\t\t},",
				"\t\tduration: 1",
				"\t},",
				"\t{",
				"\t\tid: '2.04B',",
				"\t\tname: 'verse-2',",
				"\t\ttracks: {",
				"\t\t\t'machine-drum-a': 'verse-2',",
				"\t\t\t'instrumental': 'verse-2',",
				"\t\t\t'melody': 'verse-2',",
				"\t\t\t'sub-tone': 'verse-2',",
				"\t\t\t'summation': 'verse-2'",
				"\t\t},",
				"\t\tduration: 1",
				"\t},",
				"\t",
				"\t//",
				"\t",
				"\t{",
				"\t\tid: '3.01',",
				"\t\tname: 'chorus',",
				"\t\ttracks: {",
				"\t\t\t'vocals-a': true,",
				"\t\t\t'machine-drum-a': true,",
				"\t\t\t'instrumental': true,",
				"\t\t\t'melody': true,",
				"\t\t\t'blips': true,",
				"\t\t\t'sub-tone': true,",
				"\t\t\t'sfx': true,",
				"\t\t\t'summation': true",
				"\t\t},",
				"\t\tduration: 1",
				"\t},",
				"\t{",
				"\t\tid: '3.02',",
				"\t\tname: 'chorus',",
				"\t\ttracks: {",
				"\t\t\t'vocals-b': true,",
				"\t\t\t'machine-drum-a': 'chorus',",
				"\t\t\t'instrumental': 'chorus',",
				"\t\t\t'melody': 'chorus',",
				"\t\t\t'blips': 'chorus',",
				"\t\t\t'sub-tone': 'chorus',",
				"\t\t\t'sfx': 'chorus',",
				"\t\t\t'summation': 'chorus'",
				"\t\t},",
				"\t\tduration: 1",
				"\t},",
				"\t{",
				"\t\tid: '3.03',",
				"\t\tname: 'chorus',",
				"\t\ttracks: {",
				"\t\t\t'vocals-c': true,",
				"\t\t\t'machine-drum-a': 'chorus',",
				"\t\t\t'instrumental': 'chorus',",
				"\t\t\t'melody': 'chorus',",
				"\t\t\t'blips': 'chorus',",
				"\t\t\t'sub-tone': 'chorus',",
				"\t\t\t'sfx': 'chorus',",
				"\t\t\t'summation': 'chorus'",
				"\t\t},",
				"\t\tduration: 1",
				"\t},",
				"\t{",
				"\t\tid: '3.04',",
				"\t\tname: 'chorus',",
				"\t\ttracks: {",
				"\t\t\t'vocals-d': true,",
				"\t\t\t'machine-drum-a': 'chorus',",
				"\t\t\t'instrumental': 'chorus',",
				"\t\t\t'melody': 'chorus',",
				"\t\t\t'blips': 'chorus',",
				"\t\t\t'sub-tone': 'chorus',",
				"\t\t\t'sfx': 'chorus',",
				"\t\t\t'summation': 'chorus'",
				"\t\t},",
				"\t\tduration: 1",
				"\t},",
				"\t{",
				"\t\tid: '3.05',",
				"\t\tname: 'chorus',",
				"\t\ttracks: {",
				"\t\t\t'vocals-e': true,",
				"\t\t\t'machine-drum-a': 'chorus',",
				"\t\t\t'instrumental': 'chorus',",
				"\t\t\t'melody': 'chorus',",
				"\t\t\t'blips': 'chorus',",
				"\t\t\t'sub-tone': 'chorus',",
				"\t\t\t'sfx': 'chorus',",
				"\t\t\t'summation': 'chorus'",
				"\t\t},",
				"\t\tduration: 1",
				"\t},",
				"",
				"\t//",
				"",
				"\t{",
				"\t\tid: '4.01',",
				"\t\tname: 'verse-3',",
				"\t\ttracks: {",
				"\t\t\t'vocals-a': true,",
				"\t\t\t'machine-drum-a': 'chorus',",
				"\t\t\t'instrumental': 'chorus',",
				"\t\t\t'melody': 'chorus',",
				"\t\t\t'blips': true,",
				"\t\t\t'sub-tone': 'chorus',",
				"\t\t\t'sfx': true,",
				"\t\t\t'summation': true",
				"\t\t},",
				"\t\tduration: 1",
				"\t},",
				"\t{",
				"\t\tid: '4.02',",
				"\t\tname: 'verse-3',",
				"\t\ttracks: {",
				"\t\t\t'vocals-b': true,",
				"\t\t\t'machine-drum-a': 'chorus',",
				"\t\t\t'instrumental': 'chorus',",
				"\t\t\t'melody': 'chorus',",
				"\t\t\t'blips': 'verse-3',",
				"\t\t\t'sub-tone': 'chorus',",
				"\t\t\t'sfx': 'verse-3',",
				"\t\t\t'summation': 'verse-3'",
				"\t\t},",
				"\t\tduration: 1",
				"\t},",
				"\t{",
				"\t\tid: '4.03',",
				"\t\tname: 'verse-3',",
				"\t\ttracks: {",
				"\t\t\t'vocals-c': true,",
				"\t\t\t'machine-drum-a': 'chorus',",
				"\t\t\t'instrumental': 'chorus',",
				"\t\t\t'melody': 'chorus',",
				"\t\t\t'blips': 'verse-3',",
				"\t\t\t'sub-tone': 'chorus',",
				"\t\t\t'sfx': 'verse-3',",
				"\t\t\t'summation': 'verse-3'",
				"\t\t},",
				"\t\tduration: 1",
				"\t},",
				"\t{",
				"\t\tid: '4.04',",
				"\t\tname: 'verse-3',",
				"\t\ttracks: {",
				"\t\t\t'vocals-d': true,",
				"\t\t\t'machine-drum-a': 'chorus',",
				"\t\t\t'instrumental': 'chorus',",
				"\t\t\t'melody': 'chorus',",
				"\t\t\t'blips': 'verse-3',",
				"\t\t\t'sub-tone': 'chorus',",
				"\t\t\t'sfx': 'verse-3',",
				"\t\t\t'summation': 'verse-3'",
				"\t\t},",
				"\t\tduration: 1",
				"\t},",
				"\t{",
				"\t\tid: '4.05',",
				"\t\tname: 'verse-3',",
				"\t\ttracks: {",
				"\t\t\t'vocals-e': true,",
				"\t\t\t'machine-drum-a': 'chorus',",
				"\t\t\t'instrumental': 'chorus',",
				"\t\t\t'melody': 'chorus',",
				"\t\t\t'blips': 'verse-3',",
				"\t\t\t'sub-tone': 'chorus',",
				"\t\t\t'sfx': 'verse-3',",
				"\t\t\t'summation': 'verse-3'",
				"\t\t},",
				"\t\tduration: 1",
				"\t},",
				"",
				"\t//",
				"",
				"\t{",
				"\t\tid: '5.01',",
				"\t\tname: 'verse-4',",
				"\t\ttracks: {",
				"\t\t\t'vocals-a': true,",
				"\t\t\t'machine-drum-a': 'chorus',",
				"\t\t\t'instrumental': 'chorus',",
				"\t\t\t'melody': 'chorus',",
				"\t\t\t'blips': true,",
				"\t\t\t'sub-tone': 'chorus',",
				"\t\t\t'sfx': true,",
				"\t\t\t'summation': 'verse-3'",
				"\t\t},",
				"\t\tduration: 1",
				"\t},",
				"\t{",
				"\t\tid: '5.02',",
				"\t\tname: 'verse-4',",
				"\t\ttracks: {",
				"\t\t\t'vocals-b': true,",
				"\t\t\t'machine-drum-a': 'chorus',",
				"\t\t\t'instrumental': 'chorus',",
				"\t\t\t'melody': 'chorus',",
				"\t\t\t'blips': 'verse-4',",
				"\t\t\t'sub-tone': 'chorus',",
				"\t\t\t'sfx': 'verse-4',",
				"\t\t\t'summation': 'verse-3'",
				"\t\t},",
				"\t\tduration: 1",
				"\t},",
				"\t{",
				"\t\tid: '5.03',",
				"\t\tname: 'verse-4',",
				"\t\ttracks: {",
				"\t\t\t'vocals-c': true,",
				"\t\t\t'machine-drum-a': 'chorus',",
				"\t\t\t'instrumental': 'chorus',",
				"\t\t\t'melody': 'chorus',",
				"\t\t\t'blips': 'verse-4',",
				"\t\t\t'sub-tone': 'chorus',",
				"\t\t\t'sfx': 'verse-4',",
				"\t\t\t'summation': 'verse-3'",
				"\t\t},",
				"\t\tduration: 1",
				"\t},",
				"\t{",
				"\t\tid: '5.04A',",
				"\t\tname: 'verse-4',",
				"\t\ttracks: {",
				"\t\t\t'vocals-d': true,",
				"\t\t\t'machine-drum-a': 'chorus',",
				"\t\t\t'instrumental': 'chorus',",
				"\t\t\t'melody': 'chorus',",
				"\t\t\t'blips': 'verse-4',",
				"\t\t\t'sub-tone': 'chorus',",
				"\t\t\t'sfx': 'verse-4',",
				"\t\t\t'summation': 'verse-3'",
				"\t\t},",
				"\t\tduration: 1",
				"\t},",
				"\t{",
				"\t\tid: '5.04B',",
				"\t\tname: 'verse-4',",
				"\t\ttracks: {",
				"\t\t\t'machine-drum-a': 'chorus',",
				"\t\t\t'instrumental': 'chorus',",
				"\t\t\t'melody': 'chorus',",
				"\t\t\t'blips': 'verse-4',",
				"\t\t\t'sub-tone': 'chorus',",
				"\t\t\t'sfx': 'verse-4',",
				"\t\t\t'summation': 'verse-3'",
				"\t\t},",
				"\t\tduration: 1",
				"\t},",
				"",
				"\t//",
				"",
				"\t{",
				"\t\tid: '6.01A',",
				"\t\tname: 'breakdown',",
				"\t\ttracks: {",
				"\t\t\t'vocals': true,",
				"\t\t\t'machine-drum-a': true,",
				"\t\t\t'instrumental': true,",
				"\t\t\t'melody': true,",
				"\t\t\t'blips': 'verse-4',",
				"\t\t\t'sub-tone': true,",
				"\t\t\t'sfx': true,",
				"\t\t\t'summation': true",
				"\t\t},",
				"\t\tduration: 1",
				"\t},",
				"\t{",
				"\t\tid: '6.01B',",
				"\t\tname: 'breakdown',",
				"\t\ttracks: {",
				"\t\t\t'machine-drum-a': true,",
				"\t\t\t'instrumental': true,",
				"\t\t\t'melody': true,",
				"\t\t\t'blips': 'verse-4',",
				"\t\t\t'sub-tone': true,",
				"\t\t\t'sfx': true,",
				"\t\t\t'summation': true",
				"\t\t},",
				"\t\tduration: 1",
				"\t},",
				"",
				"\t{",
				"\t\tid: '7.01A',",
				"\t\tname: 'outro',",
				"\t\ttracks: {",
				"\t\t\t'machine-drum-a': true,",
				"\t\t\t'instrumental': true,",
				"\t\t\t'blips': true,",
				"\t\t\t'sfx': true,",
				"\t\t\t'summation': true",
				"\t\t},",
				"\t\tduration: 1",
				"\t},",
				"\t{",
				"\t\tid: '7.01B',",
				"\t\tname: 'outro',",
				"\t\ttracks: {",
				"\t\t\t'machine-drum-a': true,",
				"\t\t\t'instrumental': true,",
				"\t\t\t'blips': true,",
				"\t\t\t'sfx': true,",
				"\t\t\t'summation': true",
				"\t\t},",
				"\t\tduration: 1",
				"\t}",
				"",
				"];",
				"",
				"var paused = true;",
				"var currentTime = 0;",
				"var needsToPlay = false;",
				"var duration = 0;",
				"var beats = 0;",
				"",
				"var manager = {",
				"",
				"\tunitDuration: 5.333, // In seconds",
				"\tstartTime: 0,",
				"",
				"\tsequence: sequence,",
				"",
				"\ttracks: {},",
				"",
				"\tanalysers: {",
				"\t\tlist: []",
				"\t},",
				"",
				"\tfilters: {",
				"\t\tlist: []",
				"\t},",
				"",
				"\tget currentTime() {",
				"\t\tvar ctx = WebAudio.getContext();",
				"\t\tvar playing = !paused;",
				"\t\tif ( playing ) {",
				"\t\t\treturn ( ctx.currentTime - manager.startTime );",
				"\t\t}",
				"\t\treturn currentTime;",
				"\t},",
				"\tset currentTime( time ) {",
				"\t\tvar playing = !paused;",
				"\t\tif ( playing ) {",
				"\t\t\tmanager.pause();",
				"\t\t}",
				"\t\tcurrentTime = time;",
				"\t\tif ( playing ) {",
				"\t\t\tneedsToPlay = true;",
				"\t\t}",
				"\t},",
				"",
				"\tget beats() {",
				"\t\treturn beats;",
				"\t},",
				"\tget duration() {",
				"\t\treturn duration",
				"\t},",
				"",
				"\tpause: function() {",
				"\t\tfor ( var i = 0; i < sources.length; i++ ) {",
				"\t\t\tvar source = sources[ i ];",
				"\t\t\tsource.value.stop( 0 );",
				"\t\t}",
				"\t\tsources.length = 0;",
				"\t\tschedule.reset();",
				"\t\tif ( !paused ) {",
				"\t\t\tcurrentTime = manager.currentTime;",
				"\t\t}",
				"\t\tpaused = true;",
				"\t\treturn manager;",
				"\t},",
				"",
				"\tplay: function() {",
				"",
				"\t\tvar ctx = WebAudio.getContext();",
				"\t\tvar now = ctx.currentTime;",
				"\t\tvar startTime = 0;",
				"\t\tmanager.startTime = now - currentTime;",
				"",
				"\t\tfor ( var i = 0; i < sequence.length; i++ ) {",
				"",
				"\t\t\tvar segment = sequence[ i ];",
				"\t\t\tvar totalDuration = segment.duration * manager.unitDuration;",
				"",
				"\t\t\tif ( currentTime < startTime + totalDuration ) {",
				"",
				"\t\t\t\tfor ( var name in segment.tracks ) {",
				"",
				"\t\t\t\t\tvar sound = segment.tracks[ name ];",
				"\t\t\t\t\tvar buffer = sound.buffer;",
				"\t\t\t\t\tvar offset = currentTime - startTime;",
				"\t\t\t\t\tvar st = manager.startTime + startTime;",
				"\t\t\t\t\tvar et = st + totalDuration - offset;",
				"",
				"\t\t\t\t\tif ( sound.track ) {",
				"",
				"\t\t\t\t\t\tif ( currentTime < startTime ) {",
				"\t\t\t\t\t\t\toffset = 0;",
				"\t\t\t\t\t\t\tet = st + totalDuration;",
				"\t\t\t\t\t\t}",
				"",
				"\t\t\t\t\t\tvar rate = sound.track.node.playbackRate;",
				"\t\t\t\t\t\tvar amount = rate > 1 ? Math.ceil( rate ) : 1;",
				"\t\t\t\t\t\tvar duration = totalDuration / rate;",
				"\t\t\t\t\t\tvar offsetPct = offset / duration;",
				"",
				"\t\t\t\t\t\tfor ( var j = 0; j < amount; j++ ) {",
				"",
				"\t\t\t\t\t\t\tvar source = {",
				"\t\t\t\t\t\t\t\t// Because `ctx.createBufferSource`",
				"\t\t\t\t\t\t\t\t// is an expensive call for the CPU",
				"\t\t\t\t\t\t\t\t// we need to offload the invocation",
				"\t\t\t\t\t\t\t\t// of it to the requestAnimationFrame",
				"\t\t\t\t\t\t\t\t// loop so that we can control the ",
				"\t\t\t\t\t\t\t\t// load on the CPU better. i.e: we're",
				"\t\t\t\t\t\t\t\t// controlling how many times",
				"\t\t\t\t\t\t\t\t// `createBufferSource` is being invoked",
				"\t\t\t\t\t\t\t\t// per animation frame.",
				"\t\t\t\t\t\t\t\tvalue: null,",
				"\t\t\t\t\t\t\t\tbuffer: buffer,",
				"\t\t\t\t\t\t\t\tloop: false,",
				"\t\t\t\t\t\t\t\tplaybackRate: rate,",
				"\t\t\t\t\t\t\t\tstartTime: st + j * duration,",
				"\t\t\t\t\t\t\t\t// See: https://developer.mozilla.org/en-US/docs/Web/API/AudioBufferSourceNode/start#Parameters",
				"\t\t\t\t\t\t\t\toffsetTime: totalDuration * ( offsetPct - j ),",
				"\t\t\t\t\t\t\t\tstopTime: et,",
				"\t\t\t\t\t\t\t\tparent: sound.track.node",
				"\t\t\t\t\t\t\t};",
				"",
				"\t\t\t\t\t\t\tif ( source.offsetTime < 0 ) {",
				"\t\t\t\t\t\t\t\tsource.offsetTime = 0;",
				"\t\t\t\t\t\t\t}",
				"",
				"\t\t\t\t\t\t\tif ( source.offsetTime <= totalDuration ) {",
				"\t\t\t\t\t\t\t\tschedule.push( source );",
				"\t\t\t\t\t\t\t}",
				"",
				"\t\t\t\t\t\t}",
				"",
				"\t\t\t\t\t}",
				"\t\t\t\t}",
				"",
				"\t\t\t}",
				"\t\t\t",
				"\t\t\tstartTime += totalDuration;",
				"",
				"\t\t}",
				"",
				"\t\tpaused = false;",
				"\t\tneedsToPlay = false;",
				"",
				"\t\treturn manager;",
				"",
				"\t},",
				"",
				"\t/**",
				"\t * Call on `requestAnimationFrame` or equivalent",
				"\t * to incrementally schedule `AudioBufferSourceNode`s",
				"\t * to the audio context's graph.",
				"\t */",
				"\tupdate: function() {",
				"",
				"\t\tif ( needsToPlay ) {",
				"\t\t\tmanager.play();",
				"\t\t}",
				"",
				"\t\tvar i = schedule.index;",
				"\t\tvar limit = schedule.limit;",
				"\t\tvar length = Math.min( i + limit, schedule.length );",
				"",
				"\t\twhile ( i < length ) {",
				"",
				"\t\t\tvar source = schedule[ i ];",
				"\t\t\tvar startTime = source.startTime;",
				"\t\t\tvar stopTime = source.stopTime;",
				"\t\t\tvar offsetTime = source.offsetTime;",
				"",
				"\t\t\tsource.value = ctx.createBufferSource();",
				"\t\t\tsource.value.buffer = source.buffer;",
				"\t\t\tsource.value.loop = source.loop;",
				"\t\t\tsource.value.playbackRate.value = source.playbackRate;",
				"\t\t\tsource.value.start( startTime, offsetTime );",
				"\t\t\t// Due to Safari inconsistency we cannot schedule multiple stops",
				"\t\t\t// More info here: https://bugs.webkit.org/show_bug.cgi?id=180130",
				"\t\t\t// source.stop( stopTime );",
				"\t\t\tsource.value.connect( source.parent );",
				"\t\t\tsources.push( source );",
				"",
				"\t\t\ti++;",
				"",
				"\t\t}",
				"",
				"\t\tschedule.index = length;",
				"",
				"\t\tif ( schedule.index >= schedule.length ) {",
				"\t\t\tschedule.reset();",
				"\t\t}",
				"",
				"\t\treturn manager;",
				"",
				"\t},",
				"",
				"\tupdateFFT: function() {",
				"",
				"\t\tmanager.analyser.getByteTimeDomainData( manager.analyser.data );",
				"",
				"\t\tfor ( var i = 0; i < manager.analysers.list.length; i++ ) {",
				"\t\t\tvar analyser = manager.analysers.list[ i ];",
				"\t\t\tanalyser.getByteFrequencyData( analyser.data );",
				"\t\t}",
				"",
				"\t\treturn manager;",
				"",
				"\t},",
				"",
				"\taddTrack: function( name, clips ) {",
				"",
				"\t\tvar ctx = WebAudio.getContext();",
				"",
				"\t\tvar key = name.replace( /\\-[a-zA-Z]$/i, '' );",
				"\t\tvar analyser = manager.analysers[ key ];",
				"\t\tvar filter = manager.filters[ key ];",
				"",
				"\t\tif ( !( key in manager.analysers ) ) {",
				"\t\t\tanalyser = createAnalyser( ctx );",
				"\t\t\tanalyser.name = key;",
				"\t\t\tmanager.analysers[ key ] = analyser;",
				"\t\t\tmanager.analysers.list.push( analyser );",
				"\t\t}",
				"",
				"\t\tif ( !( key in manager.filters ) ) {",
				"\t\t\tfilter = createFilter( ctx );",
				"\t\t\tfilter.name = key;",
				"\t\t\tmanager.filters[ key ] = filter;",
				"\t\t\tmanager.filters.list.push( filter );",
				"\t\t\tfilter.connect( manager.destination );",
				"\t\t}",
				"",
				"\t\tvar track = {",
				"\t\t\tname: name,",
				"\t\t\tclips: clips,",
				"\t\t\tnode: filter",
				"\t\t};",
				"",
				"\t\tfor ( var i = 0; i < clips.length; i++ ) {",
				"\t\t\tvar clip = clips[ i ];",
				"\t\t\tif ( clip && !clip.connected ) {",
				"\t\t\t\tclip.track = track;",
				"\t\t\t\tclip.connect( track.node );",
				"\t\t\t\tclip.connected = true;",
				"\t\t\t}",
				"\t\t}",
				"",
				"\t\ttrack.node.connect( manager.analysers[ key ] );",
				"",
				"\t\tmanager.tracks[ name ] = track;",
				"",
				"\t\treturn track;",
				"",
				"\t}",
				"",
				"};",
				"",
				"var i, name, sound, url, property;",
				"var ua = navigator.userAgent;",
				"var isMP3 = ( !!ua.match( /Safari/ig ) && !ua.match( /Chrome/ig ) ) || !!ua.match( /Edge/ig );",
				"var ctx = WebAudio.getContext();",
				"var extension = isMP3 ? 'mp3' : 'ogg';",
				"",
				"for ( i = 0; i < sequence.length; i++ ) {",
				"",
				"\tvar segment = sequence[ i ];",
				"\tduration += segment.duration * manager.unitDuration;",
				"\tbeats += segment.duration * 4;",
				"\t",
				"\tfor ( name in tracks ) {",
				"",
				"\t\tsound = null;",
				"\t\turl = '../assets/v2/' + segment.name + '-' + name + '.' + extension;",
				"",
				"\t\tif ( segment.tracks[ name ] ) {",
				"",
				"\t\t\tswitch ( typeof segment.tracks[ name ] ) {",
				"\t\t\t\tcase 'object':",
				"\t\t\t\t\tsound = new WebAudio();",
				"\t\t\t\t\tsound.onLoad = resources.queue();",
				"\t\t\t\t\tsound.src = url;",
				"\t\t\t\t\tfor ( property in segment.tracks[ name ] ) {",
				"\t\t\t\t\t\tsound[ property ] = segment.tracks[ name ][ property ];",
				"\t\t\t\t\t}",
				"\t\t\t\t\tsound.section = segment.name;",
				"\t\t\t\t\tbreak;",
				"\t\t\t\tcase 'string':",
				"\t\t\t\t\tsound = getSoundByTrackNameAndSection( name, segment.tracks[ name ] );",
				"\t\t\t\t\tbreak;",
				"\t\t\t\tcase 'boolean':",
				"\t\t\t\t\t// Create a new sound",
				"\t\t\t\t\tsound = new WebAudio();",
				"\t\t\t\t\tsound.onLoad = resources.queue();",
				"\t\t\t\t\tsound.src = url;",
				"\t\t\t\t\tsound.section = segment.name;",
				"\t\t\t\t\tbreak;",
				"\t\t\t}",
				"",
				"\t\t\t// Overwrite data saved to have",
				"\t\t\t// convenient access to the sound",
				"\t\t\tsegment.tracks[ name ] = sound;",
				"",
				"\t\t}",
				"",
				"\t\ttracks[ name ].push( sound );",
				"",
				"\t}",
				"",
				"}",
				"",
				"// Initialize Audio Manager",
				"",
				"var ctx = WebAudio.getContext();",
				"",
				"manager.master = ctx.createGain();",
				"manager.master.connect( ctx.destination );",
				"",
				"manager.destination = ctx.createGain();",
				"manager.destination.connect( manager.master );",
				"",
				"manager.analyser = createAnalyser( ctx );",
				"manager.destination.connect( manager.analyser );",
				"",
				"for ( name in tracks ) {",
				"\tmanager.addTrack( name, tracks[ name ] );",
				"}",
				"",
				"manager.analysers.list.sort( ranking.comparator );",
				"manager.filters.list.sort( ranking.comparator );",
				"",
				"//",
				"",
				"function getSoundByTrackNameAndSection( track, section ) {",
				"",
				"\tvar list = tracks[ track ];",
				"\tvar regex = new RegExp( section, 'i' );",
				"",
				"\tfor ( var i = 0; i < list.length; i++ ) {",
				"\t\tvar item = list[ i ];",
				"\t\tif ( item && regex.test( item.section ) ) {",
				"\t\t\treturn item;",
				"\t\t}",
				"\t}",
				"",
				"\treturn null;",
				"",
				"}",
				"",
				"function createAnalyser( ctx ) {",
				"",
				"\tvar analyser = ctx.createAnalyser();",
				"\tanalyser.fftSize = 32;",
				"\tanalyser.data = new Uint8Array( analyser.frequencyBinCount );",
				"",
				"\treturn analyser;",
				"}",
				"",
				"function createFilter( ctx ) {",
				"",
				"    var node = ctx.createGain();",
				"\tnode.playbackRate = 1;",
				"\tnode.setTransform = function( line ) {",
				"",
				"\t\tvar rate = 1;",
				"",
				"\t\tswitch ( line ) {",
				"\t\t\tcase - 2:",
				"\t\t\t\trate = 0.50;",
				"\t\t\t\tbreak;",
				"\t\t\tcase - 1:",
				"\t\t\t\trate = 0.75;",
				"\t\t\t\tbreak;",
				"\t\t\tcase 0:",
				"\t\t\t\trate = 1.00;",
				"\t\t\t\tbreak;",
				"\t\t\tcase 1:",
				"\t\t\t\trate = 1.25;",
				"\t\t\t\tbreak;",
				"\t\t\tcase 2:",
				"\t\t\t\trate = 1.50;",
				"\t\t\t\tbreak;",
				"\t\t\tdefault:",
				"\t\t\t\trate = 1;",
				"\t\t}",
				"",
				"\t\tif ( rate !== node.playbackRate ) {",
				"\t\t\t// Reset audio scheduling and",
				"\t\t\t// update the `playbackRate` value",
				"\t\t\tvar playing = !paused;",
				"\t\t\tif ( playing ) {",
				"\t\t\t\tmanager.pause();",
				"\t\t\t}",
				"\t\t\tnode.playbackRate = rate;",
				"\t\t\tif ( playing ) {",
				"\t\t\t\tneedsToPlay = true;",
				"\t\t\t}",
				"\t\t}",
				"",
				"\t};",
				"",
				"    return node;",
				"",
				"}",
				"",
				"resources.set( 'audio-manager', manager );"
			]
		],
		[
			"AlternateGothic3D",
			[
				"var callbacks = [];",
				"var ready = false;",
				"",
				"var queue = resources.queue();",
				"var link = document.createElement( 'link' );",
				"",
				"link.onerror = failed;",
				"link.onload = loaded;",
				"",
				"link.setAttribute( 'rel', 'stylesheet' );",
				"link.setAttribute( 'href', '//use.typekit.net/cjj0tob.css' );",
				"",
				"document.head.appendChild( link );",
				"",
				"var geometry = new THREE.PlaneBufferGeometry( 1, 1, 4, 4 );",
				"var material = new THREE.ShaderMaterial( {",
				"\tuniforms: {",
				"\t\tflipped: { type: 'b', value: false },",
				"\t\timage: { type: 't', value: null },",
				"\t\tinner: { type: 'f', value: 0.75 },",
				"\t\touter: { type: 'f', value: 0.98 }",
				"\t},",
				"\tvertexShader: [",
				"",
				"\t\t'uniform float inner;',",
				"\t\t'uniform float outer;',",
				"\t\t",
				"\t\t'varying vec2 vUv;',",
				"",
				"\t\t'void main() {',",
				"",
				"\t\t\t'vUv = uv;',",
				"\t\t\t'vec3 pos = vec3( position.xyz );',",
				"//\t\t\t'pos.z *= mix( inner, outer, pos.x + 0.5 );',",
				"",
				"\t\t\t'vec4 mvPosition = modelViewMatrix * vec4( pos, 1.0 );',",
				"\t\t\t'gl_Position = projectionMatrix * mvPosition;',",
				"",
				"\t\t'}'",
				"",
				"\t].join( '\\n' ),",
				"\tfragmentShader: [",
				"",
				"\t\t'uniform bool flipped;',",
				"\t\t'uniform sampler2D image;',",
				"",
				"\t\t'varying vec2 vUv;',",
				"",
				"\t\t'void main() {',",
				"",
				"\t\t\t'vec2 uv = vec2( vUv.xy );',",
				"\t\t\t'if ( flipped ) {',",
				"\t\t\t\t'uv.x = 1.0 - uv.x;',",
				"\t\t\t'}',",
				"\t\t\t'vec4 texel = texture2D( image, uv );',",
				"\t\t\t'gl_FragColor = texel;',",
				"\t\t\t// 'gl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );',",
				"",
				"\t\t'}'",
				"",
				"\t].join( '\\n' ),",
				"\twireframe: false,",
				"\ttransparent: true,",
				"\t// depthTest: false,",
				"\tdepthWrite: false,",
				"\tside: THREE.DoubleSide",
				"} );",
				"",
				"geometry.rotateX( - Math.PI / 2 );",
				"",
				"function loaded() {",
				"",
				"\tif ( loaded.completed ) {",
				"\t\treturn;",
				"\t}",
				"",
				"\tupdateText( 'force ctx text' );",
				"",
				"\tsetTimeout( function() {",
				"\t\tfor ( var i = 0; i < callbacks.length; i++ ) {",
				"\t\t\tcallbacks[ i ]();",
				"\t\t}",
				"\t\tcallbacks.length = 0;",
				"\t\tready = true;",
				"\t\tqueue();",
				"\t}, 1000 );",
				"",
				"\tloaded.completed = true;",
				"",
				"}",
				"",
				"function failed() {",
				"",
				"\tTwo.Text.Ratio = 1;",
				"\tloaded();",
				"",
				"}",
				"",
				"function updateText( text, styles ) {",
				"",
				"\tvar resolution = ( styles && styles.resolution ) ? styles.resolution : 2; ",
				"\tvar two = new Two( {",
				"\t\ttype: Two.Types.canvas,",
				"\t\twidth: 128,",
				"\t\theight: 128,",
				"\t\tratio: resolution",
				"\t} );",
				"",
				"\ttwo.scene.translation.set( two.width / 2, two.height / 2 );",
				"\ttwo.scene.rotation = Math.PI / 2;",
				"",
				"\tvar message = two.makeText('', 0, 0, {",
				"\t\tfamily: 'alternate-gothic-no-3-d, sans-serif',",
				"\t\tweight: 400,",
				"\t\tsize: 13,",
				"\t\tleading: 0,",
				"\t\tbaseline: 'middle'",
				"\t} );",
				"",
				"\tif ( styles && styles.fill ) {",
				"\t\tmessage.fill = styles.fill;",
				"\t} else {",
				"\t\tmessage.fill = 'transparent';",
				"\t}",
				"\tif ( styles && styles.stroke ) {",
				"\t\tmessage.stroke = styles.stroke;",
				"\t} else {",
				"\t\tmessage.stroke = '#000';",
				"\t}",
				"",
				"\tmessage.value = text;",
				"\tmessage.scale = 1;  // Reset",
				"",
				"    var rect = message.getBoundingClientRect( true );",
				"    var scale = Math.min( two.width / rect.width, two.height / rect.height );",
				"",
				"\tscale *= 0.75;",
				"",
				"    message.scale = scale;",
				"\tif ( styles && styles.linewidth ) {",
				"\t\tmessage.linewidth = styles.linewidth;",
				"\t} else {",
				"\t\tmessage.linewidth = 1 / scale;",
				"\t}",
				"",
				"\ttwo.update();",
				"",
				"\treturn {",
				"\t\tcanvas: two.renderer.domElement,",
				"\t\tscale: scale",
				"\t};",
				"",
				"}",
				"",
				"resources.set( 'alternate-gothic-3d', {",
				"",
				"\tready: function( func ) {",
				"\t\tif ( ready ) {",
				"\t\t\tfunc();",
				"\t\t} else {",
				"\t\t\tcallbacks.push( func );",
				"\t\t}",
				"\t},",
				"",
				"\tget: updateText,",
				"\t",
				"\tcreate: function( text, styles ) {",
				"",
				"\t\tvar result = updateText( text, styles );",
				"\t\tvar canvas = result.canvas;",
				"\t\tvar texture = new THREE.Texture( canvas );",
				"\t\tvar mesh = new THREE.Mesh( geometry, material.clone() );",
				"",
				"\t\ttexture.minFilter = THREE.LinearFilter;",
				"\t\ttexture.magFilter = THREE.LinearFilter;",
				"\t\ttexture.generateMipMaps = false;",
				"\t\ttexture.needsUpdate = true;",
				"",
				"\t\tmesh.material.uniforms.image.value = texture;",
				"\t\tmesh.userData.scale = result.scale;",
				"",
				"\t\treturn mesh;",
				"",
				"\t}",
				"",
				"} );"
			]
		],
		[
			"Scene",
			[
				"var scene = new THREE.Scene();",
				"",
				"resources.set( 'scene', scene );"
			]
		],
		[
			"Camera",
			[
				"var scene = resources.get( 'scene' );",
				"",
				"var camera = new THREE.PerspectiveCamera( 60, window.innerWidth / window.innerHeight, .05, 100 );",
				"var group = new THREE.Group();",
				"group.position.set( 0, 0, 0 );",
				"",
				"group.rotation.y = - 0.5 * Math.PI;",
				"",
				"group.add( camera );",
				"scene.add( group );",
				"",
				"resources.set( 'camera', camera );"
			]
		],
		[
			"Renderer",
			[
				"var camera = resources.get( 'camera' );",
				"",
				"var renderer = new THREE.WebGLRenderer( {",
				"\tantialias: true,",
				"\tpreserveDrawingBuffer: true",
				"} );",
				"renderer.setClearColor( 0x000000, 1 );",
				"renderer.setPixelRatio( window.devicePixelRatio );",
				"",
				"renderer.shadowMap.enabled = true;",
				"// renderer.shadowMap.type = THREE.BasicShadowMap;",
				"// renderer.shadowMap.type = THREE.PCFSoftShadowMap;",
				"",
				"var domElement = resources.get( 'dom' );",
				"domElement.appendChild( renderer.domElement );",
				"",
				"renderer.vr.enabled = true;",
				"var WebVRButton = WEBVR.createButton( renderer, { referenceSpaceType: 'eye-level' } );",
				"WebVRButton.style.zIndex = 'unset';",
				"domElement.appendChild( WebVRButton );",
				"",
				"resize();",
				"window.addEventListener( 'resize', resize, false );",
				"",
				"function resize() {",
				"",
				"\tvar rect = domElement.getBoundingClientRect();",
				"\tvar width = rect.width;",
				"\tvar height = rect.height;",
				"",
				"\tcamera.aspect = width / height;",
				"\tcamera.updateProjectionMatrix();",
				"",
				"\trenderer.setSize( width, height );",
				"",
				"}",
				"",
				"resources.set( 'renderer', renderer );"
			]
		],
		[
			"Backdrop",
			[
				"var scene = resources.get( 'scene' );",
				"var params = resources.get( 'params' );",
				"",
				"var backdrop = new THREE.Mesh(",
				"\tnew THREE.SphereBufferGeometry( 7.5, 16, 16 ),",
				"\tnew THREE.ShaderMaterial( {",
				"",
				"\t\tuniforms: {",
				"\t\t\tcSource: { type: 'c', value: new THREE.Color( 0x000000 ) },",
				"\t\t\tcTarget: { type: 'c', value: new THREE.Color( 0x000000 ) },",
				"\t\t\tambient: { type: 'f', value: 1 }",
				"\t\t},",
				"",
				"\t\tvertexShader: [",
				"",
				"\t\t\t'varying vec2 vUv;',",
				"",
				"\t\t\t'void main() {',",
				"",
				"\t\t\t\t'vUv = uv;',",
				"\t\t\t\t'gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',",
				"",
				"\t\t\t'}'",
				"",
				"\t\t].join( '\\n' ),",
				"",
				"\t\tfragmentShader: [",
				"",
				"\t\t\t'uniform vec3 cSource;',",
				"\t\t\t'uniform vec3 cTarget;',",
				"\t\t\t'uniform float ambient;',",
				"",
				"\t\t\t'varying vec2 vUv;',",
				"\t\t\t",
				"\t\t\t'void main() {',",
				"",
				"\t\t\t\t'vec3 pigment = mix( cSource, cTarget, vUv.y );',",
				"\t\t\t\t'gl_FragColor = vec4( ambient * pigment.rgb, 1.0 );',",
				"",
				"\t\t\t'}'",
				"",
				"\t\t].join( '\\n' ),",
				"\t\t",
				"\t\tside: THREE.BackSide",
				"",
				"\t} )",
				");",
				"",
				"backdrop.userData.cSource = new THREE.Color( 0x000000 );",
				"backdrop.userData.cTarget = new THREE.Color( 0x000000 );",
				"",
				"backdrop.userData.setSourceColor = function ( color ) {",
				"\tbackdrop.userData.cSource.set( color );",
				"\treturn backdrop;",
				"};",
				"",
				"backdrop.userData.setTargetColor = function ( color ) {",
				"\tbackdrop.userData.cTarget.set( color );",
				"\treturn backdrop;",
				"};",
				"",
				"backdrop.userData.update = function ( progress, intensity ) {",
				"",
				"\tvar source = backdrop.userData.cSource;",
				"\tvar target = backdrop.userData.cTarget;",
				"",
				"\tif ( !backdrop.material.uniforms.cSource.value.equals( source ) ) {",
				"\t\tbackdrop.material.uniforms.cSource.value.lerp( source, params.drag );",
				"\t}",
				"\tif ( !backdrop.material.uniforms.cTarget.value.equals( target ) ) {",
				"\t\tbackdrop.material.uniforms.cTarget.value.lerp( target, params.drag );",
				"\t}",
				"",
				"\tbackdrop.material.uniforms.ambient.value = intensity;",
				"",
				"\treturn backdrop;",
				"",
				"};",
				"",
				"scene.add( backdrop );",
				"",
				"resources.set( 'backdrop', backdrop );"
			]
		],
		[
			"Interaction",
			[
				"var camera = resources.get( 'camera' );",
				"var renderer = resources.get( 'renderer' );",
				"var backdrop = resources.get( 'backdrop' );",
				"",
				"var interaction = new Interaction( renderer, camera );",
				"",
				"interaction.autoHideControllers = true;",
				"interaction.connect();",
				"",
				"for ( var i = 0; i < interaction.XRControllers.length; i++ ) {",
				"\tvar controller = interaction.XRControllers[ i ];",
				"\tvar laser = controller.userData.laser;",
				"\tvar material = laser.material;",
				"\tmaterial.emissive = backdrop.material.uniforms.cSource.value;",
				"}",
				"",
				"resources.set( 'interaction', interaction );"
			]
		],
		[
			"Ring",
			[
				"var TWO_PI = Math.PI * 2;",
				"var HALF_PI = Math.PI / 2;",
				"",
				"var scene = resources.get( 'scene' );",
				"var backdrop = resources.get( 'backdrop' );",
				"var manager = resources.get( 'audio-manager' );",
				"",
				"var radius = 2;",
				"var thickness = 0.33 * 2;",
				"var radialSegments = 4;",
				"var tubularSegments = 512;",
				"",
				"var vector = new THREE.Vector3();",
				"var bonesNeedUpdate = true;",
				"",
				"var geometry = new THREE.TorusBufferGeometry( radius, thickness / 2, radialSegments, tubularSegments );",
				"",
				"var data = new Uint8Array( [ 255, 255, 255, 0, 0, 0 ] );",
				"var texture = new THREE.DataTexture( data, 1, 2, THREE.RGBFormat );",
				"texture.wrapS = THREE.RepeatWrapping;",
				"texture.wrapT = THREE.RepeatWrapping;",
				"texture.magFilter = THREE.NearestFilter;",
				"texture.repeat.set( 1, 6 );",
				"texture.needsUpdate = true;",
				"",
				"var material = new THREE.MeshStandardMaterial( {",
				"\tskinning: true,",
				"\tmetalness: 0.1,",
				"\troughness: 0.5,",
				"\troughnessMap: texture,",
				"\tmetalnessMap: texture,",
				"\t// alphaMap: texture,",
				"\t// alphaTest: 0.5,",
				"\t// side: THREE.DoubleSide,",
				"\t// flatShading: true",
				"} );",
				"",
				"material.color = backdrop.material.uniforms.cSource.value;",
				"geometry.rotateX( Math.PI / 2 );",
				"",
				"var splines = {",
				"\tpositions: [],",
				"\trotations: [],",
				"\tscales: []",
				"};",
				"",
				"var bones = [];",
				"var amount = 24;",
				"var root = new THREE.Bone();",
				"bones.push( root );",
				"",
				"for ( var i = 0; i < amount; i++ ) {",
				"",
				"\tvar pct = i / amount;",
				"\tvar theta = pct * TWO_PI;",
				"\tvar bone = new THREE.Bone();",
				"",
				"\tbone.position.x = radius * Math.cos( theta );",
				"\tbone.position.z = radius * Math.sin( theta );",
				"\tbone.rotation.order = 'YXZ';",
				"\tbone.rotation.y = Math.atan2( - bone.position.x, - bone.position.z );",
				"",
				"\tsplines.positions.push( bone.position.clone() );",
				"",
				"\tbone.userData.theta = theta;",
				"\tbone.userData.euler = new THREE.Euler().copy( bone.rotation );",
				"",
				"\troot.add( bone );",
				"\tbones.push( bone );",
				"\t",
				"\tif ( i < manager.analysers.list.length ) {",
				"",
				"\t\tpct = i / manager.analysers.list.length;",
				"\t\ttheta = pct * TWO_PI;",
				"",
				"\t\tvar ct = Math.cos( theta );",
				"\t\tvar st = Math.sin( theta );",
				"",
				"\t\tvar rotation = new THREE.Vector3( ct, 0, st );",
				"\t\tvar scale = new THREE.Vector3( ct, 1, st );",
				"",
				"\t\tsplines.rotations.push( rotation );",
				"\t\tsplines.scales.push( scale );",
				"",
				"\t}",
				"",
				"}",
				"",
				"var distanceBetweenBones = bones[ 5 ].position.distanceTo( bones[ 6 ].position );",
				"var positions = geometry.attributes.position;",
				"",
				"var weightResolution = 4;",
				"var indices = [];",
				"var weights = [];",
				"",
				"var v1 = new THREE.Vector3();",
				"var v2 = new THREE.Vector3();",
				"",
				"var sortedBones = [];",
				"",
				"for ( var i = 0; i < bones.length; i ++ ) {",
				"",
				"\tvar bone = bones[ i ];",
				"\tsortedBones.push( { id: i, bone: bone, distance: 0 } );",
				"",
				"}",
				"",
				"function getNearestBones( vertex ) {",
				"",
				"\tfor ( var i = 0; i < sortedBones.length; i ++ ) {",
				"",
				"\t\tvar boneData = sortedBones[ i ];",
				"\t\tboneData.bone.getWorldPosition( v2 );",
				"\t\tboneData.distance = vertex.distanceTo( v2 );",
				"",
				"\t}",
				"",
				"\tsortedBones.sort( function ( a, b ) { return a.distance - b.distance } );",
				"",
				"\treturn sortedBones;",
				"",
				"}",
				"",
				"for ( var i = 0, j = 0; i < positions.count * weightResolution; i += weightResolution, j += 3 ) {",
				"",
				"\tv1.fromArray( positions.array, j );",
				"",
				"\tvar data = getNearestBones( v1 );",
				"",
				"\tvar d0 = data[ 0 ];",
				"\tvar d1 = data[ 1 ];",
				"\tvar d2 = data[ 2 ];",
				"\tvar d3 = data[ 3 ];",
				"\t",
				"\tvar dd0 = d0.distance;",
				"\tvar dd1 = d1.distance;",
				"\tvar dd2 = d2.distance;",
				"\tvar dd3 = d3.distance;",
				"",
				"\tvar shortest = dd0;",
				"\tvar farthest = dd3;",
				"\tvar spread = distanceBetweenBones;",
				"\tvar smooth = TWEEN.Easing.Sinusoidal.Out;",
				"",
				"\tvar wd0 = ( ( dd0 - shortest ) / spread );",
				"\tvar wd1 = ( ( dd1 - shortest ) / spread );",
				"\tvar wd2 = ( ( dd2 - shortest ) / spread );",
				"\tvar wd3 = ( ( dd3 - shortest ) / spread );",
				"",
				"\twd0 = Math.min( wd0, 1 );",
				"\twd1 = Math.min( wd1, 1 );",
				"\twd2 = Math.min( wd2, 1 );",
				"\twd3 = Math.min( wd3, 1 );",
				"",
				"\twd0 = smooth( wd0 );",
				"\twd1 = smooth( wd1 );",
				"\twd2 = smooth( wd2 );",
				"\twd3 = smooth( wd3 );",
				"",
				"\twd0 = Math.floor( 100 * wd0 ) / 100;",
				"\twd1 = Math.floor( 100 * wd1 ) / 100;",
				"\twd2 = Math.floor( 100 * wd2 ) / 100;",
				"\twd3 = Math.floor( 100 * wd3 ) / 100;",
				"",
				"\twd0 = 1 - wd0;",
				"\twd1 = 1 - wd1;",
				"\twd2 = 1 - wd2;",
				"\twd3 = 1 - wd3;",
				"",
				"\tvar sum = wd0 + wd1 + wd2 + wd3;",
				"",
				"\twd0 /= sum;",
				"\twd1 /= sum;",
				"\twd2 /= sum;",
				"\twd3 /= sum;",
				"",
				"\tindices[ i + 0 ] = d0.id;",
				"\tindices[ i + 1 ] = d1.id;",
				"\tindices[ i + 2 ] = d2.id;",
				"\tindices[ i + 3 ] = d3.id;",
				"",
				"\tweights[ i + 0 ] = wd0;",
				"\tweights[ i + 1 ] = wd1;",
				"\tweights[ i + 2 ] = wd2;",
				"\tweights[ i + 3 ] = wd3;",
				"",
				"}",
				"",
				"geometry.addAttribute( 'skinIndex', new THREE.Float32BufferAttribute( indices, weightResolution ) );",
				"geometry.addAttribute( 'skinWeight', new THREE.Float32BufferAttribute( weights, weightResolution ) );",
				"",
				"var torus = new THREE.SkinnedMesh( geometry, material );",
				"",
				"torus.receiveShadow = true;",
				"",
				"torus.userData.splineResolution = manager.analysers.list.length;",
				"torus.userData.root = root;",
				"torus.userData.radius = radius;",
				"torus.userData.thickness = thickness;",
				"",
				"torus.add( root );",
				"torus.bind( new THREE.Skeleton( bones ) );",
				"scene.add( torus );",
				"",
				"// Generate Spline from Bones",
				"",
				"geometry = new THREE.BufferGeometry();",
				"geometry.addAttribute(",
				"\t'position', ",
				"\tnew THREE.BufferAttribute( new Float32Array( tubularSegments * 3 ), 3 )",
				");",
				"",
				"splines.positions = new THREE.CatmullRomCurve3( splines.positions, true );",
				"splines.rotations = new THREE.CatmullRomCurve3( splines.rotations, true );",
				"splines.scales = new THREE.CatmullRomCurve3( splines.scales, true );",
				"",
				"splines.mesh = new THREE.Line( geometry, new THREE.LineBasicMaterial( {",
				"\tcolor: 'yellow'",
				"} ) );",
				"",
				"splines.mesh.visible = false;",
				"",
				"torus.userData.splines = splines;",
				"torus.userData.update = update;",
				"torus.userData.normalToRadians = normalToRadians;",
				"torus.userData.setPositionY = setPositionY;",
				"torus.userData.setTwist = setTwist;",
				"torus.userData.setScale = setScale;",
				"",
				"function update () {",
				"",
				"\tvar position, t, i, bone;",
				"\t",
				"\tif ( !bonesNeedUpdate ) {",
				"\t\treturn;",
				"\t}",
				"",
				"\tbonesNeedUpdate = false;",
				"",
				"\tif ( splines.mesh.visible ) {",
				"",
				"\t\tposition = geometry.attributes.position;",
				"\t\t",
				"\t\tfor ( i = 0; i < tubularSegments; i++ ) {",
				"\t\t\tt = i / ( tubularSegments - 1 );",
				"\t\t\tsplines.positions.getPoint( t, vector );",
				"\t\t\tposition.setXYZ( i, vector.x, vector.y, vector.z );",
				"\t\t}",
				"",
				"\t\tposition.needsUpdate = true;",
				"",
				"\t}",
				"\t",
				"\tfor ( i = 0; i < root.children.length; i++ ) {",
				"",
				"\t\tbone = root.children[ i ];",
				"\t\tt = bone.userData.theta / TWO_PI;",
				"",
				"\t\t// TODO: Is there a way to speed up or cache",
				"\t\t// calculation? Maybe offload to a Data texture?",
				"\t\tsplines.positions.getPoint( t, bone.position );",
				"\t\tsplines.positions.getPoint( t + 0.001, vector );",
				"",
				"\t\t// Calculate Angle Offset to keep Bone",
				"\t\t// \"up\" vector bent for a smooth curve",
				"\t\tvar hypotenuse = vector.distanceTo( bone.position );",
				"\t\tvar opposite = vector.y - bone.position.y;",
				"\t\tbone.rotation.z = Math.asin( opposite / hypotenuse );",
				"",
				"\t\t// Calculate the ring's twist, aka the Bone rotation",
				"\t\tsplines.rotations.getPoint( t, vector );",
				"\t\tbone.rotation.x = normalToRadians( vector.y );",
				"",
				"\t\t// Calculate the scale of the Bone",
				"\t\tsplines.scales.getPoint( t, vector );",
				"\t\tbone.scale.x = vector.y;",
				"\t\tbone.scale.y = vector.y;",
				"\t\tbone.scale.z = vector.y;",
				"",
				"\t}",
				"\t\t",
				"\treturn torus;",
				"",
				"}",
				"",
				"/**",
				" * @param y - in world space, 0 is default. Can be negative",
				" */",
				"function setPositionY ( index, y ) {",
				"\tvar points = splines.positions.points;",
				"\tpoints[ index % points.length ].y = y;",
				"\tbonesNeedUpdate = true;",
				"\treturn torus.userData;",
				"}",
				"",
				"/**",
				" * @param rotation - 0 to 1",
				" */",
				"function setTwist ( index, rotation ) {",
				"\tvar points = splines.rotations.points;",
				"\tpoints[ index % points.length ].y = rotation;",
				"\tbonesNeedUpdate = true;",
				"\treturn torus.userData;",
				"}",
				"",
				"/**",
				" * @param scale - 0 to 1",
				" */",
				"function setScale ( index, scale ) {",
				"\tvar points = splines.scales.points;",
				"\tpoints[ index % points.length ].y = scale;",
				"\tbonesNeedUpdate = true;",
				"\treturn torus.userData;",
				"};",
				"",
				"/**",
				" * Used in conjunction with `splines.rotations`",
				" * in order to transform the smooth change of 0 to 1",
				" * into radians with a maximum twist range, `radius`.",
				" */",
				"function normalToRadians ( v ) {",
				"\tvar radius = 0.66;",
				"\treturn Math.PI * v * radius;",
				"}",
				"",
				"resources.set( 'ring', torus );"
			]
		],
		[
			"Button",
			[
				"Interaction.DefaultColor = 0x002814;",
				"",
				"var geometries = {",
				"\tcircle: new THREE.SphereBufferGeometry( 0.005, 32, 32 ),",
				"\tsquare: new THREE.BoxBufferGeometry( 0.01, 0.01, 0.01 ),",
				"\tcone: new THREE.CylinderBufferGeometry( 0, 0.33, 1, 16 )",
				"};",
				"",
				"var materials = {",
				"\tinner: new THREE.MeshBasicMaterial( {",
				"\t\tcolor: Interaction.DefaultColor,",
				"\t\ttransparent: true,",
				"\t\tblending: THREE.AdditiveBlending",
				"\t} ),",
				"\touter: new THREE.MeshBasicMaterial( {",
				"\t\tcolor: 0x333333,",
				"\t\tside: THREE.BackSide,",
				"\t\ttransparent: true,",
				"\t\tblending: THREE.AdditiveBlending",
				"\t} )",
				"};",
				"",
				"geometries.cone.rotateX( Math.PI / 2 );",
				"",
				"function animateIn() {",
				"\tthis.userData.outline.userData.animateIn();",
				"}",
				"",
				"function animateOut() {",
				"\tthis.userData.outline.userData.animateOut();",
				"}",
				"",
				"resources.set( 'Button', {",
				"",
				"\tcreate: function( size, type ) {",
				"",
				"\t\tvar geometry;",
				"\t\t",
				"\t\tif ( !type ) {",
				"\t\t\ttype = 'circle';",
				"\t\t}",
				"",
				"\t\tgeometry = geometries[ type ].clone();",
				"\t\tgeometry.scale( size, size, size );",
				"",
				"\t\tvar button = new THREE.Mesh( geometry, materials.inner );",
				"\t\tvar outline = new THREE.Mesh( button.geometry, materials.outer );",
				"",
				"\t\tbutton.renderOrder = 49;",
				"\t\toutline.renderOrder = 50;",
				"",
				"\t\toutline.userData.tween = new TWEEN.Tween( outline.scale );",
				"\t\toutline.userData.tween.easing( TWEEN.Easing.Circular.InOut );",
				"\t\toutline.userData.scales = {",
				"\t\t\tstart: 1.1,",
				"\t\t\tend: 1.33",
				"\t\t};",
				"",
				"\t\toutline.userData.animateIn = function() {",
				"\t\t\tvar scale = outline.userData.scales.end;",
				"\t\t\toutline.userData.tween.to( {",
				"\t\t\t\t\tx: scale, y: scale, z: scale",
				"\t\t\t\t}, 350 )",
				"\t\t\t\t.start();",
				"\t\t\treturn outline.userData.tween;",
				"\t\t};",
				"",
				"\t\toutline.userData.animateOut = function() {",
				"\t\t\tvar scale = outline.userData.scales.start;",
				"\t\t\toutline.userData.tween.to( {",
				"\t\t\t\t\tx: scale, y: scale, z: scale",
				"\t\t\t\t}, 350 )",
				"\t\t\t\t.start();",
				"\t\t\treturn outline.userData.tween;",
				"\t\t};",
				"",
				"\t\toutline.userData.animateOut();",
				"",
				"\t\tbutton.userData.outline = outline;",
				"\t\tbutton.add( outline );",
				"",
				"\t\tbutton.addEventListener( 'over', animateIn );",
				"\t\tbutton.addEventListener( 'out', animateOut );",
				"",
				"\t\treturn button;",
				"",
				"\t}",
				"",
				"} );"
			]
		],
		[
			"Playhead & Timeline",
			[
				"var ring = resources.get( 'ring' );",
				"var scene = resources.get( 'scene' );",
				"var interaction = resources.get( 'interaction' );",
				"var manager = resources.get( 'audio-manager' );",
				"var Button = resources.get( 'Button' );",
				"var TWO_PI = Math.PI * 2;",
				"var HALF_PI = Math.PI / 2;",
				"var beats = manager.beats;",
				"var beatOffset = Math.floor( beats / manager.analysers.list.length );",
				"var identity = function() {};",
				"",
				"var loader = new THREE.TextureLoader();",
				"var timeline = new THREE.Group();",
				"",
				"var size = 15;",
				"var playhead = Button.create( size );",
				"var outline = playhead.userData.outline;",
				"",
				"var lastBeat = - 1;",
				"",
				"playhead.userData.ripple = createRipple( size * 0.05 );",
				"",
				"playhead.add( playhead.userData.ripple );",
				"",
				"var radius = ring.userData.radius - ring.userData.thickness * 0.95;",
				"",
				"var geometry = new THREE.BufferGeometry();",
				"var vertices = [];",
				"",
				"for ( var i = 0; i < beats; i++ ) {",
				"",
				"\tvar theta = TWO_PI * ( i / beats );",
				"\tvar x = radius * Math.cos( theta );",
				"\tvar y = 0;",
				"\tvar z = radius * Math.sin( theta );",
				"\tvar paddles = Math.floor( i / 16 );",
				"",
				"\t// Skip every 16th line because",
				"\t// that line is drawn in \"paddles\"",
				"\tif ( paddles >= 8 || i % 16 ) {",
				"\t\tvar offset = 0.5;",
				"\t\tif ( !( i % 4 ) ) {",
				"\t\t\toffset = 1;",
				"\t\t}",
				"\t\tvertices.push( x, y - offset, z );",
				"\t\tvertices.push( x, y + offset, z );",
				"\t}",
				"",
				"}",
				"",
				"var positionAttribute = new THREE.Float32BufferAttribute( vertices, 3 );",
				"geometry.addAttribute( 'position', positionAttribute );",
				"",
				"var ruler = new THREE.LineSegments(",
				"\tgeometry,",
				"\tnew THREE.LineBasicMaterial( {",
				"\t\tcolor: 0x000000,",
				"\t\tlinewidth: 1",
				"\t} )",
				");",
				"",
				"ruler.scale.y = 0.04;",
				"",
				"var cylinder = new THREE.Mesh(",
				"\tnew THREE.CylinderBufferGeometry( 0.5, 0.5, 1, 64, 1, true ),",
				"\tnew THREE.MeshBasicMaterial( {",
				"\t\tcolor: 0xffffff,",
				"\t\ttransparent: true,",
				"\t\tside: THREE.BackSide,",
				"\t\tmap: loader.load( '../assets/textures/baseline.gif' ),",
				"\t\topacity: 0,",
				"\t\tdepthWrite: false",
				"\t} )",
				");",
				"cylinder.renderOrder = 100;",
				"cylinder.material.map.generateMipMaps = false;",
				"cylinder.material.map.minFilter = THREE.LinearFilter;",
				"cylinder.material.map.magFilter = THREE.LinearFilter;",
				"cylinder.material.map.wrapS = THREE.RepeatWrapping;",
				"cylinder.material.map.wrapT = THREE.RepeatWrapping;",
				"cylinder.material.map.repeat.set( 1, 5 );",
				"",
				"var textureOffsetMargin = 0.8;",
				"",
				"cylinder.userData.y = 0;",
				"cylinder.userData.tween = new TWEEN.Tween( cylinder.material );",
				"cylinder.userData.tween.easing( TWEEN.Easing.Sinusoidal.InOut );",
				"",
				"cylinder.userData.animateIn = function( complete ) {",
				"\tcylinder.userData.tween",
				"\t\t.onComplete( complete || identity )",
				"\t\t.to( {",
				"\t\t\topacity: 1",
				"\t\t}, 150 )",
				"\t\t.start();",
				"\treturn cylinder.userData.tween;",
				"};",
				"cylinder.userData.animateOut = function( complete ) {",
				"\tcylinder.userData.tween",
				"\t\t.onComplete( complete || identity )",
				"\t\t.to( {",
				"\t\t\topacity: 0",
				"\t\t}, 350 )",
				"\t\t.start();",
				"\treturn cylinder.userData.tween;",
				"};",
				"",
				"cylinder.visible = false;",
				"",
				"playhead.userData.update = function( progress ) {",
				"",
				"\tvar theta = null;",
				"\tvar radius = ring.userData.radius - ring.userData.thickness;",
				"\tvar ripple = playhead.userData.ripple;",
				"",
				"\tif ( cylinder.userData.controller ) {",
				"",
				"\t\t// Override tweens while dragging",
				"\t\tif ( outline.scale.x !== outline.userData.scales.end ) {",
				"\t\t\toutline.scale.x = outline.userData.scales.end;",
				"\t\t\toutline.scale.y = outline.userData.scales.end;",
				"\t\t\toutline.scale.z = outline.userData.scales.end;",
				"\t\t}",
				"\t\t",
				"\t\tripple.visible = false;",
				"",
				"\t\tvar id = cylinder.userData.controller.uuid;",
				"\t\tvar intersection = interaction.intersections[ id ];",
				"",
				"\t\tif ( intersection && intersection.object.uuid === cylinder.uuid ) {",
				"",
				"\t\t\t// Assumes camera is at 0, 0, 0",
				"\t\t\tvar point = intersection.point;",
				"\t\t\tvar line = Math.round( 4 * point.y / cylinder.scale.y );",
				"",
				"\t\t\ttheta = Math.atan2( point.z, point.x ) - HALF_PI;",
				"\t\t\ttheta += timeline.rotation.y;",
				"",
				"\t\t\tplayhead.dispatchEvent( {",
				"\t\t\t\ttype: 'drag',",
				"\t\t\t\ttheta: theta,",
				"\t\t\t\tprogress: mod( ( ( theta - Math.PI * 1.5 ) ), TWO_PI ) / TWO_PI,",
				"\t\t\t\tline: line",
				"\t\t\t} );",
				"",
				"\t\t}",
				"",
				"\t} else {",
				"",
				"\t\ttheta = progress * TWO_PI + Math.PI * 1.5;",
				"",
				"\t\tripple.material.uniforms.time.value = manager.duration * progress;",
				"\t\tripple.rotation.y = - theta;",
				"\t\tripple.visible = true;",
				"",
				"\t\tvar beatLength = manager.unitDuration / 4;",
				"\t\tvar currentBeat = Math.floor( manager.currentTime / beatLength );",
				"\t\t",
				"\t\tif ( currentBeat !== lastBeat ) {",
				"\t\t",
				"\t\t\tinteraction.vibrate( 0.2, 100 );",
				"\t\t\tlastBeat = currentBeat;",
				"\t\t\t",
				"\t\t}",
				"",
				"\t}",
				"",
				"\tif ( theta !== null ) {",
				"",
				"\t\t// Snap to seconds",
				"\t\ttheta = snap( theta ) + HALF_PI;",
				"\t\tvar x = radius * Math.cos( theta );",
				"\t\tvar z = radius * Math.sin( theta );",
				"",
				"\t\t// Ease into position",
				"\t\tplayhead.position.x += ( x - playhead.position.x ) * 0.33;",
				"\t\tplayhead.position.z += ( z - playhead.position.z ) * 0.33;",
				"",
				"\t}",
				"",
				"\treturn playhead;",
				"",
				"};",
				"",
				"timeline.add( ruler );",
				"timeline.add( playhead );",
				"scene.add( timeline );",
				"scene.add( cylinder );",
				"",
				"//",
				"",
				"interaction.listen( playhead );",
				"interaction.listen( cylinder );",
				"",
				"playhead.addEventListener( 'primary-down', pointerdown );",
				"",
				"function pointerdown( e ) {",
				"",
				"\tvar radius = ring.userData.radius - ring.userData.thickness;",
				"",
				"\tcylinder.scale.x = radius * 2;",
				"\tcylinder.scale.z = radius * 2;",
				"",
				"\tcylinder.visible = true;",
				"\tcylinder.userData.controller = e.controller;",
				"\tcylinder.userData.animateIn();",
				"",
				"\tinteraction.ignore( playhead );",
				"\tinteraction.addEventListener( 'primary-up', pointerup );",
				"\tplayhead.dispatchEvent( { type: 'focus' } );",
				"",
				"}",
				"",
				"function pointerup( e ) {",
				"",
				"\toutline.userData.animateOut();",
				"\tcylinder.userData.animateOut( hideCylinder );",
				"\tdelete cylinder.userData.controller;",
				"",
				"\tinteraction.listen( playhead );",
				"\tinteraction.removeEventListener( 'primary-up', pointerup );",
				"\tplayhead.dispatchEvent( { type: 'blur' } );",
				"",
				"}",
				"",
				"function hideCylinder() {",
				"\tcylinder.visible = false;",
				"}",
				"",
				"function mod( v, l ) {",
				"\twhile ( v < 0 ) {",
				"\t\tv += l;",
				"\t}",
				"\treturn v % l;",
				"}",
				"",
				"function snap( v ) {",
				"\tvar r = Math.round( beats * v / TWO_PI );",
				"\treturn TWO_PI * ( r / beats );",
				"}",
				"",
				"function createRipple( size ) {",
				"",
				"\tvar geometry = new THREE.PlaneBufferGeometry( size, size );",
				"\tvar material = new THREE.ShaderMaterial( {",
				"",
				"\t\tuniforms: {",
				"\t\t\ttime: { type: 'f', value: 0 },",
				"\t\t\tstartRadius: { type: 'f', value: 0.0 },",
				"\t\t\tendRadius: { type: 'f', value: 0.5 },",
				"\t\t\tlinewidth: { type: 'f', value: 0.1 },",
				"\t\t\tduration: { type: 'f', value: manager.unitDuration / 4 },",
				"\t\t\tcolor: { type: 'c', value: new THREE.Color( 1.0, 1.0, 1.0 ) }",
				"\t\t},",
				"",
				"\t\tvertexShader: [",
				"",
				"\t\t\t\"varying vec2 vUv;\",",
				"",
				"\t\t\t\"void main() {\",",
				"",
				"\t\t\t\t\"vUv = uv;\",",
				"\t\t\t\t\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",",
				"",
				"\t\t\t\"}\"",
				"",
				"\t\t].join( '\\n' ),",
				"",
				"\t\tfragmentShader: [",
				"",
				"\t\t\t\"uniform float time;\",",
				"\t\t\t\"uniform float startRadius;\",",
				"\t\t\t\"uniform float endRadius;\",",
				"\t\t\t\"uniform float linewidth;\",",
				"\t\t\t\"uniform float duration;\",",
				"\t\t\t'uniform vec3 color;',",
				"",
				"\t\t\t\"varying vec2 vUv;\",",
				"",
				"\t\t\t\"void main() {\",",
				"",
				"\t\t\t  \"float nTime = mod( time, duration ) / duration;\",",
				"\t\t\t  \"nTime = pow( nTime, 0.25 );\",",
				"",
				"\t\t\t  \"vec2 center = vec2( 0.5 );\",",
				"",
				"\t\t\t  \"float radius = mix( startRadius, endRadius, nTime );\",",
				"",
				"\t\t\t  \"float fill = length( center - vUv ) - radius;\",",
				"\t\t\t  \"float hull = fill - ( linewidth * ( 1.0 - nTime ) );\",",
				"\t\t\t  \"float t = 1.0 - step( 0.0, fill * hull );\",",
				"",
				"\t\t\t  \"gl_FragColor = vec4( color.rgb, t );\",",
				"",
				"\t\t\t\"}\"",
				"",
				"\t\t].join( '\\n' ),",
				"",
				"\t\ttransparent: true,",
				"\t\tdepthWrite: false,",
				"\t\tside: THREE.BackSide",
				"",
				"\t} );",
				"",
				"\tvar plane = new THREE.Mesh( geometry, material );",
				"",
				"\treturn plane;",
				"",
				"}",
				"",
				"resources.set( 'timeline', timeline );",
				"resources.set( 'playhead', playhead );"
			]
		],
		[
			"Paddles",
			[
				"var HALF_PI = Math.PI / 2;",
				"var TWO_PI = Math.PI * 2;",
				"",
				"var params = resources.get( 'params' );",
				"var Text = resources.get( 'alternate-gothic-3d' );",
				"var manager = resources.get( 'audio-manager' );",
				"var scene = resources.get( 'scene' );",
				"var interaction = resources.get( 'interaction' );",
				"var ring = resources.get( 'ring' );",
				"var Button = resources.get( 'Button' );",
				"",
				"var beats = manager.beats;",
				"var beatOffset = Math.floor( beats / manager.analysers.list.length );",
				"var range = 1;",
				"var halfRange = range / 2;",
				"var snaps = 2;  // Makes 5 total snappable index positions",
				"",
				"var paddles = new THREE.Group();",
				"var activePaddles = [];",
				"",
				"paddles.userData.list = [];",
				"scene.add( paddles );",
				"",
				"var radius = ring.userData.radius - ring.userData.thickness * 0.95;",
				"",
				"var filters = manager.filters.list;",
				"var analysers = manager.analysers;",
				"",
				"var geometry = new THREE.BufferGeometry();",
				"var vertices = [];",
				"",
				"var plane = new THREE.Mesh(",
				"\tnew THREE.PlaneBufferGeometry( 1000, 1000 ),",
				"\tnew THREE.MeshBasicMaterial( {",
				"\t\tcolor: 0x000000,",
				"\t\ttransparent: true,",
				"\t\topacity: 0,",
				"\t\twireframe: true",
				"\t} )",
				");",
				"",
				"plane.renderOrder = 100;",
				"plane.visible = false;",
				"",
				"for ( var i = 0; i < filters.length; i++ ) {",
				"",
				"\tvar filter = filters[ i ];",
				"",
				"\tvar paddle = Button.create( 6, 'square' );",
				"\tvar theta = TWO_PI * ( i * beatOffset ) / beats;",
				"",
				"\tvar ct = Math.cos( theta );",
				"\tvar st = Math.sin( theta );",
				"",
				"\tpaddle.userData.name = filter.name;",
				"\tpaddle.userData.isPaddle = true;",
				"\tpaddle.userData.theta = theta;",
				"",
				"\tpaddle.position.x = radius * ct;",
				"\tpaddle.position.z = radius * st;",
				"",
				"\tpaddle.userData.position = new THREE.Vector3()",
				"\t\t.copy( paddle.position );",
				"",
				"\tpaddle.userData.twist = {",
				"\t\tvalue: 0,",
				"\t\ttarget: 0",
				"\t};",
				"",
				"\t// Offset line position so no z-fighting",
				"\tvar x = ( radius + 0.02 ) * ct;",
				"\tvar y = 0;",
				"\tvar z = ( radius + 0.02 ) * st;",
				"",
				"\tvertices.push( x, y - halfRange, z );",
				"\tvertices.push( x, y + halfRange, z );",
				"",
				"\tct = Math.cos( theta + HALF_PI ) * 0.01;",
				"\tst = Math.sin( theta + HALF_PI ) * 0.01;",
				"",
				"\tvertices.push( x - ct, y + halfRange, z - st );",
				"\tvertices.push( x + ct, y + halfRange, z + st );",
				"",
				"\tvertices.push( x - ct, y - halfRange, z - st );",
				"\tvertices.push( x + ct, y - halfRange, z + st );",
				"",
				"\tpaddle.userData.name = filter.name;",
				"\tpaddle.userData.index = i;",
				"\tpaddle.userData.plane = plane.clone();",
				"\tpaddle.userData.plane.position.copy( paddle.position );",
				"\tpaddle.userData.plane.lookAt( paddles.position );",
				"",
				"\tpaddle.lookAt( paddles.position );",
				"",
				"\tpaddles.add( paddle );",
				"\tpaddles.add( paddle.userData.plane );",
				"\tpaddles.userData.list.push( paddle );",
				"",
				"\tinteraction.listen( paddle );",
				"\tinteraction.listen( paddle.userData.plane );",
				"\tpaddle.addEventListener( 'primary-down', onPrimaryDown );",
				"",
				"}",
				"",
				"var positionAttribute = new THREE.Float32BufferAttribute( vertices, 3 );",
				"geometry.addAttribute( 'position', positionAttribute );",
				"",
				"var lines = new THREE.LineSegments(",
				"\tgeometry,",
				"\tnew THREE.LineBasicMaterial( {",
				"\t\tcolor: 0x000000,",
				"\t\tlinewidth: 1",
				"\t} )",
				");",
				"",
				"paddles.add( lines );",
				"",
				"Text.ready( addLabels );",
				"",
				"function addLabels() {",
				"",
				"\tvar i = 0;",
				"\tvar options = {",
				"\t\tresolution: 2,",
				"\t\tstroke: 'transparent',",
				"\t\tfill: 'black'",
				"\t};",
				"\t",
				"\tfunction update() {",
				"",
				"\t\tif ( i >= filters.length ) {",
				"\t\t\treturn;",
				"\t\t}",
				"",
				"\t\tvar filter = filters[ i ];",
				"\t\tvar paddle = paddles.userData.list[ i ];",
				"\t\tvar theta = paddle.userData.theta;",
				"\t\tvar index = '0' + ( i + 1 ) + '. ';",
				"",
				"\t\tvar label = Text.create( index + filter.name.toUpperCase(), options );",
				"\t\tvar scale = 0.5 * range / label.userData.scale;",
				"",
				"\t\tpaddle.userData.label = label;",
				"",
				"\t\tlabel.position.x = paddle.position.x;",
				"\t\tlabel.position.y = - 0.6;",
				"\t\tlabel.position.z = paddle.position.z;",
				"",
				"\t\tlabel.rotation.order = 'YXZ';",
				"\t\tlabel.rotation.y = - theta;",
				"\t\tlabel.rotation.z = HALF_PI;",
				"",
				"\t\tlabel.scale.x = scale;",
				"\t\tlabel.scale.y = scale;",
				"\t\tlabel.scale.z = scale;",
				"",
				"\t\tpaddles.add( label );",
				"",
				"\t\ti ++;",
				"\t\trequestAnimationFrame( update );",
				"",
				"\t}",
				"\t",
				"\tupdate();",
				"",
				"}",
				"",
				"function onPrimaryDown( e ) {",
				"",
				"\tvar current = this;",
				"\tvar controller = e.controller;",
				"",
				"\tif ( isActive( current ) ) {",
				"\t\treturn;",
				"\t}",
				"",
				"\tactivePaddles.push( current );",
				"",
				"\tcurrent.userData.controller = controller;",
				"",
				"\tvar plane = current.userData.plane;",
				"\tplane.visible = true;",
				"",
				"\tinteraction.ignore( current );",
				"\tcurrent.dispatchEvent( {",
				"\t\ttype: 'focus',",
				"\t\tcontroller: controller",
				"\t} );",
				"",
				"\tif ( activePaddles.length <= 1 ) {",
				"\t\t// This means we're already listening",
				"\t\tinteraction.addEventListener( 'primary-up', onPrimaryUp );",
				"\t}",
				"",
				"}",
				"",
				"function onPrimaryUp( e ) {",
				"",
				"\tvar controller = e.controller;",
				"\tvar paddles = activePaddles.slice( 0 );",
				"",
				"\tfor ( var i = 0; i < paddles.length; i++ ) {",
				"",
				"\t\tvar current = paddles[ i ];",
				"\t\tvar plane = current.userData.plane;",
				"",
				"\t\tif ( current.userData.controller.uuid !== controller.uuid ) {",
				"\t\t\tcontinue;",
				"\t\t}",
				"",
				"\t\tplane.visible = false;",
				"\t\tinteraction.listen( current );",
				"\t\tcurrent.userData.outline.userData.animateOut();",
				"\t\tdelete current.userData.controller;",
				"",
				"\t\tvar index = indexOfActivePaddles( current );",
				"\t\tif ( index >= 0 ) {",
				"\t\t\tactivePaddles.splice( index, 1 );",
				"\t\t}",
				"\t\tcurrent.dispatchEvent( {",
				"\t\t\ttype: 'blur',",
				"\t\t\tcontroller: controller",
				"\t\t} );",
				"",
				"\t}",
				"",
				"\tif ( activePaddles.length <= 0 ) {",
				"\t\t// Only stop listening to 'primary-up' if",
				"\t\t// this is the last active paddle.",
				"\t\tinteraction.removeEventListener( 'primary-up', onPrimaryUp );",
				"\t}",
				"",
				"}",
				"",
				"function isActive( paddle ) {",
				"\tfor ( var i = 0; i < activePaddles.length; i++ ) {",
				"\t\tvar active = activePaddles[ i ];",
				"\t\tif ( active.uuid === paddle.uuid ) {",
				"\t\t\treturn true;",
				"\t\t}",
				"\t}",
				"\treturn false;",
				"}",
				"",
				"function indexOfActivePaddles( paddle ) {",
				"\tfor ( var i = 0; i < activePaddles.length; i++ ) {",
				"\t\tvar active = activePaddles[ i ];",
				"\t\tif ( active.uuid === paddle.uuid ) {",
				"\t\t\treturn i;",
				"\t\t}",
				"\t}",
				"\treturn - 1;",
				"}",
				"",
				"paddles.userData.update = function( progress ) {",
				"",
				"\tif ( activePaddles.length > 0 ) {",
				"",
				"\t\tfor ( var j = 0; j < activePaddles.length; j++ ) {",
				"",
				"\t\t\tvar current = activePaddles[ j ];",
				"\t\t\tvar outline = current.userData.outline;",
				"\t\t\tvar plane = current.userData.plane;",
				"\t\t\tvar controller = current.userData.controller;",
				"",
				"\t\t\t// Override tweens while dragging",
				"\t\t\tif ( outline.scale.x !== outline.userData.scales.end ) {",
				"\t\t\t\toutline.scale.x = outline.userData.scales.end;",
				"\t\t\t\toutline.scale.y = outline.userData.scales.end;",
				"\t\t\t\toutline.scale.z = outline.userData.scales.end;",
				"\t\t\t}",
				"",
				"\t\t\tvar intersection = interaction.intersections[ controller.uuid ];",
				"",
				"\t\t\tif ( intersection && intersection.object.uuid === plane.uuid ) {",
				"",
				"\t\t\t\t// Assumes camera is at 0, 0, 0 ~ish",
				"\t\t\t\tvar point = intersection.point;",
				"\t\t\t\tvar y = Math.max( Math.min( point.y, halfRange ), - halfRange );",
				"",
				"\t\t\t\tif ( current.position.y !== y ) {",
				"\t\t\t\t\tvar t = y / halfRange;",
				"\t\t\t\t\tupdate( t, current );",
				"\t\t\t\t}",
				"",
				"\t\t\t}",
				"",
				"\t\t}",
				"",
				"\t}",
				"",
				"\tfor ( var i = 0; i < paddles.children.length; i++ ) {",
				"",
				"\t\tvar paddle = paddles.children[ i ];",
				"\t\tvar name = paddle.userData.name;",
				"\t\tvar analyser = analysers[ name ];",
				"\t\tvar twist = paddle.userData.twist;",
				"\t\tvar index = paddle.userData.index;",
				"",
				"\t\tif ( !paddle.userData.isPaddle ) {",
				"\t\t\tcontinue;",
				"\t\t}",
				"",
				"\t\tif ( activePaddles.length <= 0 && analyser ) {",
				"\t\t\tvar data = analyser.data[ 3 ];",
				"\t\t\tvar value = data / 255 + 1;",
				"\t\t\tpaddle.scale.x = value;",
				"\t\t\tpaddle.scale.y = value;",
				"\t\t}",
				"",
				"\t\tif ( paddle.position.y !== paddle.userData.position.y ) {",
				"\t\t\tpaddle.position.y += ( paddle.userData.position.y - paddle.position.y ) * params.drag;",
				"\t\t}",
				"",
				"\t\tif ( twist.target !== twist.value ) {",
				"\t\t\ttwist.value += ( twist.target - twist.value ) * params.drag;",
				"\t\t\tring.userData.setTwist( index, twist.value );",
				"\t\t}",
				"",
				"\t}",
				"",
				"\treturn paddles;",
				"",
				"};",
				"",
				"function update( t, paddle ) {",
				"",
				"\tt *= snaps;",
				"\tt = Math.round( t ) / snaps;",
				"",
				"\tvar name = paddle.userData.name;",
				"\tvar index = paddle.userData.index;",
				"\tvar filter = manager.filters[ name ];",
				"",
				"\tpaddle.userData.position.y = t * range * 0.5;",
				"\tfilter.setTransform( t * snaps );",
				"",
				"\tvar sign = t > 0 ? - 1 : 1;",
				"\tvar magnitude = Math.abs( t );",
				"",
				"\tt = sign * Math.pow( magnitude, 0.5 );",
				"\tpaddle.userData.twist.target = Math.PI * 0.33 * t;",
				"",
				"}",
				"",
				"function mod( v, l ) {",
				"\twhile ( v < 0 ) {",
				"\t\tv += l;",
				"\t}",
				"\treturn v % l;",
				"}",
				"",
				"resources.set( 'paddles', paddles );",
				""
			]
		],
		[
			"Lights",
			[
				"var scene = resources.get( 'scene' );",
				"var paddles = resources.get( 'paddles' );",
				"var params = resources.get( 'params' );",
				"",
				"var group = new THREE.Group();",
				"var vector = new THREE.Vector3();",
				"var worldPosition = new THREE.Vector3();",
				"",
				"var ambient = new THREE.HemisphereLight( 0xFEFCFF, 0xB0ADAA, 0.9 );",
				"",
				"ambient.userData.tween = new TWEEN.Tween( ambient );",
				"ambient.userData.tween.easing( TWEEN.Easing.Circular.Out );",
				"ambient.userData.intensity = ambient.intensity;",
				"",
				"scene.add( ambient );",
				"group.userData.ambient = ambient;",
				"",
				"var amount = 2;",
				"var size = 10;",
				"",
				"function setup () {",
				"",
				"\tvar direction = new THREE.Vector3( 0, 0, 1 );",
				"\tvar origin = new THREE.Vector3();",
				"\tvar length = 10;",
				"\tvar color = 'red';",
				"",
				"\tfor ( var i = 0; i < amount; i++ ) {",
				"",
				"\t\tvar pct = i / ( amount - 1 );",
				"\t\tvar light = new THREE.SpotLight( 0xffffff );",
				"",
				"\t\tlight.castShadow = true;",
				"",
				"\t\t// `SpotLight` Properties",
				"\t\tlight.distance = 10;",
				"\t\tlight.angle = Math.PI * 0.12;",
				"\t\tlight.penumbra = 1;",
				"\t\tlight.decay = 1;",
				"\t",
				"\t\tlight.shadow.mapSize.width = 256;",
				"\t\tlight.shadow.mapSize.height = 256;",
				"\t\tlight.shadow.camera.near = 0.05;",
				"\t\tlight.shadow.camera.far = 10;",
				"",
				"\t\tlight.target.userData.reference = group;",
				"",
				"\t\tlight.position.y = size * 0.4;",
				"\t\tlight.position.z = size * pct - size / 2;",
				"",
				"\t\tlight.userData.helper = new THREE.SpotLightHelper( light, color );",
				"",
				"\t\tgroup.add( light );",
				"\t\t// scene.add( light.userData.helper );",
				"\t\tscene.add( light.target );",
				"",
				"\t}",
				"",
				"\tgroup.userData.update = update;",
				"\tscene.add( group );",
				"",
				"}",
				"",
				"function update () {",
				"",
				"\tfor ( var i = 0; i < group.children.length; i++ ) {",
				"",
				"\t\tvar light = group.children[ i ];",
				"",
				"\t\tif ( light.target.userData.reference ) {",
				"",
				"\t\t\tlight.target.userData.reference.getWorldPosition( worldPosition );",
				"\t\t\tvector.copy( worldPosition );",
				"\t\t\tvector.sub( light.target.position );",
				"\t\t\tvector.multiplyScalar( params.drag );",
				"",
				"\t\t\tlight.target.position.add( vector );",
				"",
				"\t\t}",
				"",
				"\t\tif ( light.userData.helper ) {",
				"\t\t\tlight.userData.helper.update();",
				"\t\t}",
				"",
				"\t}",
				"",
				"\treturn group;",
				"",
				"}",
				"",
				"setup();",
				"resources.set( 'lights', group );"
			]
		],
		[
			"Debris",
			[
				"var params = resources.get( 'params' );",
				"var scene = resources.get( 'scene' );",
				"var camera = resources.get( 'camera' );",
				"var amount = 10000;",
				"",
				"var geometry = new THREE.BufferGeometry();",
				"var positions = [];",
				"var sizes = [];",
				"var lifeTimes = [];",
				"var rotations = [];",
				"",
				"var vertexShader = [",
				"",
				"\t'uniform float amplitude;',",
				"\t'uniform float time;',",
				"\t'uniform vec3 wind;',",
				"\t'uniform float turbulence;',",
				"\t'uniform float radius;',",
				"",
				"\t'attribute float size;',",
				"\t'attribute float life;',",
				"\t'attribute vec3 axisRotation;',",
				"",
				"\t'varying float lived;',",
				"\t'varying vec3 particle;',",
				"\t'varying vec3 up;',",
				"\t'varying float range;',",
				"",
				"\t'float noise( float p ) {',",
				"\t  'return sin( p );',",
				"\t'}',",
				"",
				"\t'void main() {',",
				"",
				"\t  'float variation = pow( size, 0.33 );',",
				"\t  'float lifetime = life * 1000.0;',",
				"",
				"\t  'lived = mod( time, lifetime ) / lifetime;',",
				"",
				"\t  'vec3 destination = position + variation * wind * lived;',",
				"\t  'vec3 field = vec3(',",
				"\t\t'( wind.y + wind.z ) * noise( destination.y + destination.z ),',",
				"\t\t'( wind.x + wind.z ) * noise( destination.x + destination.z ),',",
				"\t\t'( wind.x + wind.y ) * noise( destination.x + destination.y )',",
				"\t  ');',",
				"\t  'field *= turbulence;',",
				"",
				"\t  'vec3 pos = mix( destination, destination + field, lived );',",
				"      'vec4 mvPosition = modelViewMatrix * vec4( pos, 1.0 );',",
				"",
				"\t  'particle = pos;',",
				"\t  'up = axisRotation;',",
				"\t  'range = smoothstep( radius * 0.85, radius, length( pos ) );',",
				"",
				"\t  'gl_PointSize = amplitude * size * 12.0;',",
				"\t  'gl_Position = projectionMatrix * mvPosition;',",
				"",
				"\t'}'",
				"",
				"].join( '\\n' );",
				"",
				"var fragmentShader = [",
				"",
				"\t'const float PI = 3.141592653589793;',",
				"",
				"\t'uniform float time;',",
				"\t'uniform vec3 specular;',",
				"\t'uniform vec3 camera;',",
				"",
				"\t'varying float lived;',",
				"\t'varying vec3 particle;',",
				"\t'varying vec3 up;',",
				"\t'varying float range;',",
				"",
				"\t'mat3 setCamera( in vec3 ro, in vec3 ta, float cr ) {',",
				"",
				"\t  'vec3 cw = normalize( ta - ro );',",
				"\t  'vec3 cp = vec3( sin( cr ), cos( cr ), 0.0 );',",
				"\t  'vec3 cu = normalize( cross( cw, cp ) );',",
				"\t  'vec3 cv = normalize( cross( cu, cw ) );',",
				"",
				"\t  'return mat3( cu, cv, cw );',",
				"",
				"\t'}',",
				"",
				"\t'float sdCapsule( in vec3 p, vec3 a, vec3 b, float r ) {',",
				"\t  'vec3 pa = p - a, ba = b - a;',",
				"\t  'float h = clamp( dot( pa, ba )/dot( ba, ba ), 0.0, 1.0 );',",
				"\t  'return length( pa - ba * h ) - r;',",
				"\t'}',",
				"",
				"\t'vec2 map( in vec3 sight ) {',",
				"",
				"\t  '// Of the object',",
				"\t  'vec3 position = vec3( 0.0 );',",
				"\t  '// The vec3 position of the left side of capsule',",
				"\t  'vec3 a = vec3( - 1.25, 0.0, 0.0 );',",
				"\t  '// The vec3 position of the right side of capsule',",
				"\t  'vec3 b = vec3( 1.25, 0.0, 0.0 );',",
				"\t  '// Radius of the capsule',",
				"\t  'float radius = 0.33;',",
				"",
				"\t  '// Define position in relation to the camera',",
				"\t  'position = sight - position;',",
				"\t  'vec3 worldPosition = position;',",
				"",
				"\t  'float sdf = sdCapsule( worldPosition, a, b, radius );',",
				"\t  'vec2 res = vec2( sdf, 0.0 );',",
				"",
				"\t  'return res;',",
				"",
				"\t'}',",
				"",
				"\t'vec2 castRay( in vec3 ro, in vec3 rd ) {',",
				"",
				"\t  '// Near / Far Clipping Plane',",
				"\t  'float tmin = 1.0;',",
				"\t  'float tmax = 50.0;',",
				"",
				"\t  'float t = tmin;',",
				"\t  'float m = - 1.0;',",
				"",
				"\t  '// TODO: Why does it need so many iterations',",
				"\t  '// to march correctly?',",
				"\t  'for( int i = 0; i < 128; i++ ) {',",
				"",
				"\t\t'float precis = 0.0004 * t;',",
				"\t\t'vec2 res = map( ro + rd * t );',",
				"",
				"\t\t'// Means no intersection',",
				"\t\t'// and no possibility of checking again',",
				"\t\t'// so stop the Ray Marching',",
				"\t\t'if ( res.x < precis || t > tmax ) break;',",
				"",
				"\t\t  't += res.x;',",
				"\t\t  'm = res.y; // Identify which shape was intersected via a float',",
				"",
				"\t\t'}',",
				"",
				"\t\t'if( t > tmax ) m =- 1.0;',",
				"\t\t'return vec2( t, m );',",
				"",
				"\t'}',",
				"",
				"\t'// https://www.geeks3d.com/20141201/how-to-rotate-a-vertex-by-a-quaternion-in-glsl/',",
				"\t'vec4 quat_from_axis_angle( vec3 axis, float angle ) {',",
				"\t  'float half_angle = angle * 0.5;',",
				"\t  'float s = sin( half_angle );',",
				"\t  'return vec4( axis.xyz * s, cos( half_angle ) );',",
				"\t'}',",
				"",
				"\t'// https://www.geeks3d.com/20141201/how-to-rotate-a-vertex-by-a-quaternion-in-glsl/',",
				"\t'vec3 rotate( vec3 position, vec3 axis, float angle ) {',",
				"\t  'vec4 q = quat_from_axis_angle( axis, angle );',",
				"\t  'vec3 v = position.xyz;',",
				"\t  'return v + 2.0 * cross( q.xyz, cross( q.xyz, v ) + q.w * v );',",
				"\t'}',",
				"",
				"\t'void main() {',",
				"",
				"\t  'float theta = ( time / 1000.0 ) * length( up );',",
				"\t  'theta = mod( theta, PI * 2.0 );',",
				"",
				"\t  'vec2 uv = 2.0 * vec2( gl_PointCoord ) - 1.0;',",
				"\t  'vec3 ro = normalize( camera - particle );',",
				"",
				"\t  'ro = rotate( ro, up, theta );',",
				"\t  'ro *= 10.0 / length( ro );',",
				"",
				"\t  'vec3 ta = vec3( 0.0, 0.0, 0.0 );',",
				"\t  'mat3 ca = setCamera( ro, ta, 0.0 );',",
				"",
				"\t  'vec3 rd = ca * normalize( vec3( uv.xy, 5.0 ) );',",
				"\t  'vec2 res = castRay( ro, rd );',",
				"",
				"\t  'float t = res.x;',",
				"\t  'float m = res.y;',",
				"\t  'float alpha = step( 0.0, m );',",
				"",
				"\t  'vec3 texel = specular;',",
				"\t  'float easeInOut = sin( lived * PI );',",
				"\t  'float spherical = 1.0 - range;',",
				"",
				"\t  'gl_FragColor = vec4( texel, alpha * easeInOut * spherical );',",
				"",
				"\t'}'",
				"",
				"].join( '\\n' );",
				"",
				"for ( var i = 0; i < amount; i++ ) {",
				"",
				"  positions.push( Math.random() - 0.5 );",
				"  positions.push( Math.random() - 0.5 );",
				"  positions.push( Math.random() - 0.5 );",
				"",
				"  sizes.push( Math.random() );",
				"  lifeTimes.push( Math.random() * 19 + 1 );",
				"",
				"  rotations.push( ( 2 * Math.random() - 1 ) );",
				"  rotations.push( ( 2 * Math.random() - 1 ) );",
				"  rotations.push( ( 2 * Math.random() - 1 ) );",
				"",
				"}",
				"",
				"geometry.addAttribute( 'position', new THREE.Float32BufferAttribute( positions, 3 ) );",
				"geometry.addAttribute( 'size', new THREE.Float32BufferAttribute( sizes, 1 ) );",
				"geometry.addAttribute( 'life', new THREE.Float32BufferAttribute( lifeTimes, 1 ) );",
				"geometry.addAttribute( 'axisRotation', new THREE.Float32BufferAttribute( rotations, 3 ) );",
				"",
				"var material = new THREE.ShaderMaterial({",
				"  uniforms: {",
				"\tamplitude: { type: 'f', value: 1.5 },",
				"\tspecular: { type: 'c', value: new THREE.Color( 1, 1, 1 ) },",
				"\twind: { type: 'v3', value: new THREE.Vector3( 0, 0.02, 0.1 ) },",
				"\ttime: { type: 'f', value: 0 },",
				"\tturbulence: { type: 'f', value: 0.1 },",
				"\tcamera: { type: 'v3', value: camera.position },",
				"\tradius: { type: 'f', value: 0.5 }",
				"  },",
				"  vertexShader: vertexShader,",
				"  fragmentShader: fragmentShader,",
				"  transparent: true,",
				"  depthWrite: false",
				"  // depthTest: false",
				"});",
				"",
				"var debris = new THREE.Points( geometry, material );",
				"debris.scale.setScalar( 7.5 );",
				"debris.renderOrder = 150;",
				"debris.userData.update = update;",
				"debris.userData.amplitude = material.uniforms.amplitude.value;",
				"",
				"scene.add( debris );",
				"",
				"function update( time ) {",
				"",
				"\tvar amplitude = material.uniforms.amplitude;",
				"",
				"\tif ( amplitude.value !== debris.userData.amplitude ) {",
				"\t\tamplitude.value += ( debris.userData.amplitude - amplitude.value ) * params.drag;",
				"\t}",
				"",
				"\tmaterial.uniforms.time.value = time;",
				"",
				"}",
				"",
				"resources.set( 'debris', debris );"
			]
		],
		[
			"Boids",
			[
				"var manager = resources.get( 'audio-manager' );",
				"var scene = resources.get( 'scene' );",
				"var backdrop = resources.get( 'backdrop' );",
				"var ring = resources.get( 'ring' );",
				"",
				"var TWO_PI = Math.PI * 2;",
				"var HALF_PI = Math.PI / 2;",
				"var boxDepth = 3;",
				"var amount = 100;",
				"",
				"var time = 0;",
				"var group = new THREE.Group();",
				"var vector = new THREE.Vector3();",
				"",
				"group.userData.index = 0;",
				"group.userData.next = next;",
				"group.userData.update = update;",
				"group.userData.Tween = new TWEEN.Group();",
				"",
				"scene.add( group );",
				"",
				"var geometry = new THREE.BoxBufferGeometry( 0.05, 0.05, 0.5 );",
				"var material = new THREE.MeshPhysicalMaterial( {",
				"\tcolor: 0xcccccc",
				"} );",
				"",
				"material.emissive = backdrop.material.uniforms.cSource.value;",
				"",
				"setup();",
				"",
				"function setup() {",
				"\twhile ( amount > 0 ) {",
				"\t\tgroup.add( createMesh() );",
				"\t\tamount--;",
				"\t}",
				"}",
				"",
				"function next() {",
				"\tvar index = group.userData.index;",
				"\tgroup.userData.index = ( index + 1 ) % group.children.length;",
				"\treturn group.children[ index ];",
				"}",
				"",
				"function update( progress ) {",
				"",
				"\tvar thickness = ring.userData.thickness;",
				"",
				"\ttime = progress * manager.duration * 1000;",
				"\tgroup.userData.Tween.update( time );",
				"",
				"\tfor ( var i = 0; i < group.children.length; i++ ) {",
				"",
				"\t\tvar mesh = group.children[ i ];",
				"",
				"\t  \tif ( !mesh.visible ) {",
				"\t\t\tcontinue;",
				"\t  \t}",
				"",
				"\t  \tvar elapsed = mesh.userData.elapsed;",
				"\t  \tvar start = mesh.userData.startAngle",
				"\t  \tvar end = mesh.userData.endAngle;",
				"",
				"\t  \tvar t = TWEEN.Easing.Quadratic.InOut( elapsed ) * ( end - start ) + start;",
				"\t  \tvar eased = TWEEN.Easing.Circular.InOut( elapsed );",
				"\t  \tvar scale = 0.999 * Math.sin( eased * Math.PI ) + 0.001;",
				"",
				"\t  \t// ring.userData.splines.rotations.getPoint( t, vector );",
				"\t  \t// var offsetAngle = ring.userData.normalToRadians( vector.y );",
				"",
				"\t  \tring.userData.splines.positions.getPoint( t, mesh.position );",
				"\t  \tring.userData.splines.positions.getPoint( t + 0.001, vector );",
				"",
				"\t  \tvar hypotenuse = vector.distanceTo( mesh.position );",
				"\t  \tvar opposite = mesh.position.y - vector.y;",
				"\t  \tmesh.rotation.x = Math.asin( opposite / hypotenuse );",
				"",
				"\t  \tring.userData.splines.scales.getPoint( t, vector );",
				"\t  \t// mesh.scale.x = scale;",
				"\t  \tmesh.scale.z = scale;",
				"",
				"\t  \t// Place on the surface of ring",
				"\t  \tvar theta = t * TWO_PI;",
				"\t  \tvar angle = mesh.userData.originAngle;// + offsetAngle;",
				"",
				"\t  \tvar weightX = Math.cos( theta );",
				"\t  \tvar weightZ = Math.sin( theta );",
				"",
				"\t  \tvar ca = Math.cos( angle );",
				"\t  \tvar cs = Math.sin( angle );",
				"\t  \t// var amplitude = 0.5 * boxDepth",
				"\t\t// + ( thickness * vector.y ) * 0.5;",
				"\t  \tvar amplitude = thickness * vector.y * 0.5;",
				"",
				"\t  \tamplitude *= mesh.userData.distanceScalar;",
				"",
				"\t  \tvar x = amplitude * weightX * ca;",
				"\t  \tvar y = amplitude * cs;",
				"\t  \tvar z = amplitude * weightZ * ca;",
				"\t  \tvector.set( x, y, z );",
				"",
				"\t  \tmesh.position.add( vector );",
				"",
				"\t  \t// Rotate mesh as if it was rolling",
				"\t  \tmesh.rotation.y = HALF_PI + Math.atan2( - mesh.position.x, - mesh.position.z );",
				"\t  \tmesh.rotation.z = Math.atan2( - cs, - ca );",
				"",
				"\t}",
				"",
				"}",
				"",
				"function createMesh() {",
				"",
				"\t// TODO: Base off of a variety of different",
				"\t// types of geometry with different materials",
				"",
				"\tvar mesh = new THREE.Mesh( geometry, material );",
				"",
				"\tmesh.visible = false;",
				"\tmesh.rotation.order = 'YXZ';",
				"",
				"\tmesh.userData.originAngle = 0;",
				"\tmesh.userData.elapsed = 0;",
				"\tmesh.userData.startAngle = 0;",
				"\tmesh.userData.endAngle = 1;",
				"\tmesh.userData.distanceScalar = 1;",
				"\tmesh.userData.mesh = mesh;",
				"",
				"\tmesh.castShadow = true;",
				"",
				"\tmesh.userData.tweens = {",
				"",
				"\t\tin: new TWEEN.Tween( mesh.userData, group.userData.Tween )",
				"\t\t\t.delay( Math.random() * 1000 )",
				"\t\t\t.to( { elapsed: 1 }, 2000 - Math.random() * 1000 )",
				"\t\t\t.onStart( showMesh )",
				"\t\t\t.onComplete( hideMesh )",
				"",
				"\t};",
				"",
				"\tmesh.userData.start = start;",
				"",
				"\t/**",
				"\t * @param {Object} options - Need to implement to control",
				"\t * ability to choreograph boids around ring over various",
				"\t * circumstances and states.",
				"\t */",
				"\tfunction start( options ) {",
				"",
				"\t\tvar range = Math.random() * 0.25 + 0.25;",
				"\t\tmesh.userData.originAngle = Math.random() * TWO_PI;",
				"\t\tmesh.userData.elapsed = 0;",
				"\t\tmesh.userData.startAngle = Math.random();",
				"\t\tmesh.userData.endAngle = mesh.userData.startAngle",
				"\t\t\t+ range;",
				"\t\t// + ( Math.random() > 0.5 ? range : - range );",
				"",
				"\t\tmesh.userData.distanceScalar = 1.25 * Math.random() + 0.75;",
				"\t\tmesh.userData.tweens.in.start( time );",
				"",
				"\t}",
				"",
				"\treturn mesh;",
				"",
				"}",
				"",
				"function showMesh( userData ) {",
				"\tuserData.mesh.visible = true;",
				"}",
				"",
				"function hideMesh( userData ) {",
				"\tuserData.mesh.visible = false;",
				"}",
				"",
				"resources.set( 'boids', group );"
			]
		],
		[
			"Instructions",
			[
				"var Text = resources.get( 'alternate-gothic-3d' );",
				"var renderer = resources.get( 'renderer' );",
				"var camera = resources.get( 'camera' );",
				"var scene = resources.get( 'scene' );",
				"",
				"var words = [",
				"\t// Bottom / Top Instructions",
				"\t\"north\", \"north\",",
				"//\t\"\", \"\",",
				"\t\"alter\", \"point\",",
				"\t\"time\", \"drag\",",
				"//\t\"\", \"\",",
				"\t\"east\", \"east\",",
				"//\t\"\", \"\",",
				"\t\"change\", \"teal\",",
				"\t\"speed\", \"shapes\",",
				"//\t\"\", \"\",",
				"\t\"south\", \"south\",",
				"//\t\"\", \"\",",
				"\t\"teal\", \"change\",",
				"\t\"shapes\", \"speed\",",
				"//\t\"\", \"\",",
				"\t\"west\", \"west\",",
				"//\t\"\", \"\",",
				"\t\"point\", \"alter\",",
				"\t\"drag\", \"time\",",
				"//\t\"\", \"\"",
				"];",
				"",
				"var radiusOffset = 0.5;",
				"var radius = 0.5;",
				"var rows = 2;",
				"var amount = Math.floor( words.length / rows );",
				"",
				"var group = new THREE.Group();",
				"group.visible = false;",
				"",
				"Text.ready( setup );",
				"",
				"var circle = {",
				"\tvertices: {",
				"\t\ttop: {",
				"\t\t\tinner: [],",
				"\t\t\touter: []",
				"\t\t},",
				"\t\tbottom: {",
				"\t\t\tinner: [],",
				"\t\t\touter: []",
				"\t\t},",
				"\t},",
				"\tgeometry: new THREE.BufferGeometry(),",
				"\tmaterial: new THREE.LineBasicMaterial( {",
				"\t\tcolor: 'black'",
				"\t} )",
				"};",
				"",
				"function setup() {",
				"",
				"\tif ( group.children.length <= 0 ) {",
				"\t\tcreateCard( 0 );",
				"\t}",
				"",
				"}",
				"",
				"function createCard( wid ) {",
				"",
				"\tvar mesh;",
				"",
				"\tif ( wid >= words.length ) {",
				"",
				"\t\tcreateCircle();",
				"\t\tgroup.visible = true;",
				"",
				"\t\treturn;",
				"\t}",
				"",
				"\tvar i = Math.floor( wid / rows );",
				"\tvar j = wid % rows;",
				"",
				"\tvar pct = i / amount;",
				"\tvar theta = pct * Math.PI * 2;",
				"",
				"\tvar r = radius + radiusOffset;",
				"\tvar x = Math.cos( theta );",
				"\tvar y = 2.0 * radius * ( 2 * j / ( rows - 1 ) - 1 );",
				"\tvar z = Math.sin( theta );",
				"\tvar word = words[ wid ].toUpperCase();",
				"\tvar styles = {};",
				"",
				"\tif ( /(north|south|east|west)/i.test( word ) ) {",
				"\t\tstyles.fill = 'black';",
				"\t}",
				"",
				"\tmesh = Text.create( word, styles );",
				"\tmesh.material.uniforms.flipped.value = j > 0;",
				"\tmesh.renderOrder = 110;",
				"",
				"\tmesh.position.x = r * x;",
				"\tmesh.position.y = y;",
				"\tmesh.position.z = r * z;",
				"\tmesh.rotation.y = - theta;",
				"",
				"\tmesh.scale.x = radius * 0.66;",
				"\tmesh.scale.y = radius * 0.66;",
				"\tmesh.scale.z = radius * 0.66;",
				"",
				"\tgroup.add( mesh );",
				"",
				"\tvar section = y > 0 ? 'top' : 'bottom';",
				"\tvar vertices = circle.vertices[ section ];",
				"",
				"\tvar inner = vertices.inner;",
				"\tvar outer = vertices.outer;",
				"",
				"\tvar ir = r * 0.85;",
				"\tvar or = r * 0.85 + radius * 0.66;",
				"",
				"\tvar ts = 0.100;",
				"\tvar tw = 0.033;",
				"\tvar td = ts - tw;",
				"",
				"\tinner.push( x * ir, y, z * ir );",
				"\touter.push( x * or, y, z * or );",
				"",
				"\tif ( i > 0 ) {",
				"",
				"\t\t// Tick Mark",
				"\t\tpct = ( i + 0.5 ) / amount;",
				"\t\ttheta = pct * Math.PI * 2;",
				"\t\t",
				"\t\tvar tx = Math.cos( theta );",
				"\t\tvar tz = Math.sin( theta );",
				"",
				"\t\tinner.push( ( ir - tw ) * tx, y, ( ir - tw ) * tz );",
				"\t\tinner.push( ( ir + td ) * tx, y, ( ir + td ) * tz );",
				"",
				"\t\touter.push( ( or + tw ) * tx, y, ( or + tw ) * tz );",
				"\t\touter.push( ( or - td ) * tx, y, ( or - td ) * tz );",
				"",
				"\t\t// Double up because they are line segments",
				"\t\tinner.push( x * ir, y, z * ir );",
				"\t\touter.push( x * or, y, z * or );",
				"",
				"\t\t// Make last point go back to first point",
				"\t\t// in the circle",
				"\t\tif ( i >= amount - 1 ) {",
				"",
				"\t\t\tcircle.vertices[ section ].inner = inner.concat(",
				"\t\t\t\tinner.slice( 0, 3 ) );",
				"\t\t\tcircle.vertices[ section ].outer = outer.concat(",
				"\t\t\t\touter.slice( 0, 3 ) );",
				"",
				"\t\t\tinner = circle.vertices[ section ].inner;",
				"\t\t\touter = circle.vertices[ section ].outer;",
				"",
				"\t\t\t// Final Tick Mark",
				"\t\t\tpct = ( i + 1 + 0.5 ) / amount;",
				"\t\t\ttheta = pct * Math.PI * 2;",
				"",
				"\t\t\tvar tx = Math.cos( theta );",
				"\t\t\tvar tz = Math.sin( theta );",
				"",
				"\t\t\tinner.push( ( ir - tw ) * tx, y, ( ir - tw ) * tz );",
				"\t\t\tinner.push( ( ir + td ) * tx, y, ( ir + td ) * tz );",
				"",
				"\t\t\touter.push( ( or + tw ) * tx, y, ( or + tw ) * tz );",
				"\t\t\touter.push( ( or - td ) * tx, y, ( or - td ) * tz );",
				"",
				"\t\t}",
				"",
				"\t}",
				"",
				"\tif ( mesh ) {",
				"\t\trenderer.render( scene, camera );",
				"\t}",
				"",
				"\trequestAnimationFrame( function() {",
				"\t\tcreateCard( wid + 1 );",
				"\t} );",
				"",
				"}",
				"",
				"function createCircle() {",
				"",
				"\tvar vertices = circle.vertices.top.inner.concat(",
				"\t\tcircle.vertices.top.outer, circle.vertices.bottom.inner,",
				"\t\tcircle.vertices.bottom.outer );",
				"",
				"\tvar attribute = new THREE.Float32BufferAttribute( vertices, 3 );",
				"\tcircle.geometry.addAttribute( 'position', attribute );",
				"",
				"\tcircle = new THREE.LineSegments( circle.geometry, circle.material );",
				"\tgroup.add( circle );",
				"",
				"}",
				"",
				"scene.add( group );",
				"resources.set( 'instructions', group );"
			]
		],
		[
			"Compass",
			[
				"var scene = resources.get( 'scene' );",
				"var Button = resources.get( 'Button' );",
				"var interaction = resources.get( 'interaction' );",
				"",
				"var amount = 4;",
				"var radius = 0.5;",
				"",
				"var compass = new THREE.Group();",
				"var sphere = new THREE.Mesh(",
				"\tnew THREE.SphereBufferGeometry( 3 * radius * 0.75, 5, 5 ),",
				"\tnew THREE.MeshBasicMaterial( {",
				"\t\tcolor: 0x000000,",
				"\t\ttransparent: true,",
				"\t\topacity: 0,",
				"\t\twireframe: true,",
				"\t\tside: THREE.BackSide",
				"\t} )",
				");",
				"",
				"sphere.renderOrder = 100;",
				"",
				"interaction.listen( sphere );",
				"sphere.visible = false;",
				"",
				"var list = [];",
				"",
				"var circle = {",
				"\tvertices: {",
				"\t\ttop: [],",
				"\t\tbottom: [],",
				"\t},",
				"\tgeometry: new THREE.BufferGeometry(),",
				"\tmaterial: new THREE.LineBasicMaterial( {",
				"\t\tcolor: 'black'",
				"\t} )",
				"};",
				"",
				"for ( var i = 0, button, pct, x, y, z; i < amount; i++ ) {",
				"",
				"\tpct = i / amount;",
				"",
				"\tbutton = createButton( pct, 'bottom' );",
				"\tbutton = createButton( pct, 'top' );",
				"",
				"}",
				"",
				"createCircle();",
				"",
				"function createButton( pct, section ) {",
				"",
				"\tvar x, y, z;",
				"\tvar theta = Math.PI * 2 * pct;",
				"\tvar button = Button.create( 0.12, 'cone' );",
				"\tvar vertices = circle.vertices[ section ];",
				"\tvar cos = Math.cos( theta );",
				"\tvar sin = Math.sin( theta );",
				"",
				"\ty = 1;",
				"",
				"\tif ( /bottom/i.test( section ) ) {",
				"\t\ty *= - 1;",
				"\t}",
				"",
				"\tbutton.position.x = 3 * radius * cos;",
				"\tbutton.position.z = 3 * radius * sin;",
				"\tbutton.lookAt( compass.position );",
				"",
				"\tbutton.position.y = y;",
				"",
				"\tx = 2.9 * radius * cos;",
				"\tz = 2.9 * radius * sin;",
				"",
				"\tvertices.push( x, y, z );",
				"",
				"\tx = 2.34 * radius * cos;",
				"\tz = 2.34 * radius * sin;",
				"",
				"\tvertices.push( x, y, z );",
				"",
				"\tinteraction.listen( button );",
				"",
				"\tbutton.addEventListener( 'primary-down', pointerdown );",
				"\tcompass.add( button );",
				"\tlist.push( button );",
				"\t",
				"\treturn button;",
				"",
				"}",
				"",
				"function createCircle() {",
				"",
				"\tvar vertices = circle.vertices.top.concat( circle.vertices.bottom );",
				"\tvar attribute = new THREE.Float32BufferAttribute( vertices, 3 );",
				"\tcircle.geometry.addAttribute( 'position', attribute );",
				"",
				"\tcircle = new THREE.LineSegments( circle.geometry, circle.material );",
				"\tcompass.add( circle );",
				"",
				"}",
				"",
				"function pointerdown( e ) {",
				"",
				"\tif ( sphere.visible ) {",
				"\t\t// This means we're already focused",
				"\t\t// on using the compass with a",
				"\t\t// difference controller.",
				"\t\treturn;",
				"\t}",
				"",
				"\tsphere.visible = true;",
				"\tsphere.userData.controller = e.controller;",
				"",
				"\tfor ( var i = 0; i < list.length; i++ ) {",
				"\t\tvar button = list[ i ];",
				"\t\tinteraction.ignore( button );",
				"\t}",
				"",
				"\tinteraction.addEventListener( 'primary-up', pointerup );",
				"\tcompass.dispatchEvent( { type: 'focus' } );",
				"",
				"}",
				"",
				"function pointerup( e ) {",
				"",
				"\tif ( e.controller.uuid !== sphere.userData.controller.uuid ) {",
				"\t\t// A different controller dispatched",
				"\t\t// the `pointer-up` event and it means",
				"\t\t// that we should still be focused",
				"\t\t// on updating the compass.",
				"\t\treturn;",
				"\t}",
				"",
				"\tsphere.visible = false;",
				"\tdelete sphere.userData.controller;",
				"\tdelete sphere.userData.origin;",
				"",
				"\tfor ( var i = 0; i < list.length; i++ ) {",
				"\t\tvar button = list[ i ];",
				"\t\tinteraction.listen( button );",
				"\t}",
				"",
				"\tinteraction.removeEventListener( 'primary-up', pointerup );",
				"\tcompass.dispatchEvent( { type: 'blur' } );",
				"",
				"}",
				"",
				"function update() {",
				"",
				"\tif ( sphere.visible ) {",
				"",
				"\t\tvar controller = sphere.userData.controller;",
				"\t\tvar intersection = interaction.intersections[ controller.uuid ];",
				"",
				"\t\tif ( intersection && intersection.object.uuid === sphere.uuid ) {",
				"",
				"\t\t\tvar point = intersection.point;",
				"\t\t\tvar theta = Math.atan2( - point.z, - point.x );",
				"",
				"\t\t\tif ( typeof sphere.userData.origin === 'undefined' ) {",
				"\t\t\t\tsphere.userData.origin = theta;",
				"\t\t\t}",
				"",
				"\t\t\tvar delta = theta - sphere.userData.origin;",
				"\t\t\tsphere.userData.origin = theta;",
				"",
				"\t\t\tcompass.dispatchEvent( {",
				"\t\t\t\ttype: 'drag',",
				"\t\t\t\tcontroller: controller,",
				"\t\t\t\ttheta: - delta",
				"\t\t\t} );",
				"",
				"\t\t}",
				"",
				"\t}",
				"",
				"}",
				"",
				"compass.userData.update = update;",
				"",
				"scene.add( compass, sphere );",
				"",
				"resources.set( 'compass', compass );"
			]
		],
		[
			"VJ Features",
			[
				"var params = resources.get( 'params' );",
				"var manager = resources.get( 'audio-manager' );",
				"var backdrop = resources.get( 'backdrop' );",
				"var ring = resources.get( 'ring' );",
				"var playhead = resources.get( 'playhead' );",
				"var timeline = resources.get( 'timeline' );",
				"var paddles = resources.get( 'paddles' );",
				"var debris = resources.get( 'debris' );",
				"var boids = resources.get( 'boids' );",
				"var instructions = resources.get( 'instructions' );",
				"var lights = resources.get( 'lights' );",
				"var compass = resources.get( 'compass' );",
				"",
				"var orbitals = [ ring, timeline, paddles, boids, instructions, compass ];",
				"var theta = 0;",
				"",
				"// In millis",
				"var duration = 350;",
				"var vector = new THREE.Vector3();",
				"",
				"// In ascending order to match playhead line",
				"var palette = params.palette;",
				"",
				"compass.addEventListener( 'focus', freeze );",
				"compass.addEventListener( 'drag', orient );",
				"compass.addEventListener( 'blur', release );",
				"",
				"for ( var j = 0; j < paddles.children.length; j++ ) {",
				"",
				"\tvar paddle = paddles.children[ j ];",
				"",
				"\tif ( !paddle.userData.isPaddle ) {",
				"\t\tcontinue;",
				"\t}",
				"",
				"\tpaddle.addEventListener( 'focus', focus );",
				"\tpaddle.addEventListener( 'blur', blur );",
				"",
				"}",
				"",
				"function scrub ( e ) {",
				"",
				"\tvar line = e.line;",
				"\tvar pct = line / 5;",
				"\tvar ambient = lights.userData.ambient;",
				"",
				"\tvar options = { intensity: 1.125 * pct + 1 };",
				"\tambient.userData.intensity = options.intensity;",
				"\tambient.userData.tween.to( options, duration );",
				"\tambient.userData.tween.start();",
				"",
				"}",
				"",
				"function orient ( e ) {",
				"",
				"\tvar step = e.theta;",
				"\ttheta += step;",
				"",
				"\tfor ( var i = 0; i < orbitals.length; i++ ) {",
				"\t\tvar group = orbitals[ i ];",
				"\t\tgroup.rotation.y = theta;",
				"\t}",
				"",
				"}",
				"",
				"function focus ( e ) {",
				"",
				"\tvar paddle = this;",
				"\tvar controller = e.controller;",
				"\tvar ambient = lights.userData.ambient;",
				"",
				"\tvector.setFromMatrixPosition( paddle.matrixWorld );",
				"",
				"\tfor ( var i = 0; i < lights.children.length; i++ ) {",
				"\t\tvar light = lights.children[ i ];",
				"\t\tlight.target.userData.reference = paddle;",
				"\t}",
				"",
				"\tfor ( var j = 0; j < manager.filters.list.length; j++ ) {",
				"\t\tvar filter = manager.filters.list[ j ];",
				"\t\tif ( filter.name === paddle.userData.name ) {",
				"\t\t\tfilter.gain.value = 1;",
				"\t\t} else {",
				"\t\t\tfilter.gain.value = 0.01;",
				"\t\t}",
				"\t}",
				"",
				"\tvar options = { intensity: 0.45 };",
				"\tambient.userData.tween.to( options, duration );",
				"\tambient.userData.tween.start();",
				"",
				"}",
				"",
				"function blur ( e ) {",
				"",
				"\tvar paddle = this;",
				"\tvar controller = e.controller;",
				"\tvar ambient = lights.userData.ambient;",
				"",
				"\tfor ( var i = 0; i < lights.children.length; i++ ) {",
				"\t\tvar light = lights.children[ i ];",
				"\t\tlight.target.userData.reference = lights;",
				"\t}",
				"",
				"\tfor ( var j = 0; j < manager.filters.list.length; j++ ) {",
				"\t\tvar filter = manager.filters.list[ j ];",
				"\t\tfilter.gain.value = 1;",
				"\t}",
				"",
				"\tvar options = { intensity: ambient.userData.intensity };",
				"\tambient.userData.tween.to( options, duration );",
				"\tambient.userData.tween.start();",
				"",
				"}",
				"",
				"function freeze() {",
				"\tdebris.userData.amplitude = 3;",
				"}",
				"",
				"function release() {",
				"\tdebris.userData.amplitude = 1.5;",
				"}"
			]
		],
		[
			"Setup",
			[
				"/**",
				" * Initializes all materials to the renderer.",
				" * This stops the \"hiccup\" incurred when first",
				" * scrubbing the playhead / changing the",
				" * `playbackRate` of the track.",
				" */",
				"var renderer = resources.get( 'renderer' );",
				"var scene = resources.get( 'scene' );",
				"var camera = resources.get( 'camera' );",
				"",
				"renderer.compile( scene, camera );"
			]
		],
		[
			"Polar Spheres",
			[
				"var scene = resources.get( 'scene' );",
				"",
				"var group = new THREE.Group();",
				"var loader = new THREE.TextureLoader();",
				"",
				"",
				"",
				"var distance = 400;",
				"var geometry = new THREE.SphereBufferGeometry( distance / 2, 64, 64 );",
				"var material = new THREE.ShaderMaterial( {",
				"\tuniforms: {",
				"\t},",
				"\tvertexShader: [",
				"\t\t'void main() {',",
				"\t\t\t// Add Noise Based Movement",
				"\t\t\t// Pass Camera Ray to do Diffused Fresnel like Gradient",
				"\t\t\t'gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',",
				"\t\t'}'",
				"\t].join( '\\n' ),",
				"\tfragmentShader: [",
				"\t\t'void main() {',",
				"\t\t\t// Use Logo / Credits / Lyrics as a Texture",
				"\t\t\t// Create a genie ball like effect",
				"\t\t\t'gl_FragColor = vec4( 1.0, 0.33, 0.33, 0.85 );',",
				"\t\t'}',",
				"\t].join( '\\n' ),",
				"\ttransparent: true",
				"} );",
				"",
				"var top = new THREE.Mesh( geometry, material );",
				"var bottom = new THREE.Mesh( geometry, material );",
				"",
				"top.position.y = distance * 0.66;",
				"bottom.position.y = - distance * 0.66;",
				"",
				"group.add( top, bottom );",
				"scene.add( group );",
				"",
				"group.visible = false;",
				"",
				"resources.set( 'polar-spheres', group );"
			]
		]
	],
	"effects": [
		[
			"Audio Player",
			[
				"var manager = resources.get( 'audio-manager' );",
				"",
				"function start( progress ) {",
				"\tplayer.setAudio( manager );",
				"\tplayer.setLoop( [ 0, manager.duration ] );",
				"}",
				"",
				"function end( progress ) {",
				"\tplayer.setAudio( null );",
				"}",
				"",
				"function update( progress ) {",
				"",
				"\tmanager.update();",
				"\tmanager.updateFFT();",
				"",
				"}"
			]
		],
		[
			"Render",
			[
				"var manager = resources.get( 'audio-manager' );",
				"var renderer = resources.get( 'renderer' );",
				"var interaction = resources.get( 'interaction' );",
				"var ring = resources.get( 'ring' );",
				"var carousel = resources.get( 'carousel' );",
				"var backdrop = resources.get( 'backdrop' );",
				"var camera = resources.get( 'camera' );",
				"var scene = resources.get( 'scene' );",
				"var playhead = resources.get( 'playhead' );",
				"var paddles = resources.get( 'paddles' );",
				"var lights = resources.get( 'lights' );",
				"var debris = resources.get( 'debris' );",
				"var boids = resources.get( 'boids' );",
				"var compass = resources.get( 'compass' );",
				"",
				"var duration = 1;",
				"",
				"playhead.addEventListener( 'drag', onPlayheadDrag );",
				"",
				"function start( progress ) {",
				"\tduration = manager.duration;",
				"}",
				"",
				"function end( progress ){}",
				"",
				"function update( progress ) {",
				"",
				"\tvar isPresenting = renderer.vr.isPresenting();",
				"",
				"\tTWEEN.update();",
				"",
				"\tvar orbit = camera.userData.controls;",
				"\tvar orbitState = !orbit ? - 1 : orbit.getState();",
				"",
				"\tif ( orbitState < 0 ) {",
				"\t\tinteraction.update();",
				"\t}",
				"",
				"\tbackdrop.userData.update( progress, lights.userData.ambient.intensity );",
				"\tring.userData.update( progress );",
				"\tplayhead.userData.update( progress );",
				"\tpaddles.userData.update( progress );",
				"\tlights.userData.update( progress );",
				"\tboids.userData.update( progress );",
				"\tcompass.userData.update( progress );",
				"",
				"\t// Uniforms",
				"\tdebris.userData.update( 1000 * progress * duration );",
				"",
				"\tvar interacting = interaction.hasIntersections();",
				"",
				"\tif ( orbit ) {",
				"\t\tif ( isPresenting || interacting ) {",
				"\t\t\torbit.enabled = false;",
				"\t\t\torbit.setState( - 1 );",
				"\t\t} else {",
				"\t\t\torbit.enabled = true;",
				"\t\t\torbit.update();",
				"\t\t}",
				"\t}",
				"",
				"\trenderer.render( scene, camera );",
				"",
				"}",
				"",
				"function onPlayheadDrag( event ) {",
				"",
				"\tvar progress = event.progress;",
				"",
				"\tplayer.currentTime = progress * manager.duration;",
				"",
				"\t/*",
				"\tvar line = event.line;",
				"\tvar rate = 1;",
				"",
				"\tswitch ( line ) {",
				"\t\tcase - 2:",
				"\t\t\trate = 0.33;",
				"\t\t\tbreak;",
				"\t\tcase - 1:",
				"\t\t\trate = 0.66;",
				"\t\t\tbreak;",
				"\t\tcase 0:",
				"\t\t\trate = 1;",
				"\t\t\tbreak;",
				"\t\tcase 1:",
				"\t\t\trate = 1.5;",
				"\t\t\tbreak;",
				"\t\tcase 2:",
				"\t\t\trate = 2;",
				"\t\t\tbreak;",
				"\t\tdefault:",
				"\t\t\trate = 1;",
				"\t}",
				"",
				"\tplayer.playbackRate = rate;",
				"\t*/",
				"",
				"}"
			]
		],
		[
			"Set Backdrop Gray",
			[
				"var params = resources.get( 'params' );",
				"var backdrop = resources.get( 'backdrop' );",
				"var playhead = resources.get( 'playhead' );",
				"",
				"var black = new THREE.Color( 0, 0, 0 );",
				"var source = new THREE.Color();",
				"var target = new THREE.Color();",
				"",
				"var sourceStart = new THREE.Color();",
				"var targetStart = new THREE.Color();",
				"",
				"var initialized = false;",
				"",
				"function start( progress ) {",
				"",
				"\tvar color;",
				"\tvar userData = backdrop.userData;",
				"",
				"\tcolor = params.palette[ 2 ].source;",
				"\tsource.set( color );",
				"",
				"\tcolor = params.palette[ 2 ].target;",
				"\ttarget.set( color );",
				"\t",
				"\tsourceStart.copy( userData.cSource );",
				"\ttargetStart.copy( userData.cTarget );",
				"",
				"}",
				"",
				"function end( progress ) {",
				"\tinitialized = true;",
				"}",
				"",
				"function update( progress ) {",
				"",
				"\tif ( initialized ) {",
				"\t\t// Don't execute if this is being",
				"\t\t// triggered from a loop",
				"\t\treturn;",
				"\t}",
				"",
				"\tvar uniforms = backdrop.material.uniforms;",
				"\tvar userData = backdrop.userData;",
				"",
				"\tprogress = TWEEN.Easing.Back.Out( progress );",
				"",
				"\tuserData.cSource.copy( sourceStart ).lerp( source, progress );",
				"\tuserData.cTarget.copy( targetStart ).lerp( target, progress );",
				"",
				"}"
			]
		],
		[
			"Apply Stem FFT to Bones ",
			[
				"var manager = resources.get( 'audio-manager' );",
				"var ring = resources.get( 'ring' );",
				"var params = resources.get( 'params' );",
				"var spline = ring.userData.splines.scales;",
				"var amplitude = 0;",
				"",
				"function start( progress ){}",
				"",
				"function end( progress ) {",
				"",
				"\tfor ( var i = 0; i < spline.points.length; i++ ) {",
				"",
				"\t\tring.userData.setScale( i, 1 );",
				"",
				"\t}",
				"",
				"}",
				"",
				"function update( progress ) {",
				"",
				"\tvar analysers = manager.analysers.list;",
				"\tvar bandwidth = 0;",
				"",
				"\tfor ( var i = 0; i < analysers.length; i++ ) {",
				"",
				"\t\tvar data = analysers[ i ].data;",
				"\t\tamplitude += ( data[ bandwidth ] / 255 - amplitude ) * params.drag;",
				"\t\tvar scale = 0.5 * amplitude + 0.5;",
				"",
				"\t\tring.userData.setScale( i, scale );",
				"",
				"",
				"\t}",
				"",
				"}",
				"",
				"function lerp( a, b, t ) {",
				"\treturn ( b - a ) * t + a;",
				"}"
			]
		],
		[
			"Apply Waveform to Bones: Zig Zag",
			[
				"var manager = resources.get( 'audio-manager' );",
				"var ring = resources.get( 'ring' );",
				"var params = resources.get( 'params' );",
				"",
				"var amplitude = 0;",
				"",
				"function start( progress ) {",
				"",
				"\t// TODO: Could change the curve type",
				"\t// on for this effect.",
				"",
				"}",
				"",
				"function end( progress ){}",
				"",
				"function update( progress ) {",
				"",
				"\tvar points = ring.userData.splines.positions.points;",
				"\tvar analyser = manager.analyser;",
				"\tvar time = 10 * progress;",
				"",
				"\tfor ( var i = 0; i < points.length; i++ ) {",
				"",
				"\t\tvar pct = i / points.length;",
				"\t\tvar bandwidth = Math.floor( pct * analyser.data.length );",
				"\t\tvar data = analyser.data;",
				"\t\tamplitude += ( data[ bandwidth ] / 255 - amplitude ) * params.drag;",
				"",
				"\t\tvar theta = i % 2;",
				"\t\tvar phase = 2 * theta - 1;",
				"\t\tvar y = amplitude * phase;",
				"",
				"\t\tring.userData.setPositionY( i, y );",
				"",
				"\t}",
				"",
				"}",
				"",
				"function lerp( a, b, t ) {",
				"\treturn ( b - a ) * t + a;",
				"}"
			]
		],
		[
			"Apply Waveform to Bones Over Time",
			[
				"var manager = resources.get( 'audio-manager' );",
				"var ring = resources.get( 'ring' );",
				"var params = resources.get( 'params' );",
				"",
				"var amplitude = 0;",
				"",
				"function start( progress ){}",
				"",
				"function end( progress ){}",
				"",
				"function update( progress ) {",
				"",
				"\t// The overall output volume of the environment",
				"\tvar analyser = manager.analyser;",
				"\tvar points = ring.userData.splines.positions.points;",
				"\tamplitude += ( 0.75 * analyser.data[ 0 ] / 255 - amplitude ) * params.drag;",
				"",
				"\tvar time = progress * 100 / 8;",
				"\tvar transition = Math.sin( progress * Math.PI );",
				"\tvar phi = Math.PI * 12 * Math.sin( time * 2 );",
				"",
				"\tfor ( var i = 0; i < points.length; i++ ) {",
				"",
				"\t\tvar pct = i / ( points.length - 1 );",
				"\t\tvar phase = Math.sin( pct * phi );",
				"\t\tvar y = transition * amplitude * phase;",
				"",
				"\t\tring.userData.setPositionY( i, y );",
				"",
				"\t}",
				"",
				"}",
				"",
				"function lerp( a, b, t ) {",
				"\treturn ( b - a ) * t + a;",
				"}"
			]
		],
		[
			"Apply Stem FFT to Bones Extreme",
			[
				"var manager = resources.get( 'audio-manager' );",
				"var ring = resources.get( 'ring' );",
				"var params = resources.get( 'params' );",
				"",
				"var spline = ring.userData.splines.scales;",
				"var amplitude = 0;",
				"",
				"function start( progress ){}",
				"",
				"function end( progress ) {",
				"",
				"\tfor ( var i = 0; i < spline.points.length; i++ ) {",
				"",
				"\t\tring.userData.setScale( i, 1 );",
				"",
				"\t}",
				"",
				"}",
				"",
				"function update( progress ) {",
				"",
				"\tvar analysers = manager.analysers.list;",
				"\tvar bandwidth = 2;",
				"",
				"\tfor ( var i = 0; i < analysers.length; i++ ) {",
				"",
				"\t\tvar pct = i / analysers.length;",
				"\t\tvar data = analysers[ i ].data;",
				"\t\tamplitude += ( data[ bandwidth ] / 255 - amplitude ) * params.drag;",
				"",
				"\t\tvar scale = 2 * amplitude + 0.1;",
				"\t\tring.userData.setScale( i, scale * scale );",
				"",
				"\t}",
				"",
				"}"
			]
		],
		[
			"Set Default Camera",
			[
				"var camera = resources.get( 'camera' );",
				"var renderer = resources.get( 'renderer' );",
				"var params = resources.get( 'params' );",
				"var playhead = resources.get( 'playhead' );",
				"var initialized = false;",
				"",
				"function start( progress ) {",
				"",
				"\tif ( initialized ) {",
				"\t\treturn;",
				"\t}",
				"",
				"\tcamera.position.z = 0.01;",
				"",
				"\tif ( !camera.userData.controls ) {",
				"\t\tcamera.userData.controls = new THREE.OrbitControls(",
				"\t\t\tcamera, renderer.domElement );",
				"\t\tcamera.userData.controls.enableDamping = true;",
				"\t\tcamera.userData.controls.enablePan = false;",
				"\t\tcamera.userData.controls.maxDistance = 1000;",
				"\t\tcamera.userData.controls.dampingFactor = params.drag;",
				"\t\tcamera.userData.controls.rotateSpeed = 0.1;",
				"\t}",
				"",
				"}",
				"",
				"function end( progress ) {",
				"\tinitialized = true;",
				"}",
				"",
				"function update( progress ){}"
			]
		],
		[
			"Trigger Boids",
			[
				"var boids = resources.get( 'boids' );",
				"",
				"function start( progress ) {",
				"",
				"\tfor ( var i = 0; i < boids.children.length; i++ ) {",
				"\t\tvar boid = boids.userData.next();",
				"\t\tboid.userData.start();",
				"\t}",
				"",
				"}",
				"",
				"function end( progress ){}",
				"",
				"function update( progress ){}"
			]
		],
		[
			"Randomize Colors",
			[
				"var lights = resources.get( 'lights' );",
				"var backdrop = resources.get( 'backdrop' );",
				"var ambient = lights.userData.ambient;",
				"",
				"function start() {",
				"\t\t",
				"\tbackdrop.userData.cSource.set( 0xffffff * Math.random() );",
				"\tbackdrop.userData.cTarget.set( 0xffffff * Math.random() );",
				"\t",
				"}",
				"",
				"function update( progress ) {}"
			]
		]
	],
	"animations": [
		[
			"Audio",
			0,
			175.98899999999998,
			0,
			0,
			true
		],
		[
			"Backdrop Reveal",
			0,
			5,
			1,
			2,
			true
		],
		[
			"Ring Morph Scale",
			0,
			29,
			2,
			3,
			true
		],
		[
			"",
			0,
			1,
			4,
			9,
			true
		],
		[
			"Video",
			0,
			175.98899999999998,
			5,
			1,
			true
		],
		[
			"Editor View",
			0,
			10,
			6,
			7,
			true
		],
		[
			"Ring Morph Wave",
			12,
			115,
			1,
			5,
			true
		],
		[
			"",
			21.263586956521742,
			22.26,
			4,
			9,
			true
		],
		[
			"",
			42.61413043478262,
			43.61,
			4,
			9,
			true
		],
		[
			"Ring Morph Scale",
			56,
			80,
			2,
			6,
			true
		],
		[
			"",
			63.964673913043505,
			64.96,
			4,
			9,
			true
		],
		[
			"Disperse",
			64.28125,
			68.71875,
			3,
			8,
			true
		],
		[
			"Disperse",
			72,
			76,
			3,
			8,
			true
		],
		[
			"Disperse",
			76,
			80,
			3,
			8,
			true
		],
		[
			"Disperse",
			80,
			84,
			3,
			8,
			true
		],
		[
			"Disperse",
			84,
			88,
			3,
			8,
			true
		],
		[
			"",
			85.31521739130439,
			86.32,
			4,
			9,
			true
		],
		[
			"Disperse",
			88,
			92,
			3,
			8,
			true
		],
		[
			"Disperse",
			92,
			96,
			3,
			8,
			true
		],
		[
			"Disperse",
			96,
			100,
			3,
			8,
			true
		],
		[
			"Disperse",
			100,
			104,
			3,
			8,
			true
		],
		[
			"Disperse",
			104,
			108,
			3,
			8,
			true
		],
		[
			"",
			106.66576086956528,
			107.67,
			4,
			9,
			true
		],
		[
			"Disperse",
			108,
			112,
			3,
			8,
			true
		],
		[
			"Disperse",
			112,
			116,
			3,
			8,
			true
		],
		[
			"Disperse",
			116,
			120,
			3,
			8,
			true
		],
		[
			"Disperse",
			120,
			124,
			3,
			8,
			true
		],
		[
			"Disperse",
			124,
			128,
			3,
			8,
			true
		],
		[
			"Disperse",
			128,
			132,
			3,
			8,
			true
		],
		[
			"",
			128.01630434782618,
			129.02,
			4,
			9,
			true
		],
		[
			"Ring Morph Position",
			133.5,
			175.98899999999998,
			2,
			4,
			true
		],
		[
			"",
			149.36684782608708,
			150.37,
			4,
			9,
			true
		]
	]
}
