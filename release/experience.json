{
	"config": {},
	"libraries": [
		"../release/third-party/WebAudio.js",
		"../release/third-party/three.js",
		"../release/third-party/two.js",
		"../release/third-party/tween.js",
		"../release/third-party/OrbitControls.js",
		"../release/src/interaction.js"
	],
	"includes": [
		[
			"Params",
			[
				"resources.set( 'params', {",
				"",
				"\tring: {",
				"\t\toffset: 0,",
				"\t\tamplitude: 0",
				"\t},",
				"\tboids: {",
				"\t\tamount: 1",
				"\t},",
				"\tpalette: [",
				"\t\t{",
				"\t\t\tname: 'blue',",
				"\t\t\tsource: 0x6473aa,",
				"\t\t\ttarget: 0x8ba4ff",
				"\t\t},",
				"\t\t{",
				"\t\t\tname: 'green',",
				"\t\t\tsource: 0x63a987,",
				"\t\t\ttarget: 0xc7ff96",
				"\t\t},",
				"\t\t{",
				"\t\t\tname: 'neutral',",
				"\t\t\tsource: 0xc8c8c8,",
				"\t\t\ttarget: 0x141414",
				"\t\t},",
				"\t\t{",
				"\t\t\tname: 'orange',",
				"\t\t\tsource: 0xff9d00,",
				"\t\t\ttarget: 0xffd896",
				"\t\t},",
				"\t\t{",
				"\t\t\tname: 'red',",
				"\t\t\tsource: 0xff3333,",
				"\t\t\ttarget: 0xf0c8c8",
				"\t\t}",
				"\t],",
				"",
				"\tdrag: 0.2,",
				"",
				"\trootPath: '//web-cdn.with.in/WEBSITE/wydk/assets'",
				"",
				"} );",
				"",
				""
			]
		],
		[
			"PositionalAudio",
			[
				"function PositionalAudio( listener, gain ) {",
				"",
				"\tTHREE.Object3D.call( this );",
				"",
				"\tthis.type = 'Audio';",
				"",
				"\tthis.listener = listener;",
				"\tthis.context = listener.context;",
				"",
				"\tthis.panner = this.context.createPanner();",
				"\tthis.panner.panningModel = 'HRTF';",
				"",
				"\tthis.panner.connect( listener.getInput() );",
				"",
				"\tthis.gain = gain;",
				"\tthis.gain.connect( this.panner );",
				"",
				"}",
				"",
				"PositionalAudio.prototype = Object.assign( Object.create( THREE.PositionalAudio.prototype ) );",
				"",
				"resources.set( 'PositionalAudio', PositionalAudio );"
			]
		],
		[
			"AudioManager",
			[
				"var params = resources.get( 'params' );",
				"var tracks = {",
				"\t'vocals': [],",
				"\t'vocals-a': [],",
				"\t'vocals-b': [],",
				"\t'vocals-c': [], ",
				"\t'vocals-d': [],",
				"\t'vocals-e': [],",
				"\t'machine-drum-a': [],",
				"\t'machine-drum-b': [],",
				"\t'instrumental': [], ",
				"\t'melody': [],",
				"\t'blips': [],",
				"\t'sub-tone': [],",
				"\t'sfx': [],",
				"\t'summation': []",
				"};",
				"",
				"// Simple flat array of every WebAudio object",
				"// for quick and easy access.",
				"var sources = [];",
				"var schedule = [];",
				"",
				"schedule.limit = 8;",
				"schedule.index = 0;",
				"schedule.reset = function() {",
				"\tif ( schedule.length !== 0 ) {",
				"\t\tschedule.length = 0;",
				"\t\tschedule.index = 0;",
				"\t}",
				"\treturn schedule;",
				"};",
				"",
				"// Lower is higher seeded",
				"var ranking = {",
				"\t'melody': 0,",
				"\t'machine-drum': 1,",
				"\t'sfx': 2,",
				"\t'summation': 2,",
				"\t'vocals': 3,",
				"\t'instrumental': 3,",
				"\t'blips': 4,",
				"\t'sub-tone': 5,",
				"\t'summation': 5,",
				"\tcomparator: function( a, b ) {",
				"\t\treturn ranking[ a.name ] - ranking[ b.name ];",
				"\t}",
				"};",
				"",
				"/**",
				" * An array describing what audio clips exist for",
				" * each track at every section of the \"song\".",
				" * `true` means there is a clip available and its",
				" * filename corresponds to its position within the object.",
				" * Finally, a `String` represents a corresponding",
				" * clip from a different section of the song. This is",
				" * used to select the specific clip.",
				" *",
				" * When there is a letter, e.g: 'A' or 'B', in the",
				" * id it means that track actually extends and has",
				" * a relationship with the other matching ids. This",
				" * is mainly used for vocals that are two sets of bars.",
				" */",
				"var sequence = [",
				"",
				"\t{",
				"\t\tid: '1.01',",
				"\t\tname: 'intro',",
				"\t\ttracks: {",
				"\t\t\t'machine-drum-a': true,",
				"\t\t\t'melody': true,",
				"\t\t},",
				"\t\tduration: 1",
				"\t},",
				"\t{",
				"\t\tid: '1.02A',",
				"\t\tname: 'intro',",
				"\t\ttracks: {",
				"\t\t\t'machine-drum-a': 'intro',",
				"\t\t\t'melody': 'intro',",
				"\t\t\t'sfx': true,",
				"\t\t\t'summation': true",
				"\t\t},",
				"\t\tduration: 1",
				"\t},",
				"\t{",
				"\t\tid: '1.02B',",
				"\t\tname: 'intro',",
				"\t\ttracks: {",
				"\t\t\t'machine-drum-a': 'intro',",
				"\t\t\t'melody': 'intro',",
				"\t\t\t'sfx': true,",
				"\t\t\t'summation': true",
				"\t\t},",
				"\t\tduration: 1",
				"\t},",
				"",
				"",
				"\t//",
				"",
				"\t{",
				"\t\tid: '1.03',",
				"\t\tname: 'verse-1',",
				"\t\ttracks: {",
				"\t\t\t'vocals-a': true,",
				"\t\t\t'machine-drum-a': 'intro',",
				"\t\t\t'melody': 'intro',",
				"\t\t\t'summation': 'intro'",
				"\t\t},",
				"\t\tduration: 1",
				"\t},",
				"\t{",
				"\t\tid: '1.04',",
				"\t\tname: 'verse-1',",
				"\t\ttracks: {",
				"\t\t\t'vocals-b': true,",
				"\t\t\t'machine-drum-a': 'intro',",
				"\t\t\t'melody': 'intro',",
				"\t\t\t'summation': 'intro'",
				"\t\t},",
				"\t\tduration: 1",
				"\t},",
				"\t{",
				"\t\tid: '1.05',",
				"\t\tname: 'verse-1',",
				"\t\ttracks: {",
				"\t\t\t'vocals-c': true,",
				"\t\t\t'machine-drum-a': 'intro',",
				"\t\t\t'melody': 'intro',",
				"\t\t\t'summation': 'intro'",
				"\t\t},",
				"\t\tduration: 1",
				"\t},",
				"\t{",
				"\t\tid: '1.06',",
				"\t\tname: 'verse-1',",
				"\t\ttracks: {",
				"\t\t\t'vocals-d': true,",
				"\t\t\t'machine-drum-a': 'intro',",
				"\t\t\t'melody': 'intro',",
				"\t\t\t'summation': 'intro'",
				"\t\t},",
				"\t\tduration: 1",
				"\t},",
				"\t{",
				"\t\tid: '1.07',",
				"\t\tname: 'verse-1',",
				"\t\ttracks: {",
				"\t\t\t'vocals-e': true,",
				"\t\t\t'machine-drum-a': 'intro',",
				"\t\t\t'melody': 'intro',",
				"\t\t\t'summation': 'intro'",
				"\t\t},",
				"\t\tduration: 1",
				"\t},",
				"\t{",
				"\t\tid: '1.08',",
				"\t\tname: 'verse-1',",
				"\t\ttracks: {",
				"\t\t\t'vocals-e': 'verse-1',",
				"\t\t\t'machine-drum-a': true,",
				"\t\t\t'instrumental': true,",
				"\t\t\t'melody': true,",
				"\t\t\t'sub-tone': true,",
				"\t\t\t'summation': true",
				"\t\t},",
				"\t\tduration: 1",
				"\t},",
				"",
				"\t//",
				"",
				"\t{",
				"\t\tid: '2.01',",
				"\t\tname: 'verse-2',",
				"\t\ttracks: {",
				"\t\t\t'vocals-a': true,",
				"\t\t\t'machine-drum-a': true,",
				"\t\t\t'instrumental': true,",
				"\t\t\t'melody': true,",
				"\t\t\t'sub-tone': true,",
				"\t\t\t'summation': true",
				"\t\t},",
				"\t\tduration: 1",
				"\t},",
				"\t{",
				"\t\tid: '2.02',",
				"\t\tname: 'verse-2',",
				"\t\ttracks: {",
				"\t\t\t'vocals-b': true,",
				"\t\t\t'machine-drum-a': 'verse-2',",
				"\t\t\t'instrumental': 'verse-2',",
				"\t\t\t'melody': 'verse-2',",
				"\t\t\t'sub-tone': 'verse-2',",
				"\t\t\t'summation': 'verse-2'",
				"\t\t},",
				"\t\tduration: 1",
				"\t},",
				"\t{",
				"\t\tid: '2.03',",
				"\t\tname: 'verse-2',",
				"\t\ttracks: {",
				"\t\t\t'vocals-c': true,",
				"\t\t\t'machine-drum-a': 'verse-2',",
				"\t\t\t'instrumental': 'verse-2',",
				"\t\t\t'melody': 'verse-2',",
				"\t\t\t'sub-tone': 'verse-2',",
				"\t\t\t'summation': 'verse-2'",
				"\t\t},",
				"\t\tduration: 1",
				"\t},",
				"\t{",
				"\t\tid: '2.04A',",
				"\t\tname: 'verse-2',",
				"\t\ttracks: {",
				"\t\t\t'vocals-d': true,",
				"\t\t\t'machine-drum-a': 'verse-2',",
				"\t\t\t'instrumental': 'verse-2',",
				"\t\t\t'melody': 'verse-2',",
				"\t\t\t'sub-tone': 'verse-2',",
				"\t\t\t'summation': 'verse-2'",
				"\t\t},",
				"\t\tduration: 1",
				"\t},",
				"\t{",
				"\t\tid: '2.04B',",
				"\t\tname: 'verse-2',",
				"\t\ttracks: {",
				"\t\t\t'machine-drum-a': 'verse-2',",
				"\t\t\t'instrumental': 'verse-2',",
				"\t\t\t'melody': 'verse-2',",
				"\t\t\t'sub-tone': 'verse-2',",
				"\t\t\t'summation': 'verse-2'",
				"\t\t},",
				"\t\tduration: 1",
				"\t},",
				"\t",
				"\t//",
				"\t",
				"\t{",
				"\t\tid: '3.01',",
				"\t\tname: 'chorus',",
				"\t\ttracks: {",
				"\t\t\t'vocals-a': true,",
				"\t\t\t'machine-drum-a': true,",
				"\t\t\t'instrumental': true,",
				"\t\t\t'melody': true,",
				"\t\t\t'blips': true,",
				"\t\t\t'sub-tone': true,",
				"\t\t\t'sfx': true,",
				"\t\t\t'summation': true",
				"\t\t},",
				"\t\tduration: 1",
				"\t},",
				"\t{",
				"\t\tid: '3.02',",
				"\t\tname: 'chorus',",
				"\t\ttracks: {",
				"\t\t\t'vocals-b': true,",
				"\t\t\t'machine-drum-a': 'chorus',",
				"\t\t\t'instrumental': 'chorus',",
				"\t\t\t'melody': 'chorus',",
				"\t\t\t'blips': 'chorus',",
				"\t\t\t'sub-tone': 'chorus',",
				"\t\t\t'sfx': 'chorus',",
				"\t\t\t'summation': 'chorus'",
				"\t\t},",
				"\t\tduration: 1",
				"\t},",
				"\t{",
				"\t\tid: '3.03',",
				"\t\tname: 'chorus',",
				"\t\ttracks: {",
				"\t\t\t'vocals-c': true,",
				"\t\t\t'machine-drum-a': 'chorus',",
				"\t\t\t'instrumental': 'chorus',",
				"\t\t\t'melody': 'chorus',",
				"\t\t\t'blips': 'chorus',",
				"\t\t\t'sub-tone': 'chorus',",
				"\t\t\t'sfx': 'chorus',",
				"\t\t\t'summation': 'chorus'",
				"\t\t},",
				"\t\tduration: 1",
				"\t},",
				"\t{",
				"\t\tid: '3.04',",
				"\t\tname: 'chorus',",
				"\t\ttracks: {",
				"\t\t\t'vocals-d': true,",
				"\t\t\t'machine-drum-a': 'chorus',",
				"\t\t\t'instrumental': 'chorus',",
				"\t\t\t'melody': 'chorus',",
				"\t\t\t'blips': 'chorus',",
				"\t\t\t'sub-tone': 'chorus',",
				"\t\t\t'sfx': 'chorus',",
				"\t\t\t'summation': 'chorus'",
				"\t\t},",
				"\t\tduration: 1",
				"\t},",
				"\t{",
				"\t\tid: '3.05',",
				"\t\tname: 'chorus',",
				"\t\ttracks: {",
				"\t\t\t'vocals-e': true,",
				"\t\t\t'machine-drum-a': 'chorus',",
				"\t\t\t'instrumental': 'chorus',",
				"\t\t\t'melody': 'chorus',",
				"\t\t\t'blips': 'chorus',",
				"\t\t\t'sub-tone': 'chorus',",
				"\t\t\t'sfx': 'chorus',",
				"\t\t\t'summation': 'chorus'",
				"\t\t},",
				"\t\tduration: 1",
				"\t},",
				"",
				"\t//",
				"",
				"\t{",
				"\t\tid: '4.01',",
				"\t\tname: 'verse-3',",
				"\t\ttracks: {",
				"\t\t\t'vocals-a': true,",
				"\t\t\t'machine-drum-a': 'chorus',",
				"\t\t\t'instrumental': 'chorus',",
				"\t\t\t'melody': 'chorus',",
				"\t\t\t'blips': true,",
				"\t\t\t'sub-tone': 'chorus',",
				"\t\t\t'sfx': true,",
				"\t\t\t'summation': true",
				"\t\t},",
				"\t\tduration: 1",
				"\t},",
				"\t{",
				"\t\tid: '4.02',",
				"\t\tname: 'verse-3',",
				"\t\ttracks: {",
				"\t\t\t'vocals-b': true,",
				"\t\t\t'machine-drum-a': 'chorus',",
				"\t\t\t'instrumental': 'chorus',",
				"\t\t\t'melody': 'chorus',",
				"\t\t\t'blips': 'verse-3',",
				"\t\t\t'sub-tone': 'chorus',",
				"\t\t\t'sfx': 'verse-3',",
				"\t\t\t'summation': 'verse-3'",
				"\t\t},",
				"\t\tduration: 1",
				"\t},",
				"\t{",
				"\t\tid: '4.03',",
				"\t\tname: 'verse-3',",
				"\t\ttracks: {",
				"\t\t\t'vocals-c': true,",
				"\t\t\t'machine-drum-a': 'chorus',",
				"\t\t\t'instrumental': 'chorus',",
				"\t\t\t'melody': 'chorus',",
				"\t\t\t'blips': 'verse-3',",
				"\t\t\t'sub-tone': 'chorus',",
				"\t\t\t'sfx': 'verse-3',",
				"\t\t\t'summation': 'verse-3'",
				"\t\t},",
				"\t\tduration: 1",
				"\t},",
				"\t{",
				"\t\tid: '4.04',",
				"\t\tname: 'verse-3',",
				"\t\ttracks: {",
				"\t\t\t'vocals-d': true,",
				"\t\t\t'machine-drum-a': 'chorus',",
				"\t\t\t'instrumental': 'chorus',",
				"\t\t\t'melody': 'chorus',",
				"\t\t\t'blips': 'verse-3',",
				"\t\t\t'sub-tone': 'chorus',",
				"\t\t\t'sfx': 'verse-3',",
				"\t\t\t'summation': 'verse-3'",
				"\t\t},",
				"\t\tduration: 1",
				"\t},",
				"\t{",
				"\t\tid: '4.05',",
				"\t\tname: 'verse-3',",
				"\t\ttracks: {",
				"\t\t\t'vocals-e': true,",
				"\t\t\t'machine-drum-a': 'chorus',",
				"\t\t\t'instrumental': 'chorus',",
				"\t\t\t'melody': 'chorus',",
				"\t\t\t'blips': 'verse-3',",
				"\t\t\t'sub-tone': 'chorus',",
				"\t\t\t'sfx': 'verse-3',",
				"\t\t\t'summation': 'verse-3'",
				"\t\t},",
				"\t\tduration: 1",
				"\t},",
				"",
				"\t//",
				"",
				"\t{",
				"\t\tid: '5.01',",
				"\t\tname: 'verse-4',",
				"\t\ttracks: {",
				"\t\t\t'vocals-a': true,",
				"\t\t\t'machine-drum-a': 'chorus',",
				"\t\t\t'instrumental': 'chorus',",
				"\t\t\t'melody': 'chorus',",
				"\t\t\t'blips': true,",
				"\t\t\t'sub-tone': 'chorus',",
				"\t\t\t'sfx': true,",
				"\t\t\t'summation': 'verse-3'",
				"\t\t},",
				"\t\tduration: 1",
				"\t},",
				"\t{",
				"\t\tid: '5.02',",
				"\t\tname: 'verse-4',",
				"\t\ttracks: {",
				"\t\t\t'vocals-b': true,",
				"\t\t\t'machine-drum-a': 'chorus',",
				"\t\t\t'instrumental': 'chorus',",
				"\t\t\t'melody': 'chorus',",
				"\t\t\t'blips': 'verse-4',",
				"\t\t\t'sub-tone': 'chorus',",
				"\t\t\t'sfx': 'verse-4',",
				"\t\t\t'summation': 'verse-3'",
				"\t\t},",
				"\t\tduration: 1",
				"\t},",
				"\t{",
				"\t\tid: '5.03',",
				"\t\tname: 'verse-4',",
				"\t\ttracks: {",
				"\t\t\t'vocals-c': true,",
				"\t\t\t'machine-drum-a': 'chorus',",
				"\t\t\t'instrumental': 'chorus',",
				"\t\t\t'melody': 'chorus',",
				"\t\t\t'blips': 'verse-4',",
				"\t\t\t'sub-tone': 'chorus',",
				"\t\t\t'sfx': 'verse-4',",
				"\t\t\t'summation': 'verse-3'",
				"\t\t},",
				"\t\tduration: 1",
				"\t},",
				"\t{",
				"\t\tid: '5.04A',",
				"\t\tname: 'verse-4',",
				"\t\ttracks: {",
				"\t\t\t'vocals-d': true,",
				"\t\t\t'machine-drum-a': 'chorus',",
				"\t\t\t'instrumental': 'chorus',",
				"\t\t\t'melody': 'chorus',",
				"\t\t\t'blips': 'verse-4',",
				"\t\t\t'sub-tone': 'chorus',",
				"\t\t\t'sfx': 'verse-4',",
				"\t\t\t'summation': 'verse-3'",
				"\t\t},",
				"\t\tduration: 1",
				"\t},",
				"\t{",
				"\t\tid: '5.04B',",
				"\t\tname: 'verse-4',",
				"\t\ttracks: {",
				"\t\t\t'machine-drum-a': 'chorus',",
				"\t\t\t'instrumental': 'chorus',",
				"\t\t\t'melody': 'chorus',",
				"\t\t\t'blips': 'verse-4',",
				"\t\t\t'sub-tone': 'chorus',",
				"\t\t\t'sfx': 'verse-4',",
				"\t\t\t'summation': 'verse-3'",
				"\t\t},",
				"\t\tduration: 1",
				"\t},",
				"",
				"\t//",
				"",
				"\t{",
				"\t\tid: '6.01A',",
				"\t\tname: 'breakdown',",
				"\t\ttracks: {",
				"\t\t\t'vocals': true,",
				"\t\t\t'machine-drum-a': true,",
				"\t\t\t'instrumental': true,",
				"\t\t\t'melody': true,",
				"\t\t\t'blips': 'verse-4',",
				"\t\t\t'sub-tone': true,",
				"\t\t\t'sfx': true,",
				"\t\t\t'summation': true",
				"\t\t},",
				"\t\tduration: 1",
				"\t},",
				"\t{",
				"\t\tid: '6.01B',",
				"\t\tname: 'breakdown',",
				"\t\ttracks: {",
				"\t\t\t'machine-drum-a': true,",
				"\t\t\t'instrumental': true,",
				"\t\t\t'melody': true,",
				"\t\t\t'blips': 'verse-4',",
				"\t\t\t'sub-tone': true,",
				"\t\t\t'sfx': true,",
				"\t\t\t'summation': true",
				"\t\t},",
				"\t\tduration: 1",
				"\t},",
				"",
				"\t{",
				"\t\tid: '7.01A',",
				"\t\tname: 'outro',",
				"\t\ttracks: {",
				"\t\t\t'machine-drum-a': true,",
				"\t\t\t'instrumental': true,",
				"\t\t\t'blips': true,",
				"\t\t\t'sfx': true,",
				"\t\t\t'summation': true",
				"\t\t},",
				"\t\tduration: 1",
				"\t},",
				"\t{",
				"\t\tid: '7.01B',",
				"\t\tname: 'outro',",
				"\t\ttracks: {",
				"\t\t\t'machine-drum-a': true,",
				"\t\t\t'instrumental': true,",
				"\t\t\t'blips': true,",
				"\t\t\t'sfx': true,",
				"\t\t\t'summation': true",
				"\t\t},",
				"\t\tduration: 1",
				"\t}",
				"",
				"];",
				"",
				"var paused = true;",
				"var currentTime = 0;",
				"var needsToPlay = false;",
				"var duration = 0;",
				"var beats = 0;",
				"",
				"var manager = {",
				"",
				"\tunitDuration: 5.333, // In seconds",
				"\tstartTime: 0,",
				"",
				"\tsequence: sequence,",
				"",
				"\ttracks: {},",
				"",
				"\tanalysers: {",
				"\t\tlist: []",
				"\t},",
				"",
				"\tfilters: {",
				"\t\tlist: []",
				"\t},",
				"",
				"\tget paused() {",
				"\t\treturn paused;",
				"\t},",
				"",
				"\tget currentTime() {",
				"\t\tvar ctx = WebAudio.getContext();",
				"\t\tvar playing = !paused;",
				"\t\tif ( playing ) {",
				"\t\t\treturn ( ctx.currentTime - manager.startTime );",
				"\t\t}",
				"\t\treturn currentTime;",
				"\t},",
				"\tset currentTime( time ) {",
				"\t\tvar playing = !paused;",
				"\t\tif ( playing ) {",
				"\t\t\tmanager.pause();",
				"\t\t}",
				"\t\tcurrentTime = time;",
				"\t\tif ( playing ) {",
				"\t\t\tneedsToPlay = true;",
				"\t\t}",
				"\t},",
				"",
				"\tget beats() {",
				"\t\treturn beats;",
				"\t},",
				"\tget duration() {",
				"\t\treturn duration",
				"\t},",
				"",
				"\tpause: function() {",
				"\t\tfor ( var i = 0; i < sources.length; i++ ) {",
				"\t\t\tvar source = sources[ i ];",
				"\t\t\tsource.value.stop( 0 );",
				"\t\t}",
				"\t\tsources.length = 0;",
				"\t\tschedule.reset();",
				"\t\tif ( !paused ) {",
				"\t\t\tcurrentTime = manager.currentTime;",
				"\t\t}",
				"\t\tpaused = true;",
				"\t\treturn manager;",
				"\t},",
				"",
				"\tplay: function() {",
				"",
				"\t\tvar ctx = WebAudio.getContext();",
				"\t\tvar now = ctx.currentTime;",
				"\t\tvar startTime = 0;",
				"\t\tmanager.startTime = now - currentTime;",
				"",
				"\t\tfor ( var i = 0; i < sequence.length; i++ ) {",
				"",
				"\t\t\tvar segment = sequence[ i ];",
				"\t\t\tvar totalDuration = segment.duration * manager.unitDuration;",
				"",
				"\t\t\tif ( currentTime < startTime + totalDuration ) {",
				"",
				"\t\t\t\tfor ( var name in segment.tracks ) {",
				"",
				"\t\t\t\t\tvar sound = segment.tracks[ name ];",
				"\t\t\t\t\tvar buffer = sound.buffer;",
				"\t\t\t\t\tvar offset = currentTime - startTime;",
				"\t\t\t\t\tvar st = manager.startTime + startTime;",
				"\t\t\t\t\tvar et = st + totalDuration - offset;",
				"",
				"\t\t\t\t\tif ( st < 0 ) {",
				"\t\t\t\t\t\tst = 0;",
				"\t\t\t\t\t}",
				"",
				"\t\t\t\t\tif ( sound.track ) {",
				"",
				"\t\t\t\t\t\tif ( currentTime < startTime ) {",
				"\t\t\t\t\t\t\toffset = 0;",
				"\t\t\t\t\t\t\tet = st + totalDuration;",
				"\t\t\t\t\t\t}",
				"",
				"\t\t\t\t\t\tvar rate = sound.track.node.playbackRate;",
				"\t\t\t\t\t\tvar amount = rate > 1 ? Math.ceil( rate ) : 1;",
				"\t\t\t\t\t\tvar duration = totalDuration / rate;",
				"\t\t\t\t\t\tvar offsetPct = offset / duration;",
				"",
				"\t\t\t\t\t\tfor ( var j = 0; j < amount; j++ ) {",
				"",
				"\t\t\t\t\t\t\tvar source = {",
				"\t\t\t\t\t\t\t\t// Because `ctx.createBufferSource`",
				"\t\t\t\t\t\t\t\t// is an expensive call for the CPU",
				"\t\t\t\t\t\t\t\t// we need to offload the invocation",
				"\t\t\t\t\t\t\t\t// of it to the requestAnimationFrame",
				"\t\t\t\t\t\t\t\t// loop so that we can control the ",
				"\t\t\t\t\t\t\t\t// load on the CPU better. i.e: we're",
				"\t\t\t\t\t\t\t\t// controlling how many times",
				"\t\t\t\t\t\t\t\t// `createBufferSource` is being invoked",
				"\t\t\t\t\t\t\t\t// per animation frame.",
				"\t\t\t\t\t\t\t\tvalue: null,",
				"\t\t\t\t\t\t\t\tbuffer: buffer,",
				"\t\t\t\t\t\t\t\tloop: false,",
				"\t\t\t\t\t\t\t\tplaybackRate: rate,",
				"\t\t\t\t\t\t\t\tstartTime: st + j * duration,",
				"\t\t\t\t\t\t\t\t// See: https://developer.mozilla.org/en-US/docs/Web/API/AudioBufferSourceNode/start#Parameters",
				"\t\t\t\t\t\t\t\toffsetTime: totalDuration * ( offsetPct - j ),",
				"\t\t\t\t\t\t\t\tstopTime: et,",
				"\t\t\t\t\t\t\t\tparent: sound.track.node",
				"\t\t\t\t\t\t\t};",
				"",
				"\t\t\t\t\t\t\tif ( source.offsetTime < 0 ) {",
				"\t\t\t\t\t\t\t\tsource.offsetTime = 0;",
				"\t\t\t\t\t\t\t}",
				"",
				"\t\t\t\t\t\t\tif ( source.offsetTime <= totalDuration ) {",
				"\t\t\t\t\t\t\t\tschedule.push( source );",
				"\t\t\t\t\t\t\t}",
				"",
				"\t\t\t\t\t\t}",
				"",
				"\t\t\t\t\t}",
				"\t\t\t\t}",
				"",
				"\t\t\t}",
				"\t\t\t",
				"\t\t\tstartTime += totalDuration;",
				"",
				"\t\t}",
				"",
				"\t\tpaused = false;",
				"\t\tneedsToPlay = false;",
				"",
				"\t\treturn manager;",
				"",
				"\t},",
				"",
				"\t/**",
				"\t * Call on `requestAnimationFrame` or equivalent",
				"\t * to incrementally schedule `AudioBufferSourceNode`s",
				"\t * to the audio context's graph.",
				"\t */",
				"\tupdate: function() {",
				"",
				"\t\tif ( needsToPlay ) {",
				"\t\t\tmanager.play();",
				"\t\t}",
				"",
				"\t\tif ( scrobble.paused ) {",
				"",
				"\t\t\tvar i = schedule.index;",
				"\t\t\tvar limit = schedule.limit;",
				"\t\t\tvar length = Math.min( i + limit, schedule.length );",
				"",
				"\t\t\twhile ( i < length ) {",
				"",
				"\t\t\t\tvar source = schedule[ i ];",
				"\t\t\t\tvar startTime = source.startTime;",
				"\t\t\t\tvar stopTime = source.stopTime;",
				"\t\t\t\tvar offsetTime = source.offsetTime;",
				"",
				"\t\t\t\tsource.value = ctx.createBufferSource();",
				"\t\t\t\tsource.value.buffer = source.buffer;",
				"\t\t\t\tsource.value.loop = source.loop;",
				"\t\t\t\tsource.value.playbackRate.value = source.playbackRate;",
				"\t\t\t\tsource.value.start( startTime, offsetTime );",
				"\t\t\t\t// Due to Safari inconsistency we cannot schedule multiple stops",
				"\t\t\t\t// More info here: https://bugs.webkit.org/show_bug.cgi?id=180130",
				"\t\t\t\t// source.stop( stopTime );",
				"\t\t\t\tsource.value.connect( source.parent );",
				"\t\t\t\tsources.push( source );",
				"",
				"\t\t\t\ti++;",
				"",
				"\t\t\t}",
				"",
				"\t\t\tschedule.index = length;",
				"",
				"\t\t\tif ( schedule.index >= schedule.length ) {",
				"\t\t\t\tschedule.reset();",
				"\t\t\t}",
				"",
				"\t\t} else {",
				"",
				"\t\t\t// If we're scrubbing then",
				"\t\t\t// don't cue any audio tracks",
				"\t\t\t// to be played, because we're",
				"\t\t\t// faking the \"vinyl DJ scratch\"",
				"\t\t\t// effect through the scrobble",
				"\t\t\t// `WebAudio` object.",
				"\t\t\tschedule.reset();",
				"",
				"\t\t}",
				"",
				"\t\treturn manager;",
				"",
				"\t},",
				"",
				"\tupdateFFT: function() {",
				"",
				"\t\tmanager.analyser.getByteTimeDomainData( manager.analyser.data );",
				"",
				"\t\tfor ( var i = 0; i < manager.analysers.list.length; i++ ) {",
				"\t\t\tvar analyser = manager.analysers.list[ i ];",
				"\t\t\tanalyser.getByteFrequencyData( analyser.data );",
				"\t\t}",
				"",
				"\t\treturn manager;",
				"",
				"\t},",
				"",
				"\taddTrack: function( name, clips ) {",
				"",
				"\t\tvar ctx = WebAudio.getContext();",
				"",
				"\t\tvar key = name.replace( /\\-[a-zA-Z]$/i, '' );",
				"\t\tvar analyser = manager.analysers[ key ];",
				"\t\tvar filter = manager.filters[ key ];",
				"",
				"\t\tif ( !( key in manager.analysers ) ) {",
				"\t\t\tanalyser = createAnalyser( ctx );",
				"\t\t\tanalyser.name = key;",
				"\t\t\tmanager.analysers[ key ] = analyser;",
				"\t\t\tmanager.analysers.list.push( analyser );",
				"\t\t}",
				"",
				"\t\tif ( !( key in manager.filters ) ) {",
				"\t\t\tfilter = createFilter( ctx );",
				"\t\t\tfilter.name = key;",
				"\t\t\tmanager.filters[ key ] = filter;",
				"\t\t\tmanager.filters.list.push( filter );",
				"\t\t\t// filter.connect( manager.destination );",
				"\t\t}",
				"",
				"\t\tvar track = {",
				"\t\t\tname: name,",
				"\t\t\tclips: clips,",
				"\t\t\tnode: filter",
				"\t\t};",
				"",
				"\t\tfor ( var i = 0; i < clips.length; i++ ) {",
				"\t\t\tvar clip = clips[ i ];",
				"\t\t\tif ( clip && !clip.connected ) {",
				"\t\t\t\tclip.track = track;",
				"\t\t\t\tclip.connect( track.node );",
				"\t\t\t\tclip.connected = true;",
				"\t\t\t}",
				"\t\t}",
				"",
				"\t\ttrack.node.connect( manager.analysers[ key ] );",
				"",
				"\t\tmanager.tracks[ name ] = track;",
				"",
				"\t\treturn track;",
				"",
				"\t}",
				"",
				"};",
				"",
				"var i, name, sound, url, property;",
				"var ua = navigator.userAgent;",
				"var isMP3 = ( !!ua.match( /Safari/ig ) && !ua.match( /Chrome/ig ) ) || !!ua.match( /Edge/ig );",
				"var ctx = WebAudio.getContext();",
				"var extension = isMP3 ? 'mp3' : 'ogg';",
				"",
				"THREE.AudioContext.setContext( ctx );",
				"",
				"for ( i = 0; i < sequence.length; i++ ) {",
				"",
				"\tvar segment = sequence[ i ];",
				"\tduration += segment.duration * manager.unitDuration;",
				"\tbeats += segment.duration * 4;",
				"\t",
				"\tfor ( name in tracks ) {",
				"",
				"\t\tsound = null;",
				"\t\turl = getURL( segment.name + '-' + name );",
				"",
				"\t\tif ( segment.tracks[ name ] ) {",
				"",
				"\t\t\tswitch ( typeof segment.tracks[ name ] ) {",
				"\t\t\t\tcase 'object':",
				"\t\t\t\t\tsound = new WebAudio();",
				"\t\t\t\t\tsound.onLoad = resources.queue();",
				"\t\t\t\t\tsound.src = url;",
				"\t\t\t\t\tfor ( property in segment.tracks[ name ] ) {",
				"\t\t\t\t\t\tsound[ property ] = segment.tracks[ name ][ property ];",
				"\t\t\t\t\t}",
				"\t\t\t\t\tsound.section = segment.name;",
				"\t\t\t\t\tbreak;",
				"\t\t\t\tcase 'string':",
				"\t\t\t\t\tsound = getSoundByTrackNameAndSection( name, segment.tracks[ name ] );",
				"\t\t\t\t\tbreak;",
				"\t\t\t\tcase 'boolean':",
				"\t\t\t\t\t// Create a new sound",
				"\t\t\t\t\tsound = new WebAudio();",
				"\t\t\t\t\tsound.onLoad = resources.queue();",
				"\t\t\t\t\tsound.src = url;",
				"\t\t\t\t\tsound.section = segment.name;",
				"\t\t\t\t\tbreak;",
				"\t\t\t}",
				"",
				"\t\t\t// Overwrite data saved to have",
				"\t\t\t// convenient access to the sound",
				"\t\t\tsegment.tracks[ name ] = sound;",
				"",
				"\t\t}",
				"",
				"\t\ttracks[ name ].push( sound );",
				"",
				"\t}",
				"",
				"}",
				"",
				"// Initialize Audio Manager",
				"",
				"var ctx = WebAudio.getContext();",
				"",
				"manager.master = ctx.createGain();",
				"manager.master.connect( ctx.destination );",
				"",
				"manager.destination = ctx.createGain();",
				"manager.destination.connect( manager.master );",
				"",
				"manager.analyser = createAnalyser( ctx );",
				"manager.destination.connect( manager.analyser );",
				"",
				"for ( name in tracks ) {",
				"\tmanager.addTrack( name, tracks[ name ] );",
				"}",
				"",
				"manager.analysers.list.sort( ranking.comparator );",
				"manager.filters.list.sort( ranking.comparator );",
				"",
				"// Loopable Scrobble Effect",
				"",
				"var scrobble = manager.scrobble = new WebAudio();",
				"scrobble.onLoad = resources.queue();",
				"scrobble.src = getURL( 'loopable-scrobble' );",
				"scrobble.loop = true;",
				"scrobble.connect( manager.destination );",
				"",
				"//",
				"",
				"function getSoundByTrackNameAndSection( track, section ) {",
				"",
				"\tvar list = tracks[ track ];",
				"\tvar regex = new RegExp( section, 'i' );",
				"",
				"\tfor ( var i = 0; i < list.length; i++ ) {",
				"\t\tvar item = list[ i ];",
				"\t\tif ( item && regex.test( item.section ) ) {",
				"\t\t\treturn item;",
				"\t\t}",
				"\t}",
				"",
				"\treturn null;",
				"",
				"}",
				"",
				"function createAnalyser( ctx ) {",
				"",
				"\tvar analyser = ctx.createAnalyser();",
				"\tanalyser.fftSize = 32;",
				"\tanalyser.data = new Uint8Array( analyser.frequencyBinCount );",
				"",
				"\treturn analyser;",
				"}",
				"",
				"function createFilter( ctx ) {",
				"",
				"    var node = ctx.createGain();",
				"\tnode.gain.value = 0.85;",
				"\tnode.playbackRate = 1;",
				"\tnode.setTransform = function( line ) {",
				"",
				"\t\tvar rate = 1;",
				"",
				"\t\tswitch ( line ) {",
				"\t\t\tcase - 2:",
				"\t\t\t\trate = 0.50;",
				"\t\t\t\tbreak;",
				"\t\t\tcase - 1:",
				"\t\t\t\trate = 0.75;",
				"\t\t\t\tbreak;",
				"\t\t\tcase 0:",
				"\t\t\t\trate = 1.00;",
				"\t\t\t\tbreak;",
				"\t\t\tcase 1:",
				"\t\t\t\trate = 1.25;",
				"\t\t\t\tbreak;",
				"\t\t\tcase 2:",
				"\t\t\t\trate = 1.50;",
				"\t\t\t\tbreak;",
				"\t\t\tdefault:",
				"\t\t\t\trate = 1;",
				"\t\t}",
				"",
				"\t\tif ( rate !== node.playbackRate ) {",
				"\t\t\t// Reset audio scheduling and",
				"\t\t\t// update the `playbackRate` value",
				"\t\t\tvar playing = !paused;",
				"\t\t\tif ( playing ) {",
				"\t\t\t\tmanager.pause();",
				"\t\t\t}",
				"\t\t\tnode.playbackRate = rate;",
				"\t\t\tif ( playing ) {",
				"\t\t\t\tneedsToPlay = true;",
				"\t\t\t}",
				"\t\t}",
				"",
				"\t};",
				"",
				"    return node;",
				"",
				"}",
				"",
				"function getURL( name ) {",
				"\treturn params.rootPath + '/v2/' + name + '.' + extension;",
				"}",
				"",
				"resources.set( 'audio-manager', manager );"
			]
		],
		[
			"AlternateGothic3D",
			[
				"var callbacks = [];",
				"var ready = false;",
				"",
				"var queue = resources.queue();",
				"var link = document.createElement( 'link' );",
				"",
				"link.onerror = failed;",
				"link.onload = loaded;",
				"",
				"link.setAttribute( 'rel', 'stylesheet' );",
				"link.setAttribute( 'href', '//use.typekit.net/cjj0tob.css' );",
				"",
				"document.head.appendChild( link );",
				"",
				"var geometry = new THREE.PlaneBufferGeometry( 1, 1, 4, 4 );",
				"var material = new THREE.ShaderMaterial( {",
				"\tuniforms: {",
				"\t\tflipped: { type: 'b', value: false },",
				"\t\timage: { type: 't', value: null },",
				"\t\tinner: { type: 'f', value: 0.75 },",
				"\t\touter: { type: 'f', value: 0.98 },",
				"\t\topacity: { type: 'f', value: 1 }",
				"\t},",
				"\tvertexShader: [",
				"",
				"\t\t'uniform float inner;',",
				"\t\t'uniform float outer;',",
				"\t\t",
				"\t\t'varying vec2 vUv;',",
				"",
				"\t\t'void main() {',",
				"",
				"\t\t\t'vUv = uv;',",
				"\t\t\t'vec3 pos = vec3( position.xyz );',",
				"",
				"\t\t\t'vec4 mvPosition = modelViewMatrix * vec4( pos, 1.0 );',",
				"\t\t\t'gl_Position = projectionMatrix * mvPosition;',",
				"",
				"\t\t'}'",
				"",
				"\t].join( '\\n' ),",
				"\tfragmentShader: [",
				"",
				"\t\t'uniform bool flipped;',",
				"\t\t'uniform sampler2D image;',",
				"\t\t'uniform float opacity;',",
				"",
				"\t\t'varying vec2 vUv;',",
				"",
				"\t\t'void main() {',",
				"",
				"\t\t\t'vec2 uv = vec2( vUv.xy );',",
				"\t\t\t'if ( flipped ) {',",
				"\t\t\t\t'uv.x = 1.0 - uv.x;',",
				"\t\t\t'}',",
				"\t\t\t'vec4 texel = texture2D( image, uv );',",
				"\t\t\t'gl_FragColor = vec4( texel.rgb, texel.a * opacity );',",
				"",
				"\t\t'}'",
				"",
				"\t].join( '\\n' ),",
				"\twireframe: false,",
				"\ttransparent: true,",
				"\t// depthTest: false,",
				"\t// depthWrite: false,",
				"\tside: THREE.DoubleSide",
				"} );",
				"",
				"geometry.rotateX( - Math.PI / 2 );",
				"",
				"function loaded() {",
				"",
				"\tif ( loaded.completed ) {",
				"\t\treturn;",
				"\t}",
				"",
				"\tupdateText( 'force ctx text' );",
				"",
				"\tsetTimeout( function() {",
				"\t\tfor ( var i = 0; i < callbacks.length; i++ ) {",
				"\t\t\tcallbacks[ i ]();",
				"\t\t}",
				"\t\tcallbacks.length = 0;",
				"\t\tready = true;",
				"\t\tqueue();",
				"\t}, 1000 );",
				"",
				"\tloaded.completed = true;",
				"",
				"}",
				"",
				"function failed() {",
				"",
				"\tTwo.Text.Ratio = 1;",
				"\tloaded();",
				"",
				"}",
				"",
				"function updateText( text, styles ) {",
				"",
				"\tvar resolution = ( styles && styles.resolution ) ? styles.resolution : 2; ",
				"\tvar two = new Two( {",
				"\t\ttype: Two.Types.canvas,",
				"\t\twidth: 128,",
				"\t\theight: 128,",
				"\t\tratio: resolution",
				"\t} );",
				"",
				"\ttwo.scene.translation.set( two.width / 2, two.height / 2 );",
				"",
				"\tvar message = two.makeText('', 0, 0, {",
				"\t\tfamily: 'alternate-gothic-no-3-d, sans-serif',",
				"\t\tweight: 400,",
				"\t\tsize: 13,",
				"\t\tleading: 0,",
				"\t\tbaseline: 'middle'",
				"\t} );",
				"",
				"\tif ( styles && styles.fill ) {",
				"\t\tmessage.fill = styles.fill;",
				"\t} else {",
				"\t\tmessage.fill = 'transparent';",
				"\t}",
				"\tif ( styles && styles.stroke ) {",
				"\t\tmessage.stroke = styles.stroke;",
				"\t} else {",
				"\t\tmessage.stroke = '#000';",
				"\t}",
				"",
				"\tmessage.value = text;",
				"\tmessage.scale = 1;  // Reset",
				"",
				"    var rect = message.getBoundingClientRect( true );",
				"    var scale = Math.min( two.width / rect.width, two.height / rect.height );",
				"",
				"\tscale *= 0.75;",
				"",
				"    message.scale = scale;",
				"\tif ( styles && styles.linewidth ) {",
				"\t\tmessage.linewidth = styles.linewidth;",
				"\t} else {",
				"\t\tmessage.linewidth = 1 / scale;",
				"\t}",
				"",
				"\ttwo.update();",
				"",
				"\treturn {",
				"\t\tcanvas: two.renderer.domElement,",
				"\t\tscale: scale",
				"\t};",
				"",
				"}",
				"",
				"resources.set( 'alternate-gothic-3d', {",
				"",
				"\tready: function( func ) {",
				"\t\tif ( ready ) {",
				"\t\t\tfunc();",
				"\t\t} else {",
				"\t\t\tcallbacks.push( func );",
				"\t\t}",
				"\t},",
				"",
				"\tget: updateText,",
				"\t",
				"\tcreate: function( text, styles ) {",
				"",
				"\t\tvar result = updateText( text, styles );",
				"\t\tvar canvas = result.canvas;",
				"\t\tvar texture = new THREE.Texture( canvas );",
				"\t\tvar mesh = new THREE.Mesh( geometry, material.clone() );",
				"",
				"\t\ttexture.minFilter = THREE.LinearFilter;",
				"\t\ttexture.magFilter = THREE.LinearFilter;",
				"\t\ttexture.generateMipMaps = false;",
				"\t\ttexture.needsUpdate = true;",
				"",
				"\t\tmesh.material.uniforms.image.value = texture;",
				"\t\tmesh.userData.scale = result.scale;",
				"\t\tmesh.renderOrder = 450;",
				"",
				"\t\treturn mesh;",
				"",
				"\t}",
				"",
				"} );"
			]
		],
		[
			"Scene",
			[
				"var scene = new THREE.Scene();",
				"",
				"resources.set( 'scene', scene );"
			]
		],
		[
			"Camera",
			[
				"var scene = resources.get( 'scene' );",
				"var manager = resources.get( 'audio-manager' );",
				"",
				"var camera = new THREE.PerspectiveCamera( 60, window.innerWidth / window.innerHeight, .05, 100 );",
				"",
				"camera.userData.listener = new THREE.AudioListener();",
				"",
				"// Swap out the stock Gain node with",
				"// a custom WYDK Gain node tied to the `audio-manager`",
				"camera.userData.listener.gain.disconnect( camera.userData.listener.context );",
				"camera.userData.listener.gain = manager.destination;",
				"",
				"camera.add( camera.userData.listener );",
				"",
				"var group = new THREE.Group();",
				"group.position.set( 0, 0, 0 );",
				"",
				"group.rotation.y = - 0.5 * Math.PI;",
				"",
				"group.add( camera );",
				"scene.add( group );",
				"",
				"resources.set( 'camera', camera );"
			]
		],
		[
			"Renderer",
			[
				"var scene = resources.get( 'scene' );",
				"var camera = resources.get( 'camera' );",
				"",
				"var renderer = new THREE.WebGLRenderer( {",
				"\tantialias: true,",
				"\tpreserveDrawingBuffer: false",
				"} );",
				"renderer.setClearColor( 0x000000, 1 );",
				"renderer.setPixelRatio( window.devicePixelRatio );",
				"",
				"renderer.shadowMap.enabled = true;",
				"// renderer.shadowMap.type = THREE.BasicShadowMap;",
				"// renderer.shadowMap.type = THREE.PCFSoftShadowMap;",
				"",
				"var domElement = resources.get( 'dom' );",
				"domElement.appendChild( renderer.domElement );",
				"",
				"resize();",
				"window.addEventListener( 'resize', resize, false );",
				"",
				"function resize() {",
				"",
				"\tvar rect = domElement.getBoundingClientRect();",
				"\tvar width = rect.width;",
				"\tvar height = rect.height;",
				"",
				"\tcamera.aspect = width / height;",
				"\tcamera.updateProjectionMatrix();",
				"",
				"\trenderer.setSize( width, height );",
				"\tscene.dispatchEvent( { type: 'resize' } );",
				"",
				"}",
				"",
				"resources.set( 'renderer', renderer );"
			]
		],
		[
			"Backdrop",
			[
				"var scene = resources.get( 'scene' );",
				"var params = resources.get( 'params' );",
				"",
				"var backdrop = new THREE.Mesh(",
				"\tnew THREE.SphereBufferGeometry( 7.5, 16, 16 ),",
				"\tnew THREE.ShaderMaterial( {",
				"",
				"\t\tuniforms: {",
				"\t\t\tcSource: { type: 'c', value: new THREE.Color( 0x000000 ) },",
				"\t\t\tcTarget: { type: 'c', value: new THREE.Color( 0x000000 ) },",
				"\t\t\tambient: { type: 'f', value: 1 }",
				"\t\t},",
				"",
				"\t\tvertexShader: [",
				"",
				"\t\t\t'varying vec2 vUv;',",
				"",
				"\t\t\t'void main() {',",
				"",
				"\t\t\t\t'vUv = uv;',",
				"\t\t\t\t'gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',",
				"",
				"\t\t\t'}'",
				"",
				"\t\t].join( '\\n' ),",
				"",
				"\t\tfragmentShader: [",
				"",
				"\t\t\t'uniform vec3 cSource;',",
				"\t\t\t'uniform vec3 cTarget;',",
				"\t\t\t'uniform float ambient;',",
				"",
				"\t\t\t'varying vec2 vUv;',",
				"\t\t\t",
				"\t\t\t'void main() {',",
				"",
				"\t\t\t\t'vec3 pigment = mix( cSource, cTarget, vUv.y );',",
				"\t\t\t\t'gl_FragColor = vec4( ambient * pigment.rgb, 1.0 );',",
				"",
				"\t\t\t'}'",
				"",
				"\t\t].join( '\\n' ),",
				"\t\t",
				"\t\tside: THREE.BackSide",
				"",
				"\t} )",
				");",
				"",
				"backdrop.userData.cSource = new THREE.Color( 0x000000 );",
				"backdrop.userData.cTarget = new THREE.Color( 0x000000 );",
				"",
				"backdrop.userData.setSourceColor = function ( color ) {",
				"\tbackdrop.userData.cSource.set( color );",
				"\treturn backdrop;",
				"};",
				"",
				"backdrop.userData.setTargetColor = function ( color ) {",
				"\tbackdrop.userData.cTarget.set( color );",
				"\treturn backdrop;",
				"};",
				"",
				"backdrop.userData.update = function ( progress, intensity ) {",
				"",
				"\tvar source = backdrop.userData.cSource;",
				"\tvar target = backdrop.userData.cTarget;",
				"",
				"\tif ( !backdrop.material.uniforms.cSource.value.equals( source ) ) {",
				"\t\tbackdrop.material.uniforms.cSource.value.lerp( source, params.drag );",
				"\t}",
				"\tif ( !backdrop.material.uniforms.cTarget.value.equals( target ) ) {",
				"\t\tbackdrop.material.uniforms.cTarget.value.lerp( target, params.drag );",
				"\t}",
				"",
				"\tbackdrop.material.uniforms.ambient.value = intensity;",
				"",
				"\treturn backdrop;",
				"",
				"};",
				"",
				"scene.add( backdrop );",
				"",
				"resources.set( 'backdrop', backdrop );"
			]
		],
		[
			"Interaction",
			[
				"var camera = resources.get( 'camera' );",
				"var renderer = resources.get( 'renderer' );",
				"var backdrop = resources.get( 'backdrop' );",
				"",
				"var interaction = new Interaction( renderer, camera );",
				"",
				"interaction.autoHideControllers = true;",
				"interaction.connect();",
				"",
				"for ( var i = 0; i < interaction.XRControllers.length; i++ ) {",
				"\tvar controller = interaction.XRControllers[ i ];",
				"\tvar laser = controller.userData.laser;",
				"\tvar material = laser.material;",
				"\tmaterial.emissive = backdrop.material.uniforms.cSource.value;",
				"}",
				"",
				"resources.set( 'interaction', interaction );"
			]
		],
		[
			"Ring",
			[
				"var TWO_PI = Math.PI * 2;",
				"var HALF_PI = Math.PI / 2;",
				"",
				"var scene = resources.get( 'scene' );",
				"var backdrop = resources.get( 'backdrop' );",
				"var manager = resources.get( 'audio-manager' );",
				"",
				"var radius = 2;",
				"var thickness = 0.33 * 2;",
				"var radialSegments = 4;",
				"var tubularSegments = 512;",
				"",
				"var vector = new THREE.Vector3();",
				"var bonesNeedUpdate = true;",
				"",
				"var geometry = new THREE.TorusBufferGeometry( radius, thickness / 2, radialSegments, tubularSegments );",
				"",
				"var data = new Uint8Array( [ 255, 255, 255, 0, 0, 0 ] );",
				"var texture = new THREE.DataTexture( data, 1, 2, THREE.RGBFormat );",
				"texture.wrapS = THREE.RepeatWrapping;",
				"texture.wrapT = THREE.RepeatWrapping;",
				"texture.magFilter = THREE.NearestFilter;",
				"texture.repeat.set( 1, 0.5 );",
				"texture.needsUpdate = true;",
				"",
				"var material = new THREE.MeshStandardMaterial( {",
				"\tskinning: true,",
				"\tmetalness: 0.1,",
				"\troughness: 0.5,",
				"\troughnessMap: texture,",
				"\tmetalnessMap: texture,",
				"\talphaMap: texture,",
				"\tside: THREE.DoubleSide",
				"} );",
				"",
				"material.color = backdrop.material.uniforms.cSource.value;",
				"geometry.rotateX( Math.PI / 2 );",
				"",
				"var splines = {",
				"\tpositions: [],",
				"\trotations: [],",
				"\tscales: []",
				"};",
				"",
				"var bones = [];",
				"var amount = 24;",
				"var root = new THREE.Bone();",
				"bones.push( root );",
				"",
				"for ( var i = 0; i < amount; i++ ) {",
				"",
				"\tvar pct = i / amount;",
				"\tvar theta = pct * TWO_PI;",
				"\tvar bone = new THREE.Bone();",
				"",
				"\tbone.position.x = radius * Math.cos( theta );",
				"\tbone.position.z = radius * Math.sin( theta );",
				"\tbone.rotation.order = 'YXZ';",
				"\tbone.rotation.y = Math.atan2( - bone.position.x, - bone.position.z );",
				"",
				"\tvar position = bone.position.clone();",
				"\tposition.theta = theta;",
				"\tsplines.positions.push( position );",
				"",
				"\tbone.userData.theta = theta;",
				"\tbone.userData.euler = new THREE.Euler().copy( bone.rotation );",
				"",
				"\troot.add( bone );",
				"\tbones.push( bone );",
				"\t",
				"\tif ( i < manager.analysers.list.length ) {",
				"",
				"\t\tpct = i / manager.analysers.list.length;",
				"\t\ttheta = pct * TWO_PI;",
				"",
				"\t\tvar ct = Math.cos( theta );",
				"\t\tvar st = Math.sin( theta );",
				"",
				"\t\tvar rotation = new THREE.Vector3( ct, 0, st );",
				"\t\tvar scale = new THREE.Vector3( ct, 1, st );",
				"",
				"\t\tsplines.rotations.push( rotation );",
				"\t\tsplines.scales.push( scale );",
				"",
				"\t}",
				"",
				"}",
				"",
				"var distanceBetweenBones = bones[ 5 ].position.distanceTo( bones[ 6 ].position );",
				"var positions = geometry.attributes.position;",
				"",
				"var weightResolution = 4;",
				"var indices = [];",
				"var weights = [];",
				"",
				"var v1 = new THREE.Vector3();",
				"var v2 = new THREE.Vector3();",
				"",
				"var sortedBones = [];",
				"",
				"for ( var i = 0; i < bones.length; i ++ ) {",
				"",
				"\tvar bone = bones[ i ];",
				"\tsortedBones.push( { id: i, bone: bone, distance: 0 } );",
				"",
				"}",
				"",
				"function getNearestBones( vertex ) {",
				"",
				"\tfor ( var i = 0; i < sortedBones.length; i ++ ) {",
				"",
				"\t\tvar boneData = sortedBones[ i ];",
				"\t\tboneData.bone.getWorldPosition( v2 );",
				"\t\tboneData.distance = vertex.distanceTo( v2 );",
				"",
				"\t}",
				"",
				"\tsortedBones.sort( function ( a, b ) { return a.distance - b.distance } );",
				"",
				"\treturn sortedBones;",
				"",
				"}",
				"",
				"for ( var i = 0, j = 0; i < positions.count * weightResolution; i += weightResolution, j += 3 ) {",
				"",
				"\tv1.fromArray( positions.array, j );",
				"",
				"\tvar data = getNearestBones( v1 );",
				"",
				"\tvar d0 = data[ 0 ];",
				"\tvar d1 = data[ 1 ];",
				"\tvar d2 = data[ 2 ];",
				"\tvar d3 = data[ 3 ];",
				"\t",
				"\tvar dd0 = d0.distance;",
				"\tvar dd1 = d1.distance;",
				"\tvar dd2 = d2.distance;",
				"\tvar dd3 = d3.distance;",
				"",
				"\tvar shortest = dd0;",
				"\tvar farthest = dd3;",
				"\tvar spread = distanceBetweenBones;",
				"\tvar smooth = TWEEN.Easing.Sinusoidal.Out;",
				"",
				"\tvar wd0 = ( ( dd0 - shortest ) / spread );",
				"\tvar wd1 = ( ( dd1 - shortest ) / spread );",
				"\tvar wd2 = ( ( dd2 - shortest ) / spread );",
				"\tvar wd3 = ( ( dd3 - shortest ) / spread );",
				"",
				"\twd0 = Math.min( wd0, 1 );",
				"\twd1 = Math.min( wd1, 1 );",
				"\twd2 = Math.min( wd2, 1 );",
				"\twd3 = Math.min( wd3, 1 );",
				"",
				"\twd0 = smooth( wd0 );",
				"\twd1 = smooth( wd1 );",
				"\twd2 = smooth( wd2 );",
				"\twd3 = smooth( wd3 );",
				"",
				"\twd0 = Math.floor( 100 * wd0 ) / 100;",
				"\twd1 = Math.floor( 100 * wd1 ) / 100;",
				"\twd2 = Math.floor( 100 * wd2 ) / 100;",
				"\twd3 = Math.floor( 100 * wd3 ) / 100;",
				"",
				"\twd0 = 1 - wd0;",
				"\twd1 = 1 - wd1;",
				"\twd2 = 1 - wd2;",
				"\twd3 = 1 - wd3;",
				"",
				"\tvar sum = wd0 + wd1 + wd2 + wd3;",
				"",
				"\twd0 /= sum;",
				"\twd1 /= sum;",
				"\twd2 /= sum;",
				"\twd3 /= sum;",
				"",
				"\tindices[ i + 0 ] = d0.id;",
				"\tindices[ i + 1 ] = d1.id;",
				"\tindices[ i + 2 ] = d2.id;",
				"\tindices[ i + 3 ] = d3.id;",
				"",
				"\tweights[ i + 0 ] = wd0;",
				"\tweights[ i + 1 ] = wd1;",
				"\tweights[ i + 2 ] = wd2;",
				"\tweights[ i + 3 ] = wd3;",
				"",
				"}",
				"",
				"geometry.addAttribute( 'skinIndex', new THREE.Float32BufferAttribute( indices, weightResolution ) );",
				"geometry.addAttribute( 'skinWeight', new THREE.Float32BufferAttribute( weights, weightResolution ) );",
				"",
				"var torus = new THREE.SkinnedMesh( geometry, material );",
				"",
				"torus.receiveShadow = true;",
				"",
				"torus.userData.splineResolution = manager.analysers.list.length;",
				"torus.userData.root = root;",
				"torus.userData.radius = radius;",
				"torus.userData.thickness = thickness;",
				"torus.userData.texture = texture;",
				"",
				"torus.add( root );",
				"torus.bind( new THREE.Skeleton( bones ) );",
				"scene.add( torus );",
				"",
				"// Generate Spline from Bones",
				"",
				"geometry = new THREE.BufferGeometry();",
				"geometry.addAttribute(",
				"\t'position', ",
				"\tnew THREE.BufferAttribute( new Float32Array( tubularSegments * 3 ), 3 )",
				");",
				"",
				"splines.positions = new THREE.CatmullRomCurve3( splines.positions, true );",
				"splines.rotations = new THREE.CatmullRomCurve3( splines.rotations, true );",
				"splines.scales = new THREE.CatmullRomCurve3( splines.scales, true );",
				"",
				"splines.mesh = new THREE.Line( geometry, new THREE.LineBasicMaterial( {",
				"\tcolor: 'yellow'",
				"} ) );",
				"",
				"splines.mesh.visible = false;",
				"",
				"torus.userData.splines = splines;",
				"torus.userData.update = update;",
				"torus.userData.normalToRadians = normalToRadians;",
				"torus.userData.setPositionY = setPositionY;",
				"torus.userData.setTwist = setTwist;",
				"torus.userData.setScale = setScale;",
				"",
				"function update () {",
				"",
				"\tvar position, t, i, bone;",
				"\t",
				"\tif ( !bonesNeedUpdate ) {",
				"\t\treturn;",
				"\t}",
				"",
				"\tbonesNeedUpdate = false;",
				"",
				"\tif ( splines.mesh.visible ) {",
				"",
				"\t\tposition = geometry.attributes.position;",
				"\t\t",
				"\t\tfor ( i = 0; i < tubularSegments; i++ ) {",
				"\t\t\tt = i / ( tubularSegments - 1 );",
				"\t\t\tsplines.positions.getPoint( t, vector );",
				"\t\t\tposition.setXYZ( i, vector.x, vector.y, vector.z );",
				"\t\t}",
				"",
				"\t\tposition.needsUpdate = true;",
				"",
				"\t}",
				"\t",
				"\tfor ( i = 0; i < root.children.length; i++ ) {",
				"",
				"\t\tbone = root.children[ i ];",
				"\t\tt = bone.userData.theta / TWO_PI;",
				"",
				"\t\t// TODO: Is there a way to speed up or cache",
				"\t\t// calculation? Maybe offload to a Data texture?",
				"\t\tsplines.positions.getPoint( t, bone.position );",
				"\t\tsplines.positions.getPoint( t + 0.001, vector );",
				"",
				"\t\t// Calculate Angle Offset to keep Bone",
				"\t\t// \"up\" vector bent for a smooth curve",
				"\t\tvar hypotenuse = vector.distanceTo( bone.position );",
				"\t\tvar opposite = vector.y - bone.position.y;",
				"\t\tbone.rotation.z = Math.asin( opposite / hypotenuse );",
				"",
				"\t\t// Calculate the ring's twist, aka the Bone rotation",
				"\t\tsplines.rotations.getPoint( t, vector );",
				"\t\tbone.rotation.x = normalToRadians( vector.y );",
				"",
				"\t\t// Calculate the scale of the Bone",
				"\t\tsplines.scales.getPoint( t, vector );",
				"\t\tbone.scale.x = vector.y;",
				"\t\tbone.scale.y = vector.y;",
				"\t\tbone.scale.z = vector.y;",
				"",
				"\t}",
				"\t\t",
				"\treturn torus;",
				"",
				"}",
				"",
				"/**",
				" * @param y - in world space, 0 is default. Can be negative",
				" */",
				"function setPositionY ( index, y ) {",
				"\tvar points = splines.positions.points;",
				"\tpoints[ index % points.length ].y = y;",
				"\tbonesNeedUpdate = true;",
				"\treturn torus.userData;",
				"}",
				"",
				"/**",
				" * @param rotation - 0 to 1",
				" */",
				"function setTwist ( index, rotation ) {",
				"\tvar points = splines.rotations.points;",
				"\tpoints[ index % points.length ].y = rotation;",
				"\tbonesNeedUpdate = true;",
				"\treturn torus.userData;",
				"}",
				"",
				"/**",
				" * @param scale - 0 to 1",
				" */",
				"function setScale ( index, scale ) {",
				"\tvar points = splines.scales.points;",
				"\tpoints[ index % points.length ].y = scale;",
				"\tbonesNeedUpdate = true;",
				"\treturn torus.userData;",
				"};",
				"",
				"/**",
				" * Used in conjunction with `splines.rotations`",
				" * in order to transform the smooth change of 0 to 1",
				" * into radians with a maximum twist range, `radius`.",
				" */",
				"function normalToRadians ( v ) {",
				"\tvar radius = 0.66;",
				"\treturn Math.PI * v * radius;",
				"}",
				"",
				"resources.set( 'ring', torus );"
			]
		],
		[
			"Button",
			[
				"Interaction.DefaultColor = 0x00ffc8;",
				"",
				"var geometries = {",
				"\tcircle: new THREE.SphereBufferGeometry( 0.005, 32, 32 ),",
				"\tsquare: new THREE.BoxBufferGeometry( 0.01, 0.01, 0.01 ),",
				"\tcone: new THREE.CylinderBufferGeometry( 0, 0.33, 1, 32 )",
				"};",
				"",
				"var materials = {",
				"\tinner: new THREE.MeshBasicMaterial( {",
				"\t\tcolor: Interaction.DefaultColor,",
				"\t\ttransparent: true,",
				"\t\topacity: 0.9",
				"\t} ),",
				"\touter: new THREE.MeshBasicMaterial( {",
				"\t\tcolor: 0x333333,",
				"\t\tside: THREE.BackSide,",
				"\t\ttransparent: true,",
				"\t\tblending: THREE.AdditiveBlending",
				"\t} )",
				"};",
				"",
				"geometries.cone.rotateX( Math.PI / 2 );",
				"",
				"function animateIn() {",
				"\tthis.userData.outline.userData.animateIn();",
				"}",
				"",
				"function animateOut() {",
				"\tthis.userData.outline.userData.animateOut();",
				"}",
				"",
				"resources.set( 'Button', {",
				"",
				"\tcreate: function( size, type ) {",
				"",
				"\t\tvar geometry;",
				"\t\t",
				"\t\tif ( !type ) {",
				"\t\t\ttype = 'circle';",
				"\t\t}",
				"",
				"\t\tgeometry = geometries[ type ].clone();",
				"\t\tgeometry.scale( size, size, size );",
				"",
				"\t\tvar button = new THREE.Mesh( geometry, materials.inner );",
				"\t\tvar outline = new THREE.Mesh( button.geometry, materials.outer );",
				"",
				"\t\tbutton.renderOrder = 49;",
				"\t\toutline.renderOrder = 50;",
				"",
				"\t\toutline.userData.tween = new TWEEN.Tween( outline.scale );",
				"\t\toutline.userData.tween.easing( TWEEN.Easing.Circular.InOut );",
				"\t\toutline.userData.scales = {",
				"\t\t\tstart: 1.1,",
				"\t\t\tend: 1.33",
				"\t\t};",
				"",
				"\t\toutline.userData.animateIn = function() {",
				"\t\t\tvar scale = outline.userData.scales.end;",
				"\t\t\toutline.userData.tween.to( {",
				"\t\t\t\t\tx: scale, y: scale, z: scale",
				"\t\t\t\t}, 350 )",
				"\t\t\t\t.start();",
				"\t\t\treturn outline.userData.tween;",
				"\t\t};",
				"",
				"\t\toutline.userData.animateOut = function() {",
				"\t\t\tvar scale = outline.userData.scales.start;",
				"\t\t\toutline.userData.tween.to( {",
				"\t\t\t\t\tx: scale, y: scale, z: scale",
				"\t\t\t\t}, 350 )",
				"\t\t\t\t.start();",
				"\t\t\treturn outline.userData.tween;",
				"\t\t};",
				"",
				"\t\toutline.userData.animateOut();",
				"",
				"\t\tbutton.userData.outline = outline;",
				"\t\tbutton.add( outline );",
				"",
				"\t\tbutton.addEventListener( 'over', animateIn );",
				"\t\tbutton.addEventListener( 'out', animateOut );",
				"",
				"\t\treturn button;",
				"",
				"\t}",
				"",
				"} );"
			]
		],
		[
			"Slash",
			[
				"var slash = new THREE.Line(",
				"\tnew THREE.BufferGeometry(),",
				"\tnew THREE.LineBasicMaterial( {",
				"\t\tcolor: 'black',",
				"\t\tlinewidth: 1",
				"\t} )",
				");",
				"",
				"slash.geometry.addAttribute( 'position',",
				"\tnew THREE.Float32BufferAttribute( [",
				"\t\t0, 0, - 0.125,",
				"\t\t0, 0,   0.125",
				"\t], 3 )",
				");",
				"slash.geometry.needsUpdate = true;",
				"",
				"resources.set( 'slash', slash );"
			]
		],
		[
			"Playhead & Timeline",
			[
				"var params = resources.get( 'params' );",
				"var ring = resources.get( 'ring' );",
				"var scene = resources.get( 'scene' );",
				"var interaction = resources.get( 'interaction' );",
				"var manager = resources.get( 'audio-manager' );",
				"var Button = resources.get( 'Button' );",
				"var TWO_PI = Math.PI * 2;",
				"var HALF_PI = Math.PI / 2;",
				"var beats = manager.beats;",
				"var beatOffset = Math.floor( beats / manager.analysers.list.length );",
				"var identity = function() {};",
				"",
				"var loader = new THREE.TextureLoader();",
				"var timeline = new THREE.Group();",
				"",
				"var size = 20;",
				"var playhead = Button.create( size );",
				"var outline = playhead.userData.outline;",
				"",
				"var lastBeat = - 1;",
				"",
				"playhead.userData.ripple = createRipple( size * 0.05 );",
				"",
				"playhead.add( playhead.userData.ripple );",
				"",
				"var radius = ring.userData.radius - ring.userData.thickness * 0.95;",
				"",
				"var geometry = new THREE.BufferGeometry();",
				"var vertices = [];",
				"",
				"for ( var i = 0; i < beats; i++ ) {",
				"",
				"\tvar theta = TWO_PI * ( i / beats );",
				"\tvar x = radius * Math.cos( theta );",
				"\tvar y = 0;",
				"\tvar z = radius * Math.sin( theta );",
				"\tvar paddles = Math.floor( i / 16 );",
				"",
				"\t// Skip every 15th & 16th line because",
				"\t// that line is drawn in \"paddles\"",
				"\tif ( paddles >= 8 || Math.max( ( i % 16 ) - 1, 0 ) ) {",
				"\t\tvar offset = 0.5;",
				"\t\tif ( !( i % 4 ) ) {",
				"\t\t\toffset = 1;",
				"\t\t}",
				"\t\tvertices.push( x, y - offset, z );",
				"\t\tvertices.push( x, y + offset, z );",
				"\t}",
				"",
				"}",
				"",
				"var positionAttribute = new THREE.Float32BufferAttribute( vertices, 3 );",
				"geometry.addAttribute( 'position', positionAttribute );",
				"",
				"var ruler = new THREE.LineSegments(",
				"\tgeometry,",
				"\tnew THREE.LineBasicMaterial( {",
				"\t\tcolor: 0x000000,",
				"\t\tlinewidth: 1",
				"\t} )",
				");",
				"",
				"ruler.scale.y = 0.04;",
				"",
				"var cylinder = new THREE.Mesh(",
				"\tnew THREE.CylinderBufferGeometry( 0.5, 0.5, 1, 64, 1, true ),",
				"\tnew THREE.MeshBasicMaterial( {",
				"\t\tcolor: 0xffffff,",
				"\t\ttransparent: true,",
				"\t\tside: THREE.BackSide,",
				"\t\tmap: loader.load( params.rootPath + '/textures/baseline.gif' ),",
				"\t\topacity: 0,",
				"\t\tdepthWrite: false",
				"\t} )",
				");",
				"cylinder.renderOrder = 100;",
				"cylinder.material.map.generateMipMaps = false;",
				"cylinder.material.map.minFilter = THREE.LinearFilter;",
				"cylinder.material.map.magFilter = THREE.LinearFilter;",
				"cylinder.material.map.wrapS = THREE.RepeatWrapping;",
				"cylinder.material.map.wrapT = THREE.RepeatWrapping;",
				"cylinder.material.map.repeat.set( 1, 5 );",
				"",
				"var textureOffsetMargin = 0.8;",
				"",
				"cylinder.userData.y = 0;",
				"cylinder.userData.tween = new TWEEN.Tween( cylinder.material );",
				"cylinder.userData.tween.easing( TWEEN.Easing.Sinusoidal.InOut );",
				"",
				"cylinder.userData.animateIn = function( complete ) {",
				"\tcylinder.userData.tween",
				"\t\t.onComplete( complete || identity )",
				"\t\t.to( {",
				"\t\t\topacity: 1",
				"\t\t}, 150 )",
				"\t\t.start();",
				"\treturn cylinder.userData.tween;",
				"};",
				"cylinder.userData.animateOut = function( complete ) {",
				"\tcylinder.userData.tween",
				"\t\t.onComplete( complete || identity )",
				"\t\t.to( {",
				"\t\t\topacity: 0",
				"\t\t}, 350 )",
				"\t\t.start();",
				"\treturn cylinder.userData.tween;",
				"};",
				"",
				"cylinder.visible = false;",
				"",
				"playhead.userData.update = function( progress ) {",
				"",
				"\tvar theta = null;",
				"\tvar radius = ring.userData.radius - ring.userData.thickness;",
				"\tvar ripple = playhead.userData.ripple;",
				"",
				"\tif ( cylinder.userData.controller ) {",
				"",
				"\t\t// Override tweens while dragging",
				"\t\tif ( outline.scale.x !== outline.userData.scales.end ) {",
				"\t\t\toutline.scale.x = outline.userData.scales.end;",
				"\t\t\toutline.scale.y = outline.userData.scales.end;",
				"\t\t\toutline.scale.z = outline.userData.scales.end;",
				"\t\t}",
				"\t\t",
				"\t\tripple.visible = false;",
				"",
				"\t\tvar id = cylinder.userData.controller.uuid;",
				"\t\tvar intersection = interaction.intersections[ id ];",
				"",
				"\t\tif ( intersection && intersection.object.uuid === cylinder.uuid ) {",
				"",
				"\t\t\t// Assumes camera is at 0, 0, 0",
				"\t\t\tvar point = intersection.point;",
				"\t\t\tvar line = Math.round( 4 * point.y / cylinder.scale.y );",
				"",
				"\t\t\ttheta = Math.atan2( point.z, point.x ) - HALF_PI;",
				"\t\t\ttheta += timeline.rotation.y;",
				"",
				"\t\t\tplayhead.dispatchEvent( {",
				"\t\t\t\ttype: 'drag',",
				"\t\t\t\ttheta: theta,",
				"\t\t\t\tprogress: mod( ( ( theta - Math.PI * 1.5 ) ), TWO_PI ) / TWO_PI,",
				"\t\t\t\tline: line",
				"\t\t\t} );",
				"",
				"\t\t}",
				"",
				"\t} else {",
				"",
				"\t\ttheta = progress * TWO_PI + Math.PI * 1.5;",
				"",
				"\t\tripple.material.uniforms.time.value = manager.duration * progress;",
				"\t\tripple.rotation.y = - theta;",
				"\t\tripple.visible = true;",
				"",
				"\t\tvar beatLength = manager.unitDuration / 4;",
				"\t\tvar currentBeat = Math.floor( manager.currentTime / beatLength );",
				"\t\t",
				"\t\tif ( currentBeat !== lastBeat ) {",
				"\t\t",
				"\t\t\tinteraction.vibrate( 0.2, 100 );",
				"\t\t\tlastBeat = currentBeat;",
				"\t\t\t",
				"\t\t}",
				"",
				"\t}",
				"",
				"\tif ( theta !== null ) {",
				"",
				"\t\t// Snap to seconds",
				"\t\ttheta = snap( theta ) + HALF_PI;",
				"\t\tvar x = radius * Math.cos( theta );",
				"\t\tvar z = radius * Math.sin( theta );",
				"",
				"\t\t// Ease into position",
				"\t\tplayhead.position.x += ( x - playhead.position.x ) * 0.66;",
				"\t\tplayhead.position.z += ( z - playhead.position.z ) * 0.66;",
				"",
				"\t}",
				"",
				"\treturn playhead;",
				"",
				"};",
				"",
				"timeline.add( ruler );",
				"timeline.add( playhead );",
				"scene.add( timeline );",
				"scene.add( cylinder );",
				"",
				"//",
				"",
				"interaction.listen( playhead );",
				"interaction.listen( cylinder );",
				"",
				"playhead.addEventListener( 'primary-down', pointerdown );",
				"",
				"function pointerdown( e ) {",
				"",
				"\tvar radius = ring.userData.radius - ring.userData.thickness;",
				"",
				"\tcylinder.scale.x = radius * 2;",
				"\tcylinder.scale.z = radius * 2;",
				"",
				"\tcylinder.visible = true;",
				"\tcylinder.userData.controller = e.controller;",
				"\tcylinder.userData.animateIn();",
				"",
				"\tinteraction.ignore( playhead );",
				"\tinteraction.addEventListener( 'primary-up', pointerup );",
				"\tplayhead.dispatchEvent( { type: 'focus' } );",
				"",
				"}",
				"",
				"function pointerup( e ) {",
				"",
				"\toutline.userData.animateOut();",
				"\tcylinder.userData.animateOut( hideCylinder );",
				"\tdelete cylinder.userData.controller;",
				"",
				"\tinteraction.listen( playhead );",
				"\tinteraction.removeEventListener( 'primary-up', pointerup );",
				"\tplayhead.dispatchEvent( { type: 'blur' } );",
				"",
				"}",
				"",
				"function hideCylinder() {",
				"\tcylinder.visible = false;",
				"}",
				"",
				"function mod( v, l ) {",
				"\twhile ( v < 0 ) {",
				"\t\tv += l;",
				"\t}",
				"\treturn v % l;",
				"}",
				"",
				"function snap( v ) {",
				"\tvar r = Math.round( beats * v / TWO_PI );",
				"\treturn TWO_PI * ( r / beats );",
				"}",
				"",
				"function createRipple( size ) {",
				"",
				"\tvar geometry = new THREE.PlaneBufferGeometry( size, size );",
				"\tvar material = new THREE.ShaderMaterial( {",
				"",
				"\t\tuniforms: {",
				"\t\t\ttime: { type: 'f', value: 0 },",
				"\t\t\tstartRadius: { type: 'f', value: 0.0 },",
				"\t\t\tendRadius: { type: 'f', value: 0.5 },",
				"\t\t\tlinewidth: { type: 'f', value: 0.1 },",
				"\t\t\tduration: { type: 'f', value: manager.unitDuration / 4 },",
				"\t\t\tcolor: { type: 'c', value: new THREE.Color( 1.0, 1.0, 1.0 ) }",
				"\t\t},",
				"",
				"\t\tvertexShader: [",
				"",
				"\t\t\t\"varying vec2 vUv;\",",
				"",
				"\t\t\t\"void main() {\",",
				"",
				"\t\t\t\t\"vUv = uv;\",",
				"\t\t\t\t\"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",",
				"",
				"\t\t\t\"}\"",
				"",
				"\t\t].join( '\\n' ),",
				"",
				"\t\tfragmentShader: [",
				"",
				"\t\t\t\"uniform float time;\",",
				"\t\t\t\"uniform float startRadius;\",",
				"\t\t\t\"uniform float endRadius;\",",
				"\t\t\t\"uniform float linewidth;\",",
				"\t\t\t\"uniform float duration;\",",
				"\t\t\t'uniform vec3 color;',",
				"",
				"\t\t\t\"varying vec2 vUv;\",",
				"",
				"\t\t\t\"void main() {\",",
				"",
				"\t\t\t  \"float nTime = mod( time, duration ) / duration;\",",
				"\t\t\t  \"nTime = pow( nTime, 0.25 );\",",
				"",
				"\t\t\t  \"vec2 center = vec2( 0.5 );\",",
				"",
				"\t\t\t  \"float radius = mix( startRadius, endRadius, nTime );\",",
				"",
				"\t\t\t  \"float fill = length( center - vUv ) - radius;\",",
				"\t\t\t  \"float hull = fill - ( linewidth * ( 1.0 - nTime ) );\",",
				"\t\t\t  \"float t = 1.0 - step( 0.0, fill * hull );\",",
				"",
				"\t\t\t  \"gl_FragColor = vec4( color.rgb, t );\",",
				"",
				"\t\t\t\"}\"",
				"",
				"\t\t].join( '\\n' ),",
				"",
				"\t\ttransparent: true,",
				"\t\t// depthWrite: false,",
				"\t\tside: THREE.BackSide",
				"",
				"\t} );",
				"",
				"\tvar plane = new THREE.Mesh( geometry, material );",
				"\tplane.renderOrder = 151;",
				"",
				"\treturn plane;",
				"",
				"}",
				"",
				"resources.set( 'timeline', timeline );",
				"resources.set( 'playhead', playhead );"
			]
		],
		[
			"Paddles",
			[
				"var HALF_PI = Math.PI / 2;",
				"var TWO_PI = Math.PI * 2;",
				"",
				"var params = resources.get( 'params' );",
				"var PositionalAudio = resources.get( 'PositionalAudio' );",
				"var Text = resources.get( 'alternate-gothic-3d' );",
				"var manager = resources.get( 'audio-manager' );",
				"var scene = resources.get( 'scene' );",
				"var camera = resources.get( 'camera' );",
				"var interaction = resources.get( 'interaction' );",
				"var ring = resources.get( 'ring' );",
				"var Button = resources.get( 'Button' );",
				"",
				"var beats = manager.beats;",
				"var beatOffset = Math.floor( beats / manager.analysers.list.length );",
				"var range = 1;",
				"var halfRange = range / 2;",
				"",
				"var paddles = new THREE.Group();",
				"var activePaddles = [];",
				"",
				"paddles.userData.list = [];",
				"scene.add( paddles );",
				"",
				"var radius = ring.userData.radius - ring.userData.thickness * 0.95;",
				"",
				"var filters = manager.filters.list;",
				"var analysers = manager.analysers;",
				"",
				"var geometry = new THREE.BufferGeometry();",
				"var vertices = [];",
				"",
				"var plane = new THREE.Mesh(",
				"\tnew THREE.PlaneBufferGeometry( 1000, 1000 ),",
				"\tnew THREE.MeshBasicMaterial( {",
				"\t\tcolor: 0x000000,",
				"\t\ttransparent: true,",
				"\t\topacity: 0,",
				"\t\twireframe: true",
				"\t} )",
				");",
				"",
				"plane.renderOrder = 100;",
				"plane.visible = false;",
				"",
				"for ( var i = 0; i < filters.length; i++ ) {",
				"",
				"\tvar filter = filters[ i ];",
				"",
				"\tvar paddle = Button.create( 8, 'square' );",
				"\tvar theta = TWO_PI * ( i * beatOffset ) / beats;",
				"",
				"\tvar ct = Math.cos( theta );",
				"\tvar st = Math.sin( theta );",
				"",
				"\tpaddle.userData.name = filter.name;",
				"\tpaddle.userData.isPaddle = true;",
				"\tpaddle.userData.theta = theta;",
				"",
				"\tpaddle.position.x = radius * ct;",
				"\tpaddle.position.z = radius * st;",
				"",
				"\tpaddle.lookAt( paddles.position );",
				"",
				"\tpaddle.userData.position = new THREE.Vector3()",
				"\t\t.copy( paddle.position );",
				"",
				"\tpaddle.userData.twist = {",
				"\t\tvalue: 0,",
				"\t\ttarget: 0",
				"\t};",
				"",
				"\t// Offset line position so no z-fighting",
				"\tvar x = ( radius + 0.02 ) * ct;",
				"\tvar y = 0;",
				"\tvar z = ( radius + 0.02 ) * st;",
				"",
				"\tvertices.push( x, y - halfRange, z );",
				"\tvertices.push( x, y + halfRange, z );",
				"",
				"\tct = Math.cos( theta + HALF_PI ) * 0.01;",
				"\tst = Math.sin( theta + HALF_PI ) * 0.01;",
				"",
				"\tvertices.push( x - ct, y + halfRange, z - st );",
				"\tvertices.push( x + ct, y + halfRange, z + st );",
				"",
				"\tvertices.push( x - ct, y - halfRange, z - st );",
				"\tvertices.push( x + ct, y - halfRange, z + st );",
				"",
				"\tpaddle.userData.name = filter.name;",
				"\tpaddle.userData.index = i;",
				"\tpaddle.userData.plane = plane.clone();",
				"\tpaddle.userData.plane.position.copy( paddle.position );",
				"\tpaddle.userData.plane.lookAt( paddles.position );",
				"",
				"\tvar pa = new PositionalAudio( camera.userData.listener, filter );",
				"\tpa.position.copy( paddle.position );",
				"\tpa.lookAt( paddles.position );",
				"\t// pa.setRefDistance( 100 );",
				"\tpaddles.add( pa );",
				"",
				"\tpaddles.add( paddle );",
				"\tpaddles.add( paddle.userData.plane );",
				"\tpaddles.userData.list.push( paddle );",
				"",
				"\tinteraction.listen( paddle );",
				"\tinteraction.listen( paddle.userData.plane );",
				"\tpaddle.addEventListener( 'primary-down', onPrimaryDown );",
				"",
				"}",
				"",
				"var positionAttribute = new THREE.Float32BufferAttribute( vertices, 3 );",
				"geometry.addAttribute( 'position', positionAttribute );",
				"",
				"var lines = new THREE.LineSegments(",
				"\tgeometry,",
				"\tnew THREE.LineBasicMaterial( {",
				"\t\tcolor: 0x000000,",
				"\t\tlinewidth: 1",
				"\t} )",
				");",
				"",
				"paddles.add( lines );",
				"",
				"Text.ready( addLabels );",
				"",
				"function addLabels() {",
				"",
				"\tvar i = 0;",
				"\tvar options = {",
				"\t\tresolution: 2,",
				"\t\tstroke: 'transparent',",
				"\t\tfill: 'black'",
				"\t};",
				"",
				"\tvar metaOptions = {",
				"\t\tresolution: 1,",
				"\t\tstroke: 'transparent',",
				"\t\tfill: 'black'",
				"\t};",
				"",
				"\tvar meta = [",
				"\t\tText.create( '2.0x', metaOptions ),",
				"\t\tText.create( '1.0x', metaOptions ),",
				"\t\tText.create( '0.5x', metaOptions )",
				"\t];",
				"",
				"\tmeta.scale = range * 0.125;",
				"\tmeta.offset = Math.PI * 0.0135;",
				"\tmeta.range = range * 0.98;",
				"\t",
				"\tfunction update() {",
				"",
				"\t\tif ( i >= filters.length ) {",
				"\t\t\treturn;",
				"\t\t}",
				"",
				"\t\tvar filter = filters[ i ];",
				"\t\tvar paddle = paddles.userData.list[ i ];",
				"\t\tvar theta = paddle.userData.theta;",
				"\t\tvar index = '0' + ( i + 1 ) + '. ';",
				"",
				"\t\tvar label = Text.create( index + filter.name.toUpperCase(), options );",
				"\t\tvar scale = 0.5 * range / label.userData.scale;",
				"",
				"\t\tpaddle.userData.label = label;",
				"",
				"\t\tlabel.position.x = paddle.position.x;",
				"\t\tlabel.position.y = - 0.6;",
				"\t\tlabel.position.z = paddle.position.z;",
				"",
				"\t\tlabel.rotation.order = 'YXZ';",
				"\t\tlabel.rotation.x = HALF_PI;",
				"\t\tlabel.rotation.y = - theta;",
				"\t\tlabel.rotation.z = HALF_PI;",
				"",
				"\t\tlabel.scale.x = scale;",
				"\t\tlabel.scale.y = scale;",
				"\t\tlabel.scale.z = scale;",
				"",
				"\t\tfor ( var j = 0; j < meta.length; j++ ) {",
				"",
				"\t\t\tvar isOneX = j === 1;",
				"\t\t\tvar pct = j / ( meta.length - 1 );",
				"\t\t\tvar reference = meta[ j ];",
				"",
				"\t\t\tif ( i === 0 ) {",
				"\t\t\t\treference.material.uniforms.opacity.value = 0.5;",
				"\t\t\t}",
				"",
				"\t\t\tvar mesh = reference.clone();",
				"\t\t\tvar t = theta + meta.offset;",
				"",
				"\t\t\tif ( isOneX ) {",
				"\t\t\t\tt = theta + meta.offset * 1.0625;",
				"\t\t\t}",
				"",
				"\t\t\tvar x = radius * Math.cos( t );",
				"\t\t\tvar z = radius * Math.sin( t );",
				"",
				"\t\t\tmesh.position.x = x;",
				"\t\t\tmesh.position.y = ( 1 - pct ) * meta.range - meta.range / 2;",
				"\t\t\tmesh.position.z = z;",
				"",
				"\t\t\tmesh.rotation.order = 'YXZ';",
				"\t\t\tmesh.rotation.x = HALF_PI;",
				"\t\t\tmesh.rotation.y = - theta;",
				"\t\t\tmesh.rotation.z = HALF_PI;",
				"",
				"\t\t\tif ( isOneX ) {",
				"\t\t\t\tmesh.position.y -= 0.01;",
				"\t\t\t\tmesh.scale.x = 1.33 * meta.scale;",
				"\t\t\t\tmesh.scale.y = 1.33 * meta.scale;",
				"\t\t\t\tmesh.scale.z = 1.33 * meta.scale;",
				"\t\t\t} else {",
				"\t\t\t\tmesh.scale.x = meta.scale;",
				"\t\t\t\tmesh.scale.y = meta.scale;",
				"\t\t\t\tmesh.scale.z = meta.scale;",
				"\t\t\t}",
				"",
				"\t\t\tpaddles.add( mesh );",
				"",
				"\t\t}",
				"",
				"\t\tpaddles.add( label );",
				"",
				"\t\ti ++;",
				"\t\trequestAnimationFrame( update );",
				"",
				"\t}",
				"\t",
				"\tupdate();",
				"",
				"}",
				"",
				"function onPrimaryDown( e ) {",
				"",
				"\tvar current = this;",
				"\tvar controller = e.controller;",
				"",
				"\tif ( isActive( current ) ) {",
				"\t\treturn;",
				"\t}",
				"",
				"\tactivePaddles.push( current );",
				"",
				"\tcurrent.userData.controller = controller;",
				"",
				"\tvar plane = current.userData.plane;",
				"\tplane.visible = true;",
				"",
				"\tinteraction.ignore( current );",
				"\tcurrent.dispatchEvent( {",
				"\t\ttype: 'focus',",
				"\t\tcontroller: controller",
				"\t} );",
				"",
				"\tif ( activePaddles.length <= 1 ) {",
				"\t\t// This means we're already listening",
				"\t\tinteraction.addEventListener( 'primary-up', onPrimaryUp );",
				"\t}",
				"",
				"}",
				"",
				"function onPrimaryUp( e ) {",
				"",
				"\tvar controller = e.controller;",
				"\tvar paddles = activePaddles.slice( 0 );",
				"",
				"\tfor ( var i = 0; i < paddles.length; i++ ) {",
				"",
				"\t\tvar current = paddles[ i ];",
				"\t\tvar plane = current.userData.plane;",
				"",
				"\t\tif ( current.userData.controller.uuid !== controller.uuid ) {",
				"\t\t\tcontinue;",
				"\t\t}",
				"",
				"\t\tplane.visible = false;",
				"\t\tinteraction.listen( current );",
				"\t\tcurrent.userData.outline.userData.animateOut();",
				"\t\tdelete current.userData.controller;",
				"",
				"\t\tvar index = indexOfActivePaddles( current );",
				"\t\tif ( index >= 0 ) {",
				"\t\t\tactivePaddles.splice( index, 1 );",
				"\t\t}",
				"\t\tcurrent.dispatchEvent( {",
				"\t\t\ttype: 'blur',",
				"\t\t\tcontroller: controller",
				"\t\t} );",
				"",
				"\t}",
				"",
				"\tif ( activePaddles.length <= 0 ) {",
				"\t\t// Only stop listening to 'primary-up' if",
				"\t\t// this is the last active paddle.",
				"\t\tinteraction.removeEventListener( 'primary-up', onPrimaryUp );",
				"\t}",
				"",
				"}",
				"",
				"function isActive( paddle ) {",
				"\tfor ( var i = 0; i < activePaddles.length; i++ ) {",
				"\t\tvar active = activePaddles[ i ];",
				"\t\tif ( active.uuid === paddle.uuid ) {",
				"\t\t\treturn true;",
				"\t\t}",
				"\t}",
				"\treturn false;",
				"}",
				"",
				"function indexOfActivePaddles( paddle ) {",
				"\tfor ( var i = 0; i < activePaddles.length; i++ ) {",
				"\t\tvar active = activePaddles[ i ];",
				"\t\tif ( active.uuid === paddle.uuid ) {",
				"\t\t\treturn i;",
				"\t\t}",
				"\t}",
				"\treturn - 1;",
				"}",
				"",
				"paddles.userData.update = function( progress ) {",
				"",
				"\tif ( activePaddles.length > 0 ) {",
				"",
				"\t\tfor ( var j = 0; j < activePaddles.length; j++ ) {",
				"",
				"\t\t\tvar current = activePaddles[ j ];",
				"\t\t\tvar outline = current.userData.outline;",
				"\t\t\tvar plane = current.userData.plane;",
				"\t\t\tvar controller = current.userData.controller;",
				"",
				"\t\t\t// Override tweens while dragging",
				"\t\t\tif ( outline.scale.x !== outline.userData.scales.end ) {",
				"\t\t\t\toutline.scale.x = outline.userData.scales.end;",
				"\t\t\t\toutline.scale.y = outline.userData.scales.end;",
				"\t\t\t\toutline.scale.z = outline.userData.scales.end;",
				"\t\t\t}",
				"",
				"\t\t\tvar intersection = interaction.intersections[ controller.uuid ];",
				"",
				"\t\t\tif ( intersection && intersection.object.uuid === plane.uuid ) {",
				"",
				"\t\t\t\t// Assumes camera is at 0, 0, 0 ~ish",
				"\t\t\t\tvar point = intersection.point;",
				"\t\t\t\tvar y = Math.max( Math.min( point.y, halfRange ), - halfRange );",
				"",
				"\t\t\t\tif ( current.position.y !== y ) {",
				"\t\t\t\t\tvar t = y / halfRange;",
				"\t\t\t\t\tcurrent.dispatchEvent( { type: 'update', value: t } );",
				"\t\t\t\t}",
				"",
				"\t\t\t}",
				"",
				"\t\t}",
				"",
				"\t}",
				"",
				"\tfor ( var i = 0; i < paddles.userData.list.length; i++ ) {",
				"",
				"\t\tvar paddle = paddles.userData.list[ i ];",
				"\t\tvar name = paddle.userData.name;",
				"\t\tvar analyser = analysers[ name ];",
				"\t\tvar twist = paddle.userData.twist;",
				"\t\tvar index = paddle.userData.index;",
				"",
				"\t\tif ( activePaddles.length <= 0 && analyser ) {",
				"\t\t\tvar data = analyser.data[ 3 ];",
				"\t\t\tvar value =  2 * data / 255 + 1;",
				"\t\t\tpaddle.scale.x = value;",
				"\t\t\tpaddle.scale.y = value;",
				"\t\t\tpaddle.scale.z = value;",
				"\t\t}",
				"",
				"\t\tif ( paddle.position.y !== paddle.userData.position.y ) {",
				"\t\t\tpaddle.position.y += ( paddle.userData.position.y - paddle.position.y ) * params.drag;",
				"\t\t}",
				"",
				"\t\tif ( twist.target !== twist.value ) {",
				"\t\t\ttwist.value += ( twist.target - twist.value ) * params.drag;",
				"\t\t\tring.userData.setTwist( index, twist.value );",
				"\t\t}",
				"",
				"\t}",
				"",
				"\treturn paddles;",
				"",
				"};",
				"",
				"function mod( v, l ) {",
				"\twhile ( v < 0 ) {",
				"\t\tv += l;",
				"\t}",
				"\treturn v % l;",
				"}",
				"",
				"resources.set( 'paddles', paddles );",
				""
			]
		],
		[
			"Lights",
			[
				"var scene = resources.get( 'scene' );",
				"var paddles = resources.get( 'paddles' );",
				"var params = resources.get( 'params' );",
				"",
				"var group = new THREE.Group();",
				"var vector = new THREE.Vector3();",
				"var worldPosition = new THREE.Vector3();",
				"",
				"var ambient = new THREE.HemisphereLight( 0xFEFCFF, 0xB0ADAA, 0.9 );",
				"",
				"ambient.userData.tween = new TWEEN.Tween( ambient );",
				"ambient.userData.tween.easing( TWEEN.Easing.Circular.Out );",
				"ambient.userData.intensity = ambient.intensity;",
				"",
				"scene.add( ambient );",
				"group.userData.ambient = ambient;",
				"",
				"var amount = 2;",
				"var size = 10;",
				"",
				"function setup () {",
				"",
				"\tvar direction = new THREE.Vector3( 0, 0, 1 );",
				"\tvar origin = new THREE.Vector3();",
				"\tvar length = 10;",
				"\tvar color = 'red';",
				"",
				"\tfor ( var i = 0; i < amount; i++ ) {",
				"",
				"\t\tvar pct = i / ( amount - 1 );",
				"\t\tvar light = new THREE.SpotLight( 0xffffff );",
				"",
				"\t\tlight.castShadow = true;",
				"",
				"\t\t// `SpotLight` Properties",
				"\t\tlight.distance = 10;",
				"\t\tlight.angle = Math.PI * 0.12;",
				"\t\tlight.penumbra = 1;",
				"\t\tlight.decay = 1;",
				"\t",
				"\t\tlight.shadow.mapSize.width = 256;",
				"\t\tlight.shadow.mapSize.height = 256;",
				"\t\tlight.shadow.camera.near = 0.05;",
				"\t\tlight.shadow.camera.far = 10;",
				"",
				"\t\tlight.target.userData.reference = group;",
				"",
				"\t\tlight.position.y = size * 0.4;",
				"\t\tlight.position.z = size * pct - size / 2;",
				"",
				"\t\tlight.userData.helper = new THREE.SpotLightHelper( light, color );",
				"",
				"\t\tgroup.add( light );",
				"\t\t// scene.add( light.userData.helper );",
				"\t\tscene.add( light.target );",
				"",
				"\t}",
				"",
				"\tgroup.userData.update = update;",
				"\tscene.add( group );",
				"",
				"}",
				"",
				"function update () {",
				"",
				"\tfor ( var i = 0; i < group.children.length; i++ ) {",
				"",
				"\t\tvar light = group.children[ i ];",
				"",
				"\t\tif ( light.target.userData.reference ) {",
				"",
				"\t\t\tlight.target.userData.reference.getWorldPosition( worldPosition );",
				"\t\t\tvector.copy( worldPosition );",
				"\t\t\tvector.sub( light.target.position );",
				"\t\t\tvector.multiplyScalar( params.drag );",
				"",
				"\t\t\tlight.target.position.add( vector );",
				"",
				"\t\t}",
				"",
				"\t\tif ( light.userData.helper ) {",
				"\t\t\tlight.userData.helper.update();",
				"\t\t}",
				"",
				"\t}",
				"",
				"\treturn group;",
				"",
				"}",
				"",
				"setup();",
				"resources.set( 'lights', group );"
			]
		],
		[
			"Debris",
			[
				"var params = resources.get( 'params' );",
				"var scene = resources.get( 'scene' );",
				"var camera = resources.get( 'camera' );",
				"var amount = 10000;",
				"",
				"var geometry = new THREE.BufferGeometry();",
				"var positions = [];",
				"var sizes = [];",
				"var lifeTimes = [];",
				"var rotations = [];",
				"",
				"var vertexShader = [",
				"",
				"\t'uniform float amplitude;',",
				"\t'uniform float time;',",
				"\t'uniform vec3 wind;',",
				"\t'uniform float turbulence;',",
				"\t'uniform float radius;',",
				"",
				"\t'attribute float size;',",
				"\t'attribute float life;',",
				"\t'attribute vec3 axisRotation;',",
				"",
				"\t'varying float lived;',",
				"\t'varying vec3 particle;',",
				"\t'varying vec3 up;',",
				"\t'varying float range;',",
				"",
				"\t'float noise( float p ) {',",
				"\t  'return sin( p );',",
				"\t'}',",
				"",
				"\t'void main() {',",
				"",
				"\t  'float variation = pow( size, 0.33 );',",
				"\t  'float lifetime = life * 1000.0;',",
				"",
				"\t  'lived = mod( time, lifetime ) / lifetime;',",
				"",
				"\t  'vec3 destination = position + variation * wind * lived;',",
				"\t  'vec3 field = vec3(',",
				"\t\t'( wind.y + wind.z ) * noise( destination.y + destination.z ),',",
				"\t\t'( wind.x + wind.z ) * noise( destination.x + destination.z ),',",
				"\t\t'( wind.x + wind.y ) * noise( destination.x + destination.y )',",
				"\t  ');',",
				"\t  'field *= turbulence;',",
				"",
				"\t  'vec3 pos = mix( destination, destination + field, lived );',",
				"      'vec4 mvPosition = modelViewMatrix * vec4( pos, 1.0 );',",
				"",
				"\t  'particle = pos;',",
				"\t  'up = axisRotation;',",
				"\t  'range = smoothstep( radius * 0.85, radius, length( pos ) );',",
				"",
				"\t  'gl_PointSize = amplitude * size * 12.0;',",
				"\t  'gl_Position = projectionMatrix * mvPosition;',",
				"",
				"\t'}'",
				"",
				"].join( '\\n' );",
				"",
				"var fragmentShader = [",
				"",
				"\t'const float PI = 3.141592653589793;',",
				"",
				"\t'uniform float time;',",
				"\t'uniform vec3 specular;',",
				"\t'uniform vec3 camera;',",
				"",
				"\t'varying float lived;',",
				"\t'varying vec3 particle;',",
				"\t'varying vec3 up;',",
				"\t'varying float range;',",
				"",
				"\t'mat3 setCamera( in vec3 ro, in vec3 ta, float cr ) {',",
				"",
				"\t  'vec3 cw = normalize( ta - ro );',",
				"\t  'vec3 cp = vec3( sin( cr ), cos( cr ), 0.0 );',",
				"\t  'vec3 cu = normalize( cross( cw, cp ) );',",
				"\t  'vec3 cv = normalize( cross( cu, cw ) );',",
				"",
				"\t  'return mat3( cu, cv, cw );',",
				"",
				"\t'}',",
				"",
				"\t'float sdCapsule( in vec3 p, vec3 a, vec3 b, float r ) {',",
				"\t  'vec3 pa = p - a, ba = b - a;',",
				"\t  'float h = clamp( dot( pa, ba )/dot( ba, ba ), 0.0, 1.0 );',",
				"\t  'return length( pa - ba * h ) - r;',",
				"\t'}',",
				"",
				"\t'vec2 map( in vec3 sight ) {',",
				"",
				"\t  '// Of the object',",
				"\t  'vec3 position = vec3( 0.0 );',",
				"\t  '// The vec3 position of the left side of capsule',",
				"\t  'vec3 a = vec3( - 1.25, 0.0, 0.0 );',",
				"\t  '// The vec3 position of the right side of capsule',",
				"\t  'vec3 b = vec3( 1.25, 0.0, 0.0 );',",
				"\t  '// Radius of the capsule',",
				"\t  'float radius = 0.33;',",
				"",
				"\t  '// Define position in relation to the camera',",
				"\t  'position = sight - position;',",
				"\t  'vec3 worldPosition = position;',",
				"",
				"\t  'float sdf = sdCapsule( worldPosition, a, b, radius );',",
				"\t  'vec2 res = vec2( sdf, 0.0 );',",
				"",
				"\t  'return res;',",
				"",
				"\t'}',",
				"",
				"\t'vec2 castRay( in vec3 ro, in vec3 rd ) {',",
				"",
				"\t  '// Near / Far Clipping Plane',",
				"\t  'float tmin = 1.0;',",
				"\t  'float tmax = 50.0;',",
				"",
				"\t  'float t = tmin;',",
				"\t  'float m = - 1.0;',",
				"",
				"\t  '// TODO: Why does it need so many iterations',",
				"\t  '// to march correctly?',",
				"\t  'for( int i = 0; i < 128; i++ ) {',",
				"",
				"\t\t'float precis = 0.0004 * t;',",
				"\t\t'vec2 res = map( ro + rd * t );',",
				"",
				"\t\t'// Means no intersection',",
				"\t\t'// and no possibility of checking again',",
				"\t\t'// so stop the Ray Marching',",
				"\t\t'if ( res.x < precis || t > tmax ) break;',",
				"",
				"\t\t  't += res.x;',",
				"\t\t  'm = res.y; // Identify which shape was intersected via a float',",
				"",
				"\t\t'}',",
				"",
				"\t\t'if( t > tmax ) m =- 1.0;',",
				"\t\t'return vec2( t, m );',",
				"",
				"\t'}',",
				"",
				"\t'// https://www.geeks3d.com/20141201/how-to-rotate-a-vertex-by-a-quaternion-in-glsl/',",
				"\t'vec4 quat_from_axis_angle( vec3 axis, float angle ) {',",
				"\t  'float half_angle = angle * 0.5;',",
				"\t  'float s = sin( half_angle );',",
				"\t  'return vec4( axis.xyz * s, cos( half_angle ) );',",
				"\t'}',",
				"",
				"\t'// https://www.geeks3d.com/20141201/how-to-rotate-a-vertex-by-a-quaternion-in-glsl/',",
				"\t'vec3 rotate( vec3 position, vec3 axis, float angle ) {',",
				"\t  'vec4 q = quat_from_axis_angle( axis, angle );',",
				"\t  'vec3 v = position.xyz;',",
				"\t  'return v + 2.0 * cross( q.xyz, cross( q.xyz, v ) + q.w * v );',",
				"\t'}',",
				"",
				"\t'void main() {',",
				"",
				"\t  'float theta = ( time / 1000.0 ) * length( up );',",
				"\t  'theta = mod( theta, PI * 2.0 );',",
				"",
				"\t  'vec2 uv = 2.0 * vec2( gl_PointCoord ) - 1.0;',",
				"\t  'vec3 ro = normalize( camera - particle );',",
				"",
				"\t  'ro = rotate( ro, up, theta );',",
				"\t  'ro *= 10.0 / length( ro );',",
				"",
				"\t  'vec3 ta = vec3( 0.0, 0.0, 0.0 );',",
				"\t  'mat3 ca = setCamera( ro, ta, 0.0 );',",
				"",
				"\t  'vec3 rd = ca * normalize( vec3( uv.xy, 5.0 ) );',",
				"\t  'vec2 res = castRay( ro, rd );',",
				"",
				"\t  'float t = res.x;',",
				"\t  'float m = res.y;',",
				"\t  'float alpha = step( 0.0, m );',",
				"",
				"\t  'vec3 texel = specular;',",
				"\t  'float easeInOut = sin( lived * PI );',",
				"\t  'float spherical = 1.0 - range;',",
				"",
				"\t  'gl_FragColor = vec4( texel, alpha * easeInOut * spherical );',",
				"",
				"\t'}'",
				"",
				"].join( '\\n' );",
				"",
				"for ( var i = 0; i < amount; i++ ) {",
				"",
				"  positions.push( Math.random() - 0.5 );",
				"  positions.push( Math.random() - 0.5 );",
				"  positions.push( Math.random() - 0.5 );",
				"",
				"  sizes.push( Math.random() );",
				"  lifeTimes.push( Math.random() * 19 + 1 );",
				"",
				"  rotations.push( ( 2 * Math.random() - 1 ) );",
				"  rotations.push( ( 2 * Math.random() - 1 ) );",
				"  rotations.push( ( 2 * Math.random() - 1 ) );",
				"",
				"}",
				"",
				"geometry.addAttribute( 'position', new THREE.Float32BufferAttribute( positions, 3 ) );",
				"geometry.addAttribute( 'size', new THREE.Float32BufferAttribute( sizes, 1 ) );",
				"geometry.addAttribute( 'life', new THREE.Float32BufferAttribute( lifeTimes, 1 ) );",
				"geometry.addAttribute( 'axisRotation', new THREE.Float32BufferAttribute( rotations, 3 ) );",
				"",
				"var material = new THREE.ShaderMaterial({",
				"  uniforms: {",
				"\tamplitude: { type: 'f', value: 1.5 },",
				"\tspecular: { type: 'c', value: new THREE.Color( 1, 1, 1 ) },",
				"\twind: { type: 'v3', value: new THREE.Vector3( 0, 0.02, 0.1 ) },",
				"\ttime: { type: 'f', value: 0 },",
				"\tturbulence: { type: 'f', value: 0.1 },",
				"\tcamera: { type: 'v3', value: camera.position },",
				"\tradius: { type: 'f', value: 0.5 }",
				"  },",
				"  vertexShader: vertexShader,",
				"  fragmentShader: fragmentShader,",
				"  transparent: true,",
				"  depthWrite: false",
				"  // depthTest: false",
				"});",
				"",
				"var debris = new THREE.Points( geometry, material );",
				"debris.scale.setScalar( 10 );",
				"debris.renderOrder = 150;",
				"debris.userData.update = update;",
				"debris.userData.amplitude = material.uniforms.amplitude.value;",
				"",
				"scene.add( debris );",
				"",
				"function update( time ) {",
				"",
				"\tvar amplitude = material.uniforms.amplitude;",
				"",
				"\tif ( amplitude.value !== debris.userData.amplitude ) {",
				"\t\tamplitude.value += ( debris.userData.amplitude - amplitude.value ) * params.drag;",
				"\t}",
				"",
				"\tmaterial.uniforms.time.value = time;",
				"",
				"}",
				"",
				"resources.set( 'debris', debris );"
			]
		],
		[
			"Boids",
			[
				"var manager = resources.get( 'audio-manager' );",
				"var scene = resources.get( 'scene' );",
				"var backdrop = resources.get( 'backdrop' );",
				"var ring = resources.get( 'ring' );",
				"",
				"var TWO_PI = Math.PI * 2;",
				"var HALF_PI = Math.PI / 2;",
				"var boxDepth = 3;",
				"var amount = 100;",
				"",
				"var time = 0;",
				"var group = new THREE.Group();",
				"var a = new THREE.Vector3();",
				"var b = new THREE.Vector3();",
				"var c = new THREE.Vector3();",
				"var d = new THREE.Vector3();",
				"",
				"group.userData.index = 0;",
				"group.userData.next = next;",
				"group.userData.update = update;",
				"group.userData.Tween = new TWEEN.Group();",
				"",
				"scene.add( group );",
				"",
				"var geometry = new THREE.BoxBufferGeometry( 0.033, 0.033, 0.33 );",
				"var material = new THREE.MeshPhysicalMaterial( {",
				"\tcolor: 0xcccccc",
				"} );",
				"",
				"material.emissive = backdrop.material.uniforms.cSource.value;",
				"",
				"setup();",
				"",
				"function setup() {",
				"\twhile ( amount > 0 ) {",
				"\t\tgroup.add( createMesh() );",
				"\t\tamount--;",
				"\t}",
				"}",
				"",
				"function next() {",
				"\tvar index = group.userData.index;",
				"\tgroup.userData.index = ( index + 1 ) % group.children.length;",
				"\treturn group.children[ index ];",
				"}",
				"",
				"function update( progress ) {",
				"",
				"\ttime = progress * manager.duration * 1000;",
				"\tgroup.userData.Tween.update( time );",
				"",
				"\tfor ( var i = 0; i < group.children.length; i++ ) {",
				"",
				"\t\tvar mesh = group.children[ i ];",
				"",
				"\t  \tif ( !mesh.visible ) {",
				"\t\t\tcontinue;",
				"\t  \t}",
				"",
				"\t  \tvar elapsed = mesh.userData.elapsed;",
				"\t  \tvar start = mesh.userData.startAngle",
				"\t  \tvar end = mesh.userData.endAngle;",
				"",
				"\t  \tvar t = TWEEN.Easing.Quadratic.InOut( elapsed ) * ( end - start ) + start;",
				"\t  \tvar eased = TWEEN.Easing.Circular.InOut( elapsed );",
				"\t  \tvar scale = 0.999 * Math.sin( eased * Math.PI ) + 0.001;",
				"",
				"\t\tvar offset = 0.01;",
				"\t\tring.userData.splines.positions.getPoint( t, a );",
				"\t\tring.userData.splines.positions.getPoint( t + offset, b );",
				"",
				"\t\tvar damping = mesh.userData.distanceScalar * 2;",
				"\t\ta.y /= damping;",
				"\t\tb.y /= damping;",
				"",
				"\t\tring.userData.splines.scales.getPoint( t, c );",
				"\t\tring.userData.splines.scales.getPoint( t + offset, d );",
				"",
				"\t\tprojectVectorToSurface( a, c.y, mesh, t );",
				"\t\tprojectVectorToSurface( b, d.y, mesh, t + offset );",
				"",
				"\t  \tvar hypotenuse = b.distanceTo( a );",
				"\t  \tvar opposite = a.y - b.y;",
				"",
				"\t\tmesh.position.copy( a );",
				"\t  \tmesh.scale.z = scale;",
				"",
				"\t  \t// Rotate mesh as if it was rolling",
				"\t\tmesh.rotation.x = Math.asin( opposite / hypotenuse );",
				"\t  \tmesh.rotation.y = HALF_PI + Math.atan2( - mesh.position.x, - mesh.position.z );",
				"\t\tmesh.rotation.z = mesh.userData.originAngle;",
				"",
				"\t}",
				"",
				"}",
				"",
				"function projectVectorToSurface( vector, scale, mesh, t ) {",
				"",
				"\tvar thickness = ring.userData.thickness;",
				"",
				"\tvar theta = t * TWO_PI;",
				"\tvar angle = mesh.userData.originAngle;",
				"",
				"\tvar weightX = Math.cos( theta );",
				"\tvar weightZ = Math.sin( theta );",
				"",
				"\tvar ca = Math.cos( angle );",
				"\tvar cs = Math.sin( angle );",
				"",
				"\tvar amplitude = thickness * scale * 0.5;",
				"\tamplitude *= mesh.userData.distanceScalar;",
				"",
				"\tvar x = amplitude * weightX * ca;",
				"\tvar y = amplitude * cs;",
				"\tvar z = amplitude * weightZ * ca;",
				"",
				"\tvector.x += x;",
				"\tvector.y += y;",
				"\tvector.z += z;",
				"",
				"}",
				"",
				"function createMesh() {",
				"",
				"\t// TODO: Base off of a variety of different",
				"\t// types of geometry with different materials",
				"",
				"\tvar mesh = new THREE.Mesh( geometry, material );",
				"",
				"\tmesh.visible = false;",
				"\tmesh.rotation.order = 'YXZ';",
				"",
				"\tmesh.userData.originAngle = 0;",
				"\tmesh.userData.elapsed = 0;",
				"\tmesh.userData.startAngle = 0;",
				"\tmesh.userData.endAngle = 1;",
				"\tmesh.userData.distanceScalar = 1;",
				"\tmesh.userData.normalScalar = 1;",
				"\tmesh.userData.mesh = mesh;",
				"",
				"\tmesh.castShadow = true;",
				"",
				"\tmesh.userData.tweens = {",
				"",
				"\t\tin: new TWEEN.Tween( mesh.userData, group.userData.Tween )",
				"\t\t\t.delay( Math.random() * 1000 )",
				"\t\t\t.to( { elapsed: 1 }, 2000 - Math.random() * 1000 )",
				"\t\t\t.onStart( showMesh )",
				"\t\t\t.onComplete( hideMesh )",
				"",
				"\t};",
				"",
				"\tmesh.userData.start = start;",
				"",
				"\t/**",
				"\t * @param {Object} options - Need to implement to control",
				"\t * ability to choreograph boids around ring over various",
				"\t * circumstances and states.",
				"\t */",
				"\tfunction start( options ) {",
				"",
				"\t\tvar range = Math.random() * 0.25 + 0.25;",
				"\t\tmesh.userData.originAngle = Math.random() * TWO_PI;",
				"\t\tmesh.userData.elapsed = 0;",
				"\t\tmesh.userData.startAngle = Math.random();",
				"\t\tmesh.userData.endAngle = mesh.userData.startAngle + range;",
				"",
				"\t\tmesh.userData.distanceScalar = 0.5 * Math.random() + 1;",
				"\t\tmesh.userData.tweens.in.start( time );",
				"",
				"\t}",
				"",
				"\treturn mesh;",
				"",
				"}",
				"",
				"function showMesh( userData ) {",
				"\tuserData.mesh.visible = true;",
				"}",
				"",
				"function hideMesh( userData ) {",
				"\tuserData.mesh.visible = false;",
				"}",
				"",
				"resources.set( 'boids', group );"
			]
		],
		[
			"Lyrics",
			[
				"var Text = resources.get( 'alternate-gothic-3d' );",
				"var renderer = resources.get( 'renderer' );",
				"var camera = resources.get( 'camera' );",
				"var scene = resources.get( 'scene' );",
				"",
				"var HALF_PI = Math.PI / 2;",
				"",
				"var directions = [",
				"\t\"north\", \"east\", \"south\", \"west\"",
				"];",
				"",
				"var words = [",
				"",
				"\t// Bottom / Top Instructions",
				"",
				"\t\"i'd\", \"beat\",",
				"\t\"up\", \"all\",",
				"\t\"my\", \"cues\",",
				"\t\"for\", \"you\",",
				"\t\"take\", \"it\",",
				"\t\"off\", \"too\",",
				"\t\"oh\", \"don't\",",
				"",
				"\t\"soon\", \"some\",",
				"\t\"other\", \"way\",",
				"\t\"to\", \"get\",",
				"\t\"now\", \"give\",",
				"\t\"fears\", \"when\",",
				"\t\"know\", \"what\",",
				"\t\"eeh\", \"yea\",",
				"",
				"\t\"need\", \"and\",",
				"\t\"did\", \"come\",",
				"\t\"at\", \"me\",",
				"\t\"want\", \"do\",",
				"\t\"anything\", \"but\",",
				"\t\"upset\", \" i \",",
				"\t\"four\", \"yah\",",
				"",
				"\t\"feel\", \"like\",",
				"\t\"could\", \"comfort\",",
				"\t\"so\", \"let\",",
				"\t\"by\", \"your\",",
				"\t\"hand\", \"walk\",",
				"\t\"beside\", \"into\",",
				"\t\"something\", \"good\"",
				"",
				"];",
				"",
				"// Randomize lyrics, but keep compass directions",
				"// constant in the proper order.",
				"words = shuffle( words );",
				"words.splice(  0, 0, directions[ 0 ], directions[ 0 ] );",
				"words.splice( 16, 0, directions[ 1 ], directions[ 1 ] );",
				"words.splice( 32, 0, directions[ 2 ], directions[ 2 ] );",
				"words.splice( 48, 0, directions[ 3 ], directions[ 3 ] );",
				"",
				"var radiusOffset = 0.5;",
				"var radius = 0.5;",
				"var rows = 2;",
				"var amount = Math.floor( words.length / rows );",
				"",
				"var dictionary = {};",
				"var group = new THREE.Group();",
				"",
				"group.userData.dictionary = dictionary;",
				"group.visible = false;",
				"",
				"Text.ready( setup );",
				"",
				"var circle = {",
				"\tvertices: {",
				"\t\ttop: {",
				"\t\t\tinner: [],",
				"\t\t\touter: []",
				"\t\t},",
				"\t\tbottom: {",
				"\t\t\tinner: [],",
				"\t\t\touter: []",
				"\t\t},",
				"\t},",
				"\tgeometry: new THREE.BufferGeometry(),",
				"\tmaterial: new THREE.LineBasicMaterial( {",
				"\t\tcolor: 'black'",
				"\t} )",
				"};",
				"",
				"function setup() {",
				"",
				"\tif ( group.children.length <= 0 ) {",
				"\t\tcreateCard( 0 );",
				"\t}",
				"",
				"}",
				"",
				"function createCard( wid ) {",
				"",
				"\tvar mesh;",
				"",
				"\tif ( wid >= words.length ) {",
				"",
				"\t\tcreateCircle();",
				"\t\tgroup.visible = true;",
				"",
				"\t\treturn;",
				"\t}",
				"",
				"\tvar i = Math.floor( wid / rows );",
				"\tvar j = wid % rows;",
				"",
				"\tvar pct = i / amount;",
				"\tvar theta = pct * Math.PI * 2;",
				"",
				"\tvar r = radius + radiusOffset;",
				"\tvar x = Math.cos( theta );",
				"\tvar y = 2.0 * radius * ( 2 * j / ( rows - 1 ) - 1 );",
				"\tvar z = Math.sin( theta );",
				"\tvar word = words[ wid ].toUpperCase();",
				"\tvar styles = {",
				"\t\tfill: 'black'",
				"\t};",
				"",
				"\tif ( word ) {",
				"",
				"\t\tmesh = Text.create( word, styles );",
				"\t\tmesh.material.uniforms.flipped.value = j > 0;",
				"\t\tmesh.material.depthWrite = false;",
				"",
				"\t\tmesh.position.x = r * x;",
				"\t\tmesh.position.y = y + ( ( i % 2 ) ? - 0.001 : 0.001 );",
				"\t\tmesh.position.z = r * z;",
				"\t\tmesh.rotation.y = - theta - HALF_PI;",
				"",
				"\t\tif ( /(north|south|east|west)/i.test( word ) ) {",
				"\t\t\tmesh.scale.x = radius * 0.66;",
				"\t\t\tmesh.scale.y = radius * 0.66;",
				"\t\t\tmesh.scale.z = radius * 0.66;",
				"\t\t} else {",
				"\t\t\tmesh.material.uniforms.opacity.value = 0.25;",
				"\t\t\tmesh.scale.x = radius * 0.5;",
				"\t\t\tmesh.scale.y = radius * 0.5;",
				"\t\t\tmesh.scale.z = radius * 0.5;",
				"\t\t\tdictionary[ word ] = mesh;",
				"\t\t}",
				"",
				"",
				"\t\tgroup.add( mesh );",
				"",
				"\t}",
				"",
				"\tvar section = y > 0 ? 'top' : 'bottom';",
				"\tvar vertices = circle.vertices[ section ];",
				"",
				"\tvar inner = vertices.inner;",
				"\tvar outer = vertices.outer;",
				"",
				"\tvar ir = r * 0.85;",
				"\tvar or = r * 0.85 + radius * 0.66;",
				"",
				"\tvar ts = 0.070;",
				"\tvar tw = 0.005;",
				"\tvar tt = 0.005;",
				"\tvar td = ts - tw;",
				"\tvar te = ts + tt;",
				"",
				"\tinner.push( x * ir, y, z * ir );",
				"\touter.push( x * or, y, z * or );",
				"",
				"\tif ( i > 0 ) {",
				"",
				"\t\t// Tick Mark",
				"\t\tpct = ( i + 0.5 ) / amount;",
				"\t\ttheta = pct * Math.PI * 2;",
				"\t\t",
				"\t\tvar tx = Math.cos( theta );",
				"\t\tvar tz = Math.sin( theta );",
				"",
				"\t\tinner.push( ( ir - tw ) * tx, y, ( ir - tw ) * tz );",
				"\t\tinner.push( ( ir + td ) * tx, y, ( ir + td ) * tz );",
				"",
				"\t\touter.push( ( or - tt ) * tx, y, ( or - tt ) * tz );",
				"\t\touter.push( ( or - te ) * tx, y, ( or - te ) * tz );",
				"",
				"\t\t// Double up because they are line segments",
				"\t\tinner.push( x * ir, y, z * ir );",
				"\t\touter.push( x * or, y, z * or );",
				"",
				"\t\t// Make last point go back to first point",
				"\t\t// in the circle",
				"\t\tif ( i >= amount - 1 ) {",
				"",
				"\t\t\tcircle.vertices[ section ].inner = inner.concat(",
				"\t\t\t\tinner.slice( 0, 3 ) );",
				"\t\t\tcircle.vertices[ section ].outer = outer.concat(",
				"\t\t\t\touter.slice( 0, 3 ) );",
				"",
				"\t\t\tinner = circle.vertices[ section ].inner;",
				"\t\t\touter = circle.vertices[ section ].outer;",
				"",
				"\t\t\t// Final Tick Mark",
				"\t\t\tpct = ( i + 1 + 0.5 ) / amount;",
				"\t\t\ttheta = pct * Math.PI * 2;",
				"",
				"\t\t\tvar tx = Math.cos( theta );",
				"\t\t\tvar tz = Math.sin( theta );",
				"",
				"\t\t\tinner.push( ( ir - tw ) * tx, y, ( ir - tw ) * tz );",
				"\t\t\tinner.push( ( ir + td ) * tx, y, ( ir + td ) * tz );",
				"",
				"\t\t\touter.push( ( or - tt ) * tx, y, ( or - tt ) * tz );",
				"\t\t\touter.push( ( or - te ) * tx, y, ( or - te ) * tz );",
				"",
				"\t\t}",
				"",
				"\t}",
				"",
				"\tif ( mesh ) {",
				"\t\trenderer.render( scene, camera );",
				"\t}",
				"",
				"\trequestAnimationFrame( function() {",
				"\t\tcreateCard( wid + 1 );",
				"\t} );",
				"",
				"}",
				"",
				"function createCircle() {",
				"",
				"\tvar vertices = circle.vertices.top.inner.concat(",
				"\t\tcircle.vertices.top.outer, circle.vertices.bottom.inner,",
				"\t\tcircle.vertices.bottom.outer );",
				"",
				"\tvar attribute = new THREE.Float32BufferAttribute( vertices, 3 );",
				"\tcircle.geometry.addAttribute( 'position', attribute );",
				"",
				"\tcircle = new THREE.LineSegments( circle.geometry, circle.material );",
				"\tgroup.add( circle );",
				"",
				"}",
				"",
				"function shuffle( array ) {",
				"",
				"  var currentIndex = array.length, temporaryValue, randomIndex;",
				"",
				"  // While there remain elements to shuffle...",
				"  while ( 0 !== currentIndex ) {",
				"",
				"    // Pick a remaining element...",
				"    randomIndex = Math.floor( Math.random() * currentIndex );",
				"    currentIndex -= 1;",
				"",
				"    // And swap it with the current element.",
				"    temporaryValue = array[ currentIndex ];",
				"    array[ currentIndex ] = array[ randomIndex ];",
				"    array[ randomIndex ] = temporaryValue;",
				"",
				"  }",
				"",
				"  return array;",
				"",
				"}",
				"",
				"scene.add( group );",
				"resources.set( 'lyrics', group );"
			]
		],
		[
			"Compass",
			[
				"var scene = resources.get( 'scene' );",
				"var Button = resources.get( 'Button' );",
				"var interaction = resources.get( 'interaction' );",
				"",
				"var amount = 4;",
				"var radius = 0.5;",
				"",
				"var cylinderRadius = 3 * radius;",
				"var compass = new THREE.Group();",
				"var cylinder = new THREE.Mesh(",
				"\tnew THREE.CylinderBufferGeometry( cylinderRadius, cylinderRadius, 2, 16, 1 ),",
				"\tnew THREE.MeshBasicMaterial( {",
				"\t\tcolor: 0x000000,",
				"\t\ttransparent: true,",
				"\t\topacity: 0,",
				"\t\twireframe: true,",
				"\t\tside: THREE.BackSide",
				"\t} )",
				");",
				"",
				"cylinder.renderOrder = 100;",
				"",
				"interaction.listen( cylinder );",
				"cylinder.visible = false;",
				"",
				"var list = [];",
				"",
				"var circle = {",
				"\tvertices: {",
				"\t\ttop: [],",
				"\t\tbottom: [],",
				"\t},",
				"\tgeometry: new THREE.BufferGeometry(),",
				"\tmaterial: new THREE.LineBasicMaterial( {",
				"\t\tcolor: 'black'",
				"\t} )",
				"};",
				"",
				"var arrow = {",
				"\tvertices: [",
				"",
				"\t\t- 0.15,   0.00, 0.00,",
				"\t\t- 0.50,   0.00, 0.00,",
				"",
				"\t\t- 0.50,   0.00, 0.00,",
				"\t\t- 0.48,   0.02, 0.00,",
				"",
				"\t\t- 0.50,   0.00, 0.00,",
				"\t\t- 0.48, - 0.02, 0.00,",
				"",
				"\t\t//",
				"",
				"\t\t0.15,   0.00, 0.00,",
				"\t\t0.50,   0.00, 0.00,",
				"",
				"\t\t0.50,   0.00, 0.00,",
				"\t\t0.48,   0.02, 0.00,",
				"",
				"\t\t0.50,   0.00, 0.00,",
				"\t\t0.48, - 0.02, 0.00",
				"",
				"\t],",
				"\tgeometry: new THREE.BufferGeometry(),",
				"\tmaterial: new THREE.LineBasicMaterial( {",
				"\t\tcolor: 'black',",
				"\t\ttransparent: true,",
				"\t\topacity: 0.25,",
				"\t\tdepthWrite: false",
				"\t} )",
				"};",
				"",
				"arrow.geometry.addAttribute( 'position',",
				"\tnew THREE.Float32BufferAttribute( arrow.vertices, 3 )",
				");",
				"",
				"for ( var i = 0, button, pct, x, y, z; i < amount; i++ ) {",
				"",
				"\tpct = i / amount;",
				"",
				"\tbutton = createButton( pct, 'bottom' );",
				"\tbutton = createButton( pct, 'top' );",
				"",
				"}",
				"",
				"createCircle();",
				"",
				"function createButton( pct, section ) {",
				"",
				"\tvar x, y, z;",
				"\tvar theta = Math.PI * 2 * pct;",
				"\tvar button = Button.create( 0.25, 'cone' );",
				"\tvar vertices = circle.vertices[ section ];",
				"\tvar cos = Math.cos( theta );",
				"\tvar sin = Math.sin( theta );",
				"",
				"\ty = 1;",
				"",
				"\tif ( /bottom/i.test( section ) ) {",
				"\t\ty *= - 1;",
				"\t}",
				"",
				"\tbutton.position.x = 3 * radius * cos;",
				"\tbutton.position.z = 3 * radius * sin;",
				"\tbutton.lookAt( compass.position );",
				"",
				"\tbutton.position.y = y;",
				"",
				"\tx = 2.75 * radius * cos;",
				"\tz = 2.75 * radius * sin;",
				"",
				"\tvertices.push( x, y, z );",
				"",
				"\tx = 2.36 * radius * cos;",
				"\tz = 2.36 * radius * sin;",
				"",
				"\tvertices.push( x, y, z );",
				"",
				"\tvar meta = createArrow();",
				"\tmeta.position.z = - 0.06;",
				"\tbutton.add( meta );",
				"\tbutton.userData.arrow = meta;",
				"",
				"\tinteraction.listen( button );",
				"",
				"\tbutton.addEventListener( 'primary-down', pointerdown );",
				"\tbutton.addEventListener( 'over', over );",
				"\tbutton.addEventListener( 'out', out );",
				"\tcompass.add( button );",
				"\tlist.push( button );",
				"\t",
				"\treturn button;",
				"",
				"}",
				"",
				"function createArrow() {",
				"",
				"\tvar line = new THREE.LineSegments( arrow.geometry, arrow.material.clone() );",
				"",
				"\tline.userData.tween = new TWEEN.Tween( line.material )",
				"\t\t.easing( TWEEN.Easing.Circular.Out );",
				"",
				"\treturn line;",
				"",
				"}",
				"",
				"function createCircle() {",
				"",
				"\tvar vertices = circle.vertices.top.concat( circle.vertices.bottom );",
				"\tvar attribute = new THREE.Float32BufferAttribute( vertices, 3 );",
				"\tcircle.geometry.addAttribute( 'position', attribute );",
				"",
				"\tcircle = new THREE.LineSegments( circle.geometry, circle.material );",
				"\tcompass.add( circle );",
				"",
				"}",
				"",
				"function pointerdown( e ) {",
				"",
				"\tif ( cylinder.visible ) {",
				"\t\t// This means we're already focused",
				"\t\t// on using the compass with a",
				"\t\t// difference controller.",
				"\t\treturn;",
				"\t}",
				"",
				"\tover( e );",
				"\tcylinder.visible = true;",
				"\tcylinder.userData.controller = e.controller;",
				"",
				"\tfor ( var i = 0; i < list.length; i++ ) {",
				"\t\tvar button = list[ i ];",
				"\t\tinteraction.ignore( button );",
				"\t}",
				"",
				"\tinteraction.addEventListener( 'primary-up', pointerup );",
				"\tcompass.dispatchEvent( { type: 'focus' } );",
				"",
				"}",
				"",
				"function over( e ) {",
				"",
				"\tvar button = e.target;",
				"\tvar arrow = button.userData.arrow;",
				"\tvar tween = arrow.userData.tween;",
				"\tvar params = {",
				"\t\topacity: 1",
				"\t};",
				"",
				"\tbutton.userData.hovering = true;",
				"",
				"\tif ( !cylinder.visible ) {",
				"\t\ttween.stop()",
				"\t\t\t.to( params, 750 )",
				"\t\t\t.start();",
				"\t}",
				"",
				"}",
				"",
				"function out( e ) {",
				"",
				"\tvar button = e.target;",
				"\tvar arrow = button.userData.arrow;",
				"\tvar tween = arrow.userData.tween;",
				"\tvar ended = arrow.userData.ended;",
				"\tvar params = {",
				"\t\topacity: 0.25",
				"\t};",
				"",
				"\tbutton.userData.hovering = false;",
				"",
				"\tif ( !cylinder.visible ) {",
				"\t\ttween.stop()",
				"\t\t\t.to( params, 750 )",
				"\t\t\t.start();",
				"\t}",
				"",
				"}",
				"",
				"function pointerup( e ) {",
				"",
				"\tif ( e.controller.uuid !== cylinder.userData.controller.uuid ) {",
				"\t\t// A different controller dispatched",
				"\t\t// the `pointer-up` event and it means",
				"\t\t// that we should still be focused",
				"\t\t// on updating the compass.",
				"\t\treturn;",
				"\t}",
				"",
				"\tcylinder.visible = false;",
				"\tdelete cylinder.userData.controller;",
				"\tdelete cylinder.userData.origin;",
				"",
				"\tfor ( var i = 0; i < list.length; i++ ) {",
				"\t\tvar button = list[ i ];",
				"\t\tif ( !button.userData.hovering ) {",
				"\t\t\tout( { target: button } );",
				"\t\t}",
				"\t\tinteraction.listen( button );",
				"\t}",
				"",
				"\tinteraction.removeEventListener( 'primary-up', pointerup );",
				"\tcompass.dispatchEvent( { type: 'blur' } );",
				"",
				"}",
				"",
				"function update() {",
				"",
				"\tif ( cylinder.visible ) {",
				"",
				"\t\tvar controller = cylinder.userData.controller;",
				"\t\tvar intersection = interaction.intersections[ controller.uuid ];",
				"",
				"\t\tif ( intersection && intersection.object.uuid === cylinder.uuid ) {",
				"",
				"\t\t\tvar point = intersection.point;",
				"\t\t\tvar theta = Math.atan2( - point.z, - point.x );",
				"",
				"\t\t\tif ( typeof cylinder.userData.origin === 'undefined' ) {",
				"\t\t\t\tcylinder.userData.origin = theta;",
				"\t\t\t}",
				"",
				"\t\t\tvar delta = theta - cylinder.userData.origin;",
				"\t\t\tcylinder.userData.origin = theta;",
				"",
				"\t\t\tcompass.dispatchEvent( {",
				"\t\t\t\ttype: 'drag',",
				"\t\t\t\tcontroller: controller,",
				"\t\t\t\ttheta: - delta",
				"\t\t\t} );",
				"",
				"\t\t}",
				"",
				"\t}",
				"",
				"}",
				"",
				"compass.userData.update = update;",
				"",
				"scene.add( compass, cylinder );",
				"",
				"resources.set( 'compass', compass );"
			]
		],
		[
			"Polar Spheres",
			[
				"var scene = resources.get( 'scene' );",
				"var backdrop = resources.get( 'backdrop' );",
				"",
				"var group = new THREE.Group();",
				"",
				"var geometry = new THREE.SphereBufferGeometry( 1, 40, 40 );",
				"var material = new THREE.ShaderMaterial( {",
				"\tuniforms: {",
				"\t\ttime: { type: 'f', value: 0 },",
				"\t\tcSource: { type: 'c', value: backdrop.material.uniforms.cSource.value },",
				"\t\tcTarget: { type: 'c', value: backdrop.material.uniforms.cTarget.value },",
				"\t\timage: { type: 'c', value: null },",
				"\t\tfrequency: { type: 'f', value: 1 }",
				"\t},",
				"\tvertexShader: [",
				"",
				"\t\t'const float PI = ' + Math.PI + ';',",
				"",
				"\t\t'uniform float time;',",
				"\t\t'uniform float frequency;',",
				"",
				"\t\t'varying vec2 vUv;',",
				"\t\t'varying vec3 vReflect;',",
				"\t\t'varying float vRim;',",
				"",
				"\t\t'vec3 getPosition( vec3 position ) {',",
				"",
				"\t\t\t'vec3 n = normalize( position );',",
				"",
				"\t\t\t'float qpi = PI * 0.25;',",
				"\t\t\t'float amp = PI * frequency;',",
				"\t\t\t'float phi = amp * ( cos( qpi * n.x ) + sin( qpi * n.z ) );',",
				"",
				"\t\t\t'float osc = sin( time + phi );',",
				"\t\t\t'float radius = 0.1 * osc + 0.8;',",
				"\t\t\t'return radius * n;',",
				"",
				"\t\t'}',",
				"",
				"\t\t'vec3 getAdjacent( vec3 position, vec2 offset ) {',",
				"",
				"\t\t\t'float theta;',",
				"\t\t\t'float l = length( position );',",
				"",
				"\t\t\t'vec3 p1 = vec3( offset.xyx );',",
				"\t\t\t'theta = atan( position.z, position.x ) + PI * 0.5;',",
				"\t\t\t'p1.x = offset.x * cos( theta );',",
				"\t\t\t'p1.z = offset.x * sin( theta );',",
				"",
				"\t\t\t'vec3 p2 = vec3( offset.xxy );',",
				"\t\t\t'theta = atan( position.y, position.x ) + PI * 0.5;',",
				"\t\t\t'p2.x = offset.x * cos( theta );',",
				"\t\t\t'p2.y = offset.x * sin( theta );',",
				"",
				"\t\t\t'float fade = step( 0.9, abs( position.y / l ) );',",
				"\t\t\t'vec3 v = position + mix( p1, p2, fade );',",
				"",
				"\t\t\t'return getPosition( l * normalize( v ) );',",
				"",
				"\t\t'}',",
				"",
				"\t\t'vec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {',",
				"\t\t\t'return normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );',",
				"\t\t'}',",
				"",
				"\t\t'void main() {',",
				"",
				"\t\t\t'vUv = uv;',",
				"\t\t\t'vec2 eps;',",
				"\t\t\t'vec3 pos = getPosition( position );',",
				"",
				"\t\t\t'eps = vec2( 0.02, 0.0 );',",
				"\t\t\t'vec3 top = getAdjacent( pos, eps );',",
				"\t\t\t'vec3 bottom = getAdjacent( pos, - eps );',",
				"",
				"\t\t\t'eps = vec2( 0.0, 0.02 );',",
				"\t\t\t'vec3 left = getAdjacent( pos, eps );',",
				"\t\t\t'vec3 right = getAdjacent( pos, - eps );',",
				"",
				"\t\t\t'vec3 fNor = cross( normalize( left - right ), normalize( top - bottom ) );',",
				"",
				"\t\t\t'vec3 objectNormal = vec3( fNor );',",
				"\t\t\t'vec4 worldPosition = modelMatrix * vec4( pos, 1.0 );',",
				"\t\t\t'vec3 cameraToVertex = normalize( worldPosition.xyz - cameraPosition );',",
				"",
				"\t\t\t'vec3 transformedNormal = normalMatrix * objectNormal;',",
				"\t\t\t'vec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );',",
				"\t\t\t'vReflect = reflect( cameraToVertex, worldNormal );',",
				"\t\t\t'vRim = 1.0 - clamp( pow( dot( cameraToVertex, worldNormal ), 2.0 ), 0.0, 1.0 );',",
				"",
				"\t\t\t'gl_Position = projectionMatrix * modelViewMatrix * vec4( pos, 1.0 );',",
				"",
				"\t\t'}'",
				"",
				"\t].join( '\\n' ),",
				"\tfragmentShader: [",
				"",
				"\t\t'const float PI = ' + Math.PI + ';',",
				"\t\t'const vec3 white = vec3( 1.0 );',",
				"",
				"\t\t'uniform float time;',",
				"\t\t'uniform vec3 cSource;',",
				"\t\t'uniform vec3 cTarget;',",
				"\t\t'uniform sampler2D image;',",
				"",
				"\t\t'varying vec2 vUv;',",
				"\t\t'varying vec3 vReflect;',",
				"\t\t'varying float vRim;',",
				"",
				"\t\t'float noise( vec2 p ) {',",
				"\t\t\t'return sin( p.x * 6.0 ) * sin( p.y * ( 6.0 + sin( 0.05 * time ) ) ) + 0.2;',",
				"\t\t'}',",
				"",
				"\t\t'mat2 rotate( float angle ) {',",
				"\t\t\t'return mat2( cos( angle ), - sin( angle ), sin( angle ), cos( angle ) );',",
				"\t\t'}',",
				"",
				"\t\t'float fbm( vec2 p ) {',",
				"\t\t\t'p *= 1.1;',",
				"\t\t\t'float f = 0.0;',",
				"\t\t\t'float amp = 0.2;',",
				"\t\t\t'for( int i = 0; i < 3; i++ ) {',",
				"\t\t\t\t'mat2 modify = rotate( 0.01 * time * float( i * i ) );',",
				"\t\t\t\t'f += amp * noise( p );',",
				"\t\t\t\t'p = modify * p;',",
				"\t\t\t\t'p *= 2.0;',",
				"\t\t\t\t'amp /= 2.2;',",
				"\t\t\t'}',",
				"\t\t\t'return f;',",
				"\t\t'}',",
				"",
				"\t\t'float pattern( vec2 p ) {',",
				"\t\t\t'vec2 q = vec2( fbm( p + vec2( 1.0 ) ), fbm( rotate( 0.01 * time ) * p + vec2( 3.0 ) ) );',",
				"\t\t\t'vec2 r = vec2( fbm( rotate( 0.2 ) * q + vec2( 0.0 ) ), fbm( q + vec2( 0.0 ) ) );',",
				"\t\t\t'return fbm( p + 1.0 * r );',",
				"\t\t'}',",
				"",
				"\t\t'void main() {',",
				"",
				"\t\t\t'vec3 reflectVec = normalize( vReflect );',",
				"\t\t\t'float inverseReflect = asin( reflectVec.y );',",
				"",
				"\t\t\t'vec2 mirrorUV = vec2( vUv.xy );',",
				"\t\t\t'mirrorUV.x = sin( mirrorUV.x * PI );',",
				"",
				"\t\t\t'float shading = inverseReflect / ( PI * 0.5 ) + 0.5;',",
				"\t\t\t'float reflection = pow( ( 1.0 + inverseReflect ) * 0.5, 3.0 );',",
				"\t\t\t'float rim = smoothstep( 0.75, 1.0, vRim );',",
				"",
				"\t\t\t'vec3 fill = mix( cSource, cTarget, pattern( mirrorUV ) );',",
				"\t\t\t'vec3 highlight = fill + cTarget;',",
				"",
				"\t\t\t'vec2 sampleUV = vec2( 0.0 );',",
				"\t\t\t'sampleUV.y = shading;',",
				"\t\t\t'sampleUV.x = 1.0 - ( ( atan( reflectVec.z, reflectVec.x ) - PI * 0.25 ) / ( PI * 0.5 ) + 0.5 );',",
				"\t\t\t'sampleUV.y += 0.75;',",
				"\t\t\t'sampleUV *= 0.5;',",
				"\t\t\t'sampleUV.x = mod( sampleUV.x, 1.0 );',",
				"\t\t\t'vec4 texel = texture2D( image, sampleUV );',",
				"",
				"\t\t\t'fill *= mix( cSource, cTarget, shading );',",
				"\t\t\t'fill = mix( fill, highlight, rim );',",
				"\t\t\t'fill = mix( fill, texel.rgb, smoothstep( 0.75, 1.0, texel.a ) );',",
				"\t\t\t'fill = mix( fill, white, reflection + smoothstep( 0.975, 1.0, vRim ) );',",
				"",
				"\t\t\t'gl_FragColor = vec4( fill.xyz, 1.0 );',",
				"",
				"\t\t'}'",
				"",
				"\t].join( '\\n' ),",
				"\ttransparent: true,",
				"} );",
				"",
				"var top = new THREE.Mesh( geometry, material );",
				"",
				"group.userData.update = update;",
				"group.userData.setTexture = setTexture;",
				"group.userData.getFrequency = getFrequency;",
				"group.userData.setFrequency = setFrequency;",
				"group.userData.material = material;",
				"",
				"top.position.y = 2.25;",
				"top.rotation.x = Math.random() * Math.PI * 2;",
				"top.rotation.y = Math.random() * Math.PI * 2;",
				"top.rotation.z = Math.random() * Math.PI * 2;",
				"",
				"group.add( top );",
				"",
				"group.userData.top = top;",
				"",
				"//",
				"",
				"/*",
				"var bot = new THREE.Mesh( geometry, material );",
				"",
				"bot.position.y = - 2.25;",
				"bot.rotation.x = Math.random() * Math.PI * 2;",
				"bot.rotation.y = Math.random() * Math.PI * 2;",
				"bot.rotation.z = Math.random() * Math.PI * 2;",
				"",
				"group.add( bot );",
				"",
				"group.userData.bottom = bot;",
				"*/",
				"",
				"//",
				"",
				"scene.add( group );",
				"",
				"function update( millis ) {",
				"",
				"\tmaterial.uniforms.time.value = millis / 500;",
				"\treturn group;",
				"",
				"}",
				"",
				"function setTexture( texture ) {",
				"",
				"\tmaterial.uniforms.image.value = texture;",
				"\treturn group;",
				"",
				"}",
				"",
				"function getFrequency() {",
				"",
				"\treturn material.uniforms.frequency.value;",
				"",
				"}",
				"",
				"function setFrequency( v ) {",
				"",
				"\tmaterial.uniforms.frequency.value = v;",
				"\treturn group;",
				"",
				"}",
				"",
				"resources.set( 'polar-spheres', group );"
			]
		],
		[
			"Orbit",
			[
				"var backdrop = resources.get( 'backdrop' );",
				"",
				"var TWO_PI = Math.PI * 2;",
				"var color = 0x000000;",
				"var geometries = {",
				"\tring: new THREE.BufferGeometry(),",
				"\tsphere: new THREE.SphereBufferGeometry( 0.01, 16, 16 )",
				"};",
				"var materials = {",
				"\tring: new THREE.LineBasicMaterial( {",
				"\t\tcolor: color",
				"\t} ),",
				"\tsphere: new THREE.MeshBasicMaterial( {",
				"\t\tcolor: color",
				"\t} )",
				"};",
				"",
				"var vertices = [];",
				"var resolution = 64;",
				"",
				"for ( var i = 0; i < resolution; i++ ) {",
				"",
				"\tvar pct = i / ( resolution - 1 );",
				"\tvar theta = TWO_PI * pct;",
				"\tvar x = Math.cos( theta );",
				"\tvar y = 0;",
				"\tvar z = Math.sin( theta );",
				"",
				"\tvertices.push( x, y, z );",
				"",
				"}",
				"",
				"var positionAttribute = new THREE.Float32BufferAttribute( vertices, 3 );",
				"geometries.ring.addAttribute( 'position', positionAttribute );\t",
				"",
				"var material = new THREE.LineBasicMaterial( {",
				"\tcolor: 'black'",
				"} );",
				"",
				"var group = new THREE.Group();",
				"var amount = 4;",
				"var dottedLineExists = false;",
				"",
				"for ( var i = 0; i < amount; i++ ) {",
				"",
				"\tvar distance = i + 4;",
				"\tvar scale = i * Math.random() * 4 + 3;",
				"\tvar opacity = 0.9 - ( i / amount ) * 0.8;",
				"\tvar type = ( !dottedLineExists && Math.random() > 0.66 ) ? 'LineSegments' : 'Line';",
				"",
				"\tvar sphere = new THREE.Mesh( geometries.sphere, materials.sphere );",
				"\tvar ring = new THREE[ type ]( geometries.ring, materials.ring );",
				"",
				"\tsphere.position.x = 1;",
				"",
				"\tring.rotation.x = Math.random() * TWO_PI;",
				"\tring.rotation.y = Math.random() * TWO_PI;",
				"\tring.rotation.z = Math.random() * TWO_PI;",
				"",
				"\tsphere.scale.set( scale, scale, scale );",
				"\tring.scale.set( distance, distance, distance );",
				"",
				"\tring.add( sphere );",
				"\tgroup.add( ring );",
				"",
				"\tif ( type === 'LineSegments' ) {",
				"\t\tdottedLineExists = true;",
				"\t}",
				"",
				"}",
				"",
				"backdrop.add( group );",
				"",
				"resources.set( 'orbit', group );"
			]
		],
		[
			"Title Screen (WebVR)",
			[
				"var Text = resources.get( 'alternate-gothic-3d' );",
				"var scene = resources.get( 'scene' );",
				"var renderer = resources.get( 'renderer' );",
				"var interaction = resources.get( 'interaction' );",
				"var Button = resources.get( 'Button' );",
				"var slash = resources.get( 'slash' );",
				"",
				"var size = 15;",
				"var HALF_PI = Math.PI / 2;",
				"var player;",
				"var dimensions = new THREE.Vector2();",
				"",
				"var styles = {",
				"\tstroke: 'transparent',",
				"\tfill: 'black'",
				"};",
				"var group = new THREE.Group();",
				"var webvr, play;",
				"",
				"group.userData.setPlayer = setPlayer;",
				"",
				"Text.ready( setup );",
				"",
				"function setup() {",
				"",
				"\twebvr = createWebVRButton( renderer, { referenceSpaceType: 'local' } );",
				"\tplay = Button.create( size );",
				"",
				"\twebvr.position.z = 0.6;",
				"\twebvr.position.y = 1;",
				"",
				"\tplay.position.z = - 0.6;",
				"\tplay.position.y = 1;",
				"",
				"\tvar label = play.userData.label = Text.create( 'PLAY', styles );",
				"\tlabel.userData.textures = {",
				"\t\tplay: label.material.uniforms.image.value,",
				"\t\tpause: new THREE.Texture( Text.get( 'PAUSE', styles ).canvas )",
				"\t};",
				"",
				"\tlabel.scale.x = 0.33;",
				"\tlabel.scale.y = 0.33;",
				"\tlabel.scale.z = 0.33;",
				"",
				"\tlabel.rotation.y = HALF_PI;",
				"\tlabel.rotation.z = Math.PI;",
				"\tlabel.position.x = - 0.125;",
				"",
				"\tlabel.userData.textures.pause.minFilter = THREE.LinearFilter;",
				"\tlabel.userData.textures.pause.magFilter = THREE.LinearFilter;",
				"\tlabel.userData.textures.pause.generateMipMaps = false;",
				"\tlabel.userData.textures.pause.needsUpdate = true;",
				"",
				"\tplay.add( label );",
				"",
				"\tplay.addEventListener( 'primary-down', toggle );",
				"\tinteraction.listen( play );",
				"",
				"\tgroup.add( webvr );",
				"\tgroup.add( play );",
				"\tscene.add( group );",
				"",
				"\tgroup.userData.play = play;",
				"\tgroup.userData.webvr = webvr;",
				"",
				"\tscene.addEventListener( 'resize', resize );",
				"\tresize();",
				"",
				"}",
				"",
				"function resize() {",
				"",
				"\trenderer.getSize( dimensions );",
				"",
				"\t// Ensure the buttons are visible on",
				"\t// any screen orientation.",
				"\tif ( dimensions.x > dimensions.y ) {",
				"\t\twebvr.position.x = 0;",
				"\t\twebvr.position.z = 0.6;",
				"\t\tplay.position.x = 0;",
				"\t\tplay.position.z = - 0.6;",
				"\t} else {",
				"\t\twebvr.position.x = 0.5;",
				"\t\twebvr.position.z = 0;",
				"\t\tplay.position.x = - 0.5;",
				"\t\tplay.position.z = 0;",
				"\t}",
				"",
				"}",
				"",
				"function toggle( e ) {",
				"",
				"\tvar label = play.userData.label;",
				"",
				"\tif ( !player ) {",
				"\t\tconsole.warn( 'Title-Screen: Unable to toggler. Player has not been set yet!' );",
				"\t\treturn;",
				"\t}",
				"",
				"\tif ( player.isPlaying ) {",
				"\t\tplayer.pause();",
				"\t\tlabel.material.uniforms.image.value = label.userData.textures.play;",
				"\t} else {",
				"\t\tplayer.play();",
				"\t\tlabel.material.uniforms.image.value = label.userData.textures.pause;",
				"\t}",
				"",
				"\tplay.userData.isPlaying = player.isPlaying;",
				"",
				"}",
				"",
				"/*",
				" * Adapted from https://github.com/mrdoob/three.js/blob/master/examples/js/vr/WebVR.js",
				" */",
				"function createWebVRButton( renderer, options ) {",
				"",
				"\tvar button = Button.create( size );",
				"",
				"\taddSlash( button );",
				"",
				"\tvar label = button.userData.label = Text.create( 'ENTER VR', styles );",
				"\tlabel.userData.textures = {",
				"\t\tenter: label.material.uniforms.image.value,",
				"\t\texit: new THREE.Texture( Text.get( 'EXIT VR', styles ).canvas ),",
				"\t\tunfound: new THREE.Texture( Text.get( 'VR NOT FOUND', styles ).canvas ),",
				"\t\tunsupported: new THREE.Texture( Text.get( 'VR NOT SUPPORTED', styles ).canvas )",
				"\t};",
				"",
				"\tlabel.rotation.y = HALF_PI;",
				"\tlabel.rotation.z = Math.PI;",
				"\tlabel.position.x = - 0.125;",
				"",
				"\tlabel.scale.x = 0.66;",
				"\tlabel.scale.y = 0.66;",
				"\tlabel.scale.z = 0.66;",
				"",
				"\tlabel.userData.textures.exit.minFilter = THREE.LinearFilter;",
				"\tlabel.userData.textures.exit.magFilter = THREE.LinearFilter;",
				"\tlabel.userData.textures.exit.generateMipMaps = false;",
				"\tlabel.userData.textures.exit.needsUpdate = true;",
				"",
				"\tlabel.userData.textures.unfound.minFilter = THREE.LinearFilter;",
				"\tlabel.userData.textures.unfound.magFilter = THREE.LinearFilter;",
				"\tlabel.userData.textures.unfound.generateMipMaps = false;",
				"\tlabel.userData.textures.unfound.needsUpdate = true;",
				"",
				"\tlabel.userData.textures.unsupported.minFilter = THREE.LinearFilter;",
				"\tlabel.userData.textures.unsupported.magFilter = THREE.LinearFilter;",
				"\tlabel.userData.textures.unsupported.generateMipMaps = false;",
				"\tlabel.userData.textures.unsupported.needsUpdate = true;",
				"",
				"\tbutton.add( label );",
				"",
				"\tinteraction.listen( button );",
				"",
				"\tif ( options && options.referenceSpaceType ) {",
				"",
				"\t\trenderer.vr.setReferenceSpaceType( options.referenceSpaceType );",
				"",
				"\t}",
				"",
				"\tshowEnterVR.isListening = false;",
				"",
				"\tfunction showEnterVR( device ) {",
				"",
				"\t\tif ( showEnterVR.isListening ) {",
				"\t\t\treturn;",
				"\t\t}",
				"",
				"\t\tbutton.addEventListener( 'primary-up', function ( e ) {",
				"",
				"\t\t\tif ( device.isPresenting ) {",
				"\t\t\t\tdevice.exitPresent();",
				"\t\t\t\trenderer.vr.enabled = false;",
				"\t\t\t} else {",
				"\t\t\t\trenderer.vr.enabled = true;",
				"\t\t\t\tdevice.requestPresent( [ { source: renderer.domElement } ] )",
				"\t\t\t}",
				"",
				"\t\t} );",
				"",
				"\t\tif ( typeof window !== 'undefined' && 'VRFrameData' in window ) {",
				"",
				"\t\t\twindow.addEventListener( 'vrdisplaypresentchange', onVRDisplayPresentChange, false );",
				"",
				"\t\t}",
				"",
				"\t\trenderer.vr.setDevice( device );",
				"\t\tshowEnterVR.isListening = true;",
				"",
				"\t\tfunction onVRDisplayPresentChange() {",
				"",
				"\t\t\tif ( !renderer.vr.isPresenting() && renderer.vr.enabled ) {",
				"\t\t\t\trenderer.vr.enabled = false;",
				"\t\t\t}",
				"",
				"\t\t}",
				"",
				"\t}",
				"",
				"\tshowEnterXR.isListening = false;",
				"",
				"\tfunction showEnterXR( device ) {",
				"",
				"\t\tif ( showEnterXR.isListening ) {",
				"\t\t\treturn;",
				"\t\t}",
				"",
				"\t\tvar currentSession = null;",
				"",
				"\t\tfunction onSessionStarted( session ) {",
				"",
				"\t\t\tsession.addEventListener( 'end', onSessionEnded );",
				"",
				"\t\t\trenderer.vr.setSession( session );",
				"\t\t\tlabel.material.uniforms.image.value = label.userData.textures.exit;",
				"\t\t\tlabel.scale.x = 0.5;",
				"\t\t\tlabel.scale.y = 0.5;",
				"\t\t\tlabel.scale.z = 0.5;",
				"",
				"\t\t\tcurrentSession = session;",
				"",
				"\t\t}",
				"",
				"\t\tfunction onSessionEnded( event ) {",
				"",
				"\t\t\tcurrentSession.removeEventListener( 'end', onSessionEnded );",
				"",
				"\t\t\trenderer.vr.setSession( null );",
				"\t\t\trenderer.vr.enabled = false;",
				"\t\t\tlabel.material.uniforms.image.value = label.userData.textures.enter;",
				"\t\t\tlabel.scale.x = 0.66;",
				"\t\t\tlabel.scale.y = 0.66;",
				"\t\t\tlabel.scale.z = 0.66;",
				"",
				"\t\t\tcurrentSession = null;",
				"",
				"\t\t}",
				"",
				"\t\t//",
				"",
				"\t\tbutton.addEventListener( 'primary-up', function () {",
				"",
				"\t\t\tif ( currentSession === null ) {",
				"",
				"\t\t\t\trenderer.vr.enabled = true;",
				"\t\t\t\tnavigator.xr.requestSession( 'immersive-vr' ).then( onSessionStarted );",
				"",
				"\t\t\t} else {",
				"",
				"\t\t\t\tcurrentSession.end();",
				"",
				"\t\t\t}",
				"",
				"\t\t} );",
				"",
				"\t\tshowEnterXR.isListening = true;",
				"",
				"\t}",
				"",
				"\tfunction showVRNotFound() {",
				"",
				"\t\tlabel.material.uniforms.image.value = label.userData.textures.unfound;",
				"\t\tlabel.material.uniforms.opacity.value = 0.5;",
				"\t\tlabel.scale.x = 0.66;",
				"\t\tlabel.scale.y = 0.66;",
				"\t\tlabel.scale.z = 0.66;",
				"",
				"\t\tinteraction.ignore( button );",
				"\t\tbutton.userData.slash.visible = true;",
				"\t\trenderer.vr.setDevice( null );",
				"",
				"\t}",
				"",
				"\tif ( 'xr' in navigator && 'isSessionSupported' in navigator.xr ) {",
				"",
				"\t\tnavigator.xr.isSessionSupported( 'immersive-vr' ).then( function ( supported ) {",
				"",
				"\t\t\tif ( supported ) showEnterXR();",
				"",
				"\t\t} );",
				"",
				"\t\treturn button;",
				"",
				"\t} else if ( 'xr' in navigator && 'supportsSession' in navigator.xr ) {",
				"",
				"\t\tnavigator.xr.supportsSession( 'immersive-vr' ).then( showEnterXR );",
				"",
				"\t\treturn button;",
				"",
				"\t} else if ( 'getVRDisplays' in navigator ) {",
				"",
				"\t\twindow.addEventListener( 'vrdisplayconnect', function ( event ) {",
				"",
				"\t\t\tshowEnterVR( event.display );",
				"",
				"\t\t}, false );",
				"",
				"\t\twindow.addEventListener( 'vrdisplaydisconnect', function ( event ) {",
				"",
				"\t\t\tshowVRNotFound();",
				"",
				"\t\t}, false );",
				"",
				"\t\twindow.addEventListener( 'vrdisplaypresentchange', function ( event ) {",
				"",
				"\t\t\tif ( event.display.isPresenting ) {",
				"\t\t\t\tlabel.material.uniforms.image.value = label.userData.textures.exit;",
				"\t\t\t\tlabel.scale.x = 0.5;",
				"\t\t\t\tlabel.scale.y = 0.5;",
				"\t\t\t\tlabel.scale.z = 0.5;",
				"\t\t\t} else {",
				"\t\t\t\tlabel.material.uniforms.image.value = label.userData.textures.enter;",
				"\t\t\t\tlabel.scale.x = 0.66;",
				"\t\t\t\tlabel.scale.y = 0.66;",
				"\t\t\t\tlabel.scale.z = 0.66;",
				"\t\t\t}",
				"",
				"\t\t}, false );",
				"",
				"\t\twindow.addEventListener( 'vrdisplayactivate', function ( event ) {",
				"",
				"\t\t\tevent.display.requestPresent( [ { source: renderer.domElement } ] );",
				"",
				"\t\t}, false );",
				"",
				"\t\tnavigator.getVRDisplays()",
				"\t\t\t.then( function ( displays ) {",
				"",
				"\t\t\t\tif ( displays.length > 0 ) {",
				"",
				"\t\t\t\t\tshowEnterVR( displays[ 0 ] );",
				"",
				"\t\t\t\t} else {",
				"",
				"\t\t\t\t\tshowVRNotFound();",
				"",
				"\t\t\t\t}",
				"",
				"\t\t\t} ).catch( showVRNotFound );",
				"",
				"\t\treturn button;",
				"",
				"\t} else {",
				"",
				"\t\tlabel.material.uniforms.image.value = label.userData.textures.unsupported;",
				"\t\tlabel.material.uniforms.opacity.value = 0.5;",
				"\t\tlabel.scale.x = 0.75;",
				"\t\tlabel.scale.y = 0.75;",
				"\t\tlabel.scale.z = 0.75;",
				"",
				"\t\tinteraction.ignore( button );",
				"\t\tbutton.userData.slash.visible = true;",
				"",
				"\t\treturn button;",
				"",
				"\t}",
				"",
				"}",
				"",
				"function addSlash( button ) {",
				"",
				"\tbutton.userData.slash = slash.clone();",
				"\tbutton.userData.slash.visible = false;",
				"\tbutton.userData.slash.rotation.y = - Math.PI / 4;",
				"",
				"\tbutton.add( button.userData.slash );",
				"",
				"}",
				"",
				"function setPlayer( value ) {",
				"\tplayer = value;",
				"}",
				"",
				"",
				"resources.set( 'title-screen', group );",
				""
			]
		],
		[
			"Presets",
			[
				"var manager = resources.get( 'audio-manager' );",
				"var Text = resources.get( 'alternate-gothic-3d' );",
				"var scene = resources.get( 'scene' );",
				"var Button = resources.get( 'Button' );",
				"var interaction = resources.get( 'interaction' );",
				"var slash = resources.get( 'slash' );",
				"var timeline = resources.get( 'timeline' );",
				"var paddles = resources.get( 'paddles' );",
				"var lyrics = resources.get( 'lyrics' );",
				"var compass = resources.get( 'compass' );",
				"",
				"var size = 15;",
				"var HALF_PI = Math.PI / 2;",
				"var group = new THREE.Group();",
				"group.rotation.y = Math.PI / 4;",
				"",
				"var radius = 0.4;",
				"var styles = {",
				"\tstroke: 'transparent',",
				"\tfill: 'black'",
				"};",
				"var names = [ 'reset', 'focus', 'randomize', 'mute' ];",
				"var events = {",
				"\treset: reset,",
				"\tfocus: focus,",
				"\trandomize: randomize,",
				"\tmute: mute",
				"};",
				"",
				"Text.ready( setup );",
				"",
				"function setup() {",
				"",
				"\tfor ( var i = 0; i < names.length; i++ ) {",
				"",
				"\t\tvar name = names[ i ];",
				"\t\tvar control = Button.create( size );",
				"\t\tvar pct = i / names.length;",
				"\t\tvar theta = Math.PI * 2 * pct;",
				"",
				"\t\tvar label = Text.create( name.toUpperCase(), styles );",
				"",
				"\t\tlabel.scale.x = 0.33;",
				"\t\tlabel.scale.y = 0.33;",
				"\t\tlabel.scale.z = 0.33;",
				"",
				"\t\tif ( name === 'randomize' ) {",
				"\t\t\tlabel.scale.x = 0.60;",
				"\t\t\tlabel.scale.y = 0.60;",
				"\t\t\tlabel.scale.z = 0.60;",
				"\t\t} else if ( name === 'mute' ) {",
				"\t\t\tlabel.scale.x = 0.28;",
				"\t\t\tlabel.scale.y = 0.28;",
				"\t\t\tlabel.scale.z = 0.28;",
				"\t    } else {",
				"\t\t\tlabel.scale.x = 0.33;",
				"\t\t\tlabel.scale.y = 0.33;",
				"\t\t\tlabel.scale.z = 0.33;",
				"\t\t}",
				"",
				"\t\tlabel.position.x = 0.125;",
				"\t\tlabel.rotation.y = - HALF_PI;",
				"\t\tlabel.material.uniforms.opacity.value = 0.5;",
				"",
				"\t\tcontrol.userData.name = name;",
				"",
				"\t\tcontrol.position.x = radius * Math.cos( theta );",
				"\t\tcontrol.position.y = - 1;",
				"\t\tcontrol.position.z = radius * Math.sin( theta );",
				"",
				"\t\tcontrol.rotation.y = - theta;",
				"",
				"\t\tcontrol.add( label );",
				"\t\tcontrol.addEventListener( 'primary-down', events[ name ] );",
				"",
				"\t\tinteraction.listen( control );",
				"\t\tgroup.add( control );",
				"\t\tgroup.userData[ name ] = control;",
				"",
				"\t\tswitch ( name ) {",
				"\t\t\tcase 'focus':",
				"\t\t\tcase 'mute':",
				"\t\t\t\taddSlash( control );",
				"\t\t\t\tbreak;",
				"\t\t}",
				"",
				"\t}",
				"",
				"}",
				"",
				"function addSlash( button ) {",
				"",
				"\tbutton.userData.slash = slash.clone();",
				"\tbutton.userData.slash.visible = false;",
				"\tbutton.userData.slash.rotation.y = - Math.PI / 4;",
				"",
				"\tbutton.add( button.userData.slash );",
				"",
				"}",
				"",
				"function reset() {",
				"",
				"\tfor ( var i = 0; i < paddles.userData.list.length; i++ ) {",
				"\t\tvar paddle = paddles.userData.list[ i ];",
				"\t\tpaddle.dispatchEvent( { type: 'update', value: 0 } );",
				"\t}",
				"",
				"}",
				"",
				"function focus( e ) {",
				"",
				"\tvar button = e.target;",
				"\tvar slash = button.userData.slash;",
				"\tvar visible = true;",
				"",
				"\tif ( compass.visible ) {",
				"\t\tvisible = false;",
				"\t}",
				"",
				"\ttimeline.visible = visible;",
				"\tpaddles.visible = visible;",
				"\t// lyrics.visible = visible;",
				"\tcompass.visible = visible;",
				"",
				"\tslash.visible = !visible;",
				"",
				"}",
				"",
				"function randomize() {",
				"",
				"\tfor ( var i = 0; i < paddles.userData.list.length; i++ ) {",
				"\t\tvar paddle = paddles.userData.list[ i ];",
				"\t\tpaddle.dispatchEvent( { type: 'update', value: 2 * Math.random() - 1 } );",
				"\t}",
				"",
				"}",
				"",
				"function mute( e ) {",
				"",
				"\tvar button = e.target;",
				"\tvar slash = button.userData.slash;",
				"\tvar value = manager.master.gain.value;",
				"",
				"\tmanager.master.gain.value = value > 0 ? 0 : 1;",
				"\tslash.visible = manager.master.gain.value === 0;",
				"",
				"\tbutton.dispatchEvent( { type: 'mute', muted: slash.visible } );",
				"",
				"}",
				"",
				"scene.add( group );",
				"",
				"resources.set( 'presets', group );"
			]
		],
		[
			"VJ Features",
			[
				"var params = resources.get( 'params' );",
				"var manager = resources.get( 'audio-manager' );",
				"var backdrop = resources.get( 'backdrop' );",
				"var ring = resources.get( 'ring' );",
				"var playhead = resources.get( 'playhead' );",
				"var timeline = resources.get( 'timeline' );",
				"var paddles = resources.get( 'paddles' );",
				"var debris = resources.get( 'debris' );",
				"var boids = resources.get( 'boids' );",
				"var lyrics = resources.get( 'lyrics' );",
				"var lights = resources.get( 'lights' );",
				"var compass = resources.get( 'compass' );",
				"var presets = resources.get( 'presets' );",
				"",
				"var orbitals = [ ring, timeline, paddles, boids, lyrics, compass, presets ];",
				"var theta = 0;",
				"var snaps = 2;  // Makes 5 total snappable index positions",
				"var range = 1;",
				"",
				"// In millis",
				"var duration = 350;",
				"var vector = new THREE.Vector3();",
				"",
				"playhead.addEventListener( 'focus', startScrub );",
				"playhead.addEventListener( 'drag', scrub );",
				"playhead.addEventListener( 'blur', endScrub );",
				"",
				"compass.addEventListener( 'focus', freeze );",
				"compass.addEventListener( 'drag', orient );",
				"compass.addEventListener( 'blur', release );",
				"",
				"for ( var j = 0; j < paddles.children.length; j++ ) {",
				"",
				"\tvar paddle = paddles.children[ j ];",
				"",
				"\tif ( !paddle.userData.isPaddle ) {",
				"\t\tcontinue;",
				"\t}",
				"",
				"\tpaddle.addEventListener( 'focus', focus );",
				"\tpaddle.addEventListener( 'update', update );",
				"\tpaddle.addEventListener( 'blur', blur );",
				"",
				"}",
				"",
				"var theta;",
				"",
				"function startScrub() {",
				"",
				"\tmanager.scrobble.playbackRate = 0;",
				"\tmanager.scrobble.play();",
				"\ttheta = null;",
				"",
				"}",
				"",
				"function scrub ( e ) {",
				"",
				"\tif ( typeof theta === 'number' ) {",
				"\t\tvar delta = Math.abs( e.theta - theta );",
				"\t\tmanager.scrobble.playbackRate = 25 * delta;",
				"\t}",
				"",
				"\ttheta = e.theta;",
				"",
				"}",
				"",
				"function endScrub() {",
				"",
				"\tmanager.scrobble.pause();",
				"\ttheta = null;",
				"",
				"}",
				"",
				"function focus ( e ) {",
				"",
				"\tvar paddle = this;",
				"\tvar controller = e.controller;",
				"\tvar ambient = lights.userData.ambient;",
				"",
				"\tvector.setFromMatrixPosition( paddle.matrixWorld );",
				"",
				"\tfor ( var i = 0; i < lights.children.length; i++ ) {",
				"\t\tvar light = lights.children[ i ];",
				"\t\tlight.target.userData.reference = paddle;",
				"\t}",
				"",
				"\tfor ( var j = 0; j < manager.filters.list.length; j++ ) {",
				"\t\tvar filter = manager.filters.list[ j ];",
				"\t\tif ( filter.name === paddle.userData.name ) {",
				"\t\t\tfilter.gain.value = 0.85;",
				"\t\t} else {",
				"\t\t\tfilter.gain.value = 0.01;",
				"\t\t}",
				"\t}",
				"",
				"\tvar options = { intensity: 0.45 };",
				"\tambient.userData.tween.to( options, duration );",
				"\tambient.userData.tween.start();",
				"",
				"}",
				"",
				"function update( e ) {",
				"",
				"\tvar paddle = this;",
				"\tvar t = e.value;",
				"",
				"\tt *= snaps;",
				"\tt = Math.round( t ) / snaps;",
				"",
				"\tvar name = paddle.userData.name;",
				"\tvar index = paddle.userData.index;",
				"\tvar filter = manager.filters[ name ];",
				"",
				"\tpaddle.userData.position.y = t * range * 0.5;",
				"\tfilter.setTransform( t * snaps );",
				"",
				"\tvar sign = t > 0 ? - 1 : 1;",
				"\tvar magnitude = Math.abs( t );",
				"",
				"\tt = sign * Math.pow( magnitude, 0.5 );",
				"\tpaddle.userData.twist.target = Math.PI * 0.33 * t;",
				"",
				"}",
				"",
				"function blur ( e ) {",
				"",
				"\tvar paddle = this;",
				"\tvar controller = e.controller;",
				"\tvar ambient = lights.userData.ambient;",
				"",
				"\tfor ( var i = 0; i < lights.children.length; i++ ) {",
				"\t\tvar light = lights.children[ i ];",
				"\t\tlight.target.userData.reference = lights;",
				"\t}",
				"",
				"\tfor ( var j = 0; j < manager.filters.list.length; j++ ) {",
				"\t\tvar filter = manager.filters.list[ j ];",
				"\t\tfilter.gain.value = 0.85;",
				"\t}",
				"",
				"\tvar options = { intensity: ambient.userData.intensity };",
				"\tambient.userData.tween.to( options, duration );",
				"\tambient.userData.tween.start();",
				"",
				"}",
				"",
				"function freeze() {",
				"\tdebris.userData.amplitude = 3;",
				"}",
				"",
				"function orient ( e ) {",
				"",
				"\tvar step = e.theta;",
				"\ttheta += step;",
				"",
				"\tfor ( var i = 0; i < orbitals.length; i++ ) {",
				"\t\tvar group = orbitals[ i ];",
				"\t\tgroup.rotation.y = theta;",
				"\t}",
				"",
				"}",
				"",
				"function release() {",
				"\tdebris.userData.amplitude = 1.5;",
				"}"
			]
		],
		[
			"Setup",
			[
				"/**",
				" * Initializes all materials to the renderer.",
				" * This stops the \"hiccup\" incurred when first",
				" * scrubbing the playhead / changing the",
				" * `playbackRate` of the track.",
				" */",
				"var renderer = resources.get( 'renderer' );",
				"var scene = resources.get( 'scene' );",
				"var camera = resources.get( 'camera' );",
				"",
				"renderer.compile( scene, camera );"
			]
		],
		[
			"Replay",
			[
				"var manager = resources.get( 'audio-manager' );",
				"var playhead = resources.get( 'playhead' );",
				"var compass = resources.get( 'compass' );",
				"var paddles = resources.get( 'paddles' );",
				"var title = resources.get( 'title-screen' );",
				"",
				"var TWO_PI = Math.PI * 2;",
				"",
				"var result = [];",
				"var startTime = Date.now();",
				"var index = 0;",
				"var replaying = false;",
				"",
				"var actions = {",
				"",
				"\ttoggle: function() {",
				"\t\tresult.push( {",
				"\t\t\tname: 'toggle',",
				"\t\t\ttime: elapsedTime()",
				"\t\t} );",
				"\t},",
				"",
				"\t//",
				"",
				"\tfreeze: function() {",
				"\t\tresult.push( {",
				"\t\t\tname: 'freeze',",
				"\t\t\ttime: elapsedTime()",
				"\t\t} );",
				"\t},",
				"",
				"\torient: function( e ) {",
				"\t\tresult.push( {",
				"\t\t\tname: 'orient',",
				"\t\t\ttime: elapsedTime(),",
				"\t\t\ttheta: e.theta",
				"\t\t} );",
				"\t},",
				"",
				"\trelease: function() {",
				"\t\tresult.push( {",
				"\t\t\tname: 'release',",
				"\t\t\ttime: elapsedTime()",
				"\t\t} );",
				"\t},",
				"",
				"\t//",
				"",
				"\tstartScrub: function() {",
				"\t\tresult.push( {",
				"\t\t\tname: 'startScrub',",
				"\t\t\ttime: elapsedTime()",
				"\t\t} );",
				"\t},",
				"",
				"\tscrub: function( e ) {",
				"\t\tresult.push( {",
				"\t\t\tname: 'scrub',",
				"\t\t\ttime: elapsedTime(),",
				"\t\t\ttheta: e.theta,",
				"\t\t\tprogress: e.progress,",
				"\t\t} );",
				"\t},",
				"",
				"\tendScrub: function() {",
				"\t\tvar playing = title.userData.play.userData.isPlaying;",
				"\t\tresult.push( {",
				"\t\t\tname: 'endScrub',",
				"\t\t\ttime: elapsedTime(),",
				"\t\t\tplaying: playing",
				"\t\t} );",
				"\t},",
				"",
				"\t//",
				"",
				"\tfocus: function() {",
				"\t\tvar paddle = this;",
				"\t\tresult.push( {",
				"\t\t\tname: 'focus',",
				"\t\t\ttime: elapsedTime(),",
				"\t\t\tpid: paddle.userData.index",
				"\t\t} );",
				"\t},",
				"",
				"\tupdate: function( e ) {",
				"\t\tvar paddle = this;",
				"\t\tresult.push( {",
				"\t\t\tname: 'update',",
				"\t\t\ttime: elapsedTime(),",
				"\t\t\tpid: paddle.userData.index,",
				"\t\t\tvalue: e.value",
				"\t\t} );",
				"\t},",
				"",
				"\tblur: function() {",
				"\t\tvar paddle = this;",
				"\t\tresult.push( {",
				"\t\t\tname: 'blur',",
				"\t\t\ttime: elapsedTime(),",
				"\t\t\tpid: paddle.userData.index",
				"\t\t} );",
				"\t}",
				"",
				"};",
				"",
				"var triggers = {",
				"",
				"\ttoggle: function() {",
				"\t\ttitle.userData.play.dispatchEvent( { type: 'primary-down' } );",
				"\t},",
				"",
				"\t//",
				"",
				"\tfreeze: function() {",
				"\t\tcompass.dispatchEvent( { type: 'focus' } );",
				"\t},",
				"",
				"\torient: function( action ) {",
				"\t\tcompass.dispatchEvent( { type: 'drag', theta: action.theta } );",
				"\t},",
				"",
				"\trelease: function() {",
				"\t\tcompass.dispatchEvent( { type: 'blur' } );",
				"\t},",
				"",
				"\t//",
				"",
				"\tstartScrub: function() {",
				"\t\tplayhead.dispatchEvent( { type: 'focus' } );",
				"\t},",
				"",
				"\tscrub: function( action ) {",
				"\t\tplayhead.dispatchEvent( {",
				"\t\t\ttype: 'drag',",
				"\t\t\ttheta: action.theta,",
				"\t\t\tprogress: action.progress",
				"\t\t} );",
				"\t},",
				"",
				"\tendScrub: function( action ) {",
				"\t\tplayhead.dispatchEvent( { type: 'blur' } );",
				"\t\tif ( action.playing ) {",
				"\t\t\tmanager.play();\t// TODO: Hack",
				"\t\t}",
				"\t},",
				"",
				"\t//",
				"",
				"\tfocus: function( action ) {",
				"\t\tvar index = action.pid;",
				"\t\tvar paddle = getPaddleById( index );",
				"\t\tpaddle.dispatchEvent( { type: 'focus' } );",
				"\t},",
				"",
				"\tupdate: function( action ) {",
				"\t\tvar index = action.pid;",
				"\t\tvar paddle = getPaddleById( index );",
				"\t\tpaddle.dispatchEvent( { type: 'update', value: action.value } );",
				"\t},",
				"",
				"\tblur: function( action ) {",
				"\t\tvar index = action.pid;",
				"\t\tvar paddle = getPaddleById( index );",
				"\t\tpaddle.dispatchEvent( { type: 'blur' } );",
				"\t}",
				"",
				"};",
				"",
				"function getPaddleById( id ) {",
				"",
				"\tfor ( var i = 0; i < paddles.children.length; i++ ) {",
				"",
				"\t\tvar paddle = paddles.children[ i ];",
				"",
				"\t\tif ( !paddle.userData.isPaddle ) {",
				"\t\t\tcontinue;",
				"\t\t}",
				"",
				"\t\tif ( paddle.userData.index === id ) {",
				"\t\t\treturn paddle;",
				"\t\t}",
				"",
				"\t}",
				"",
				"\treturn null;",
				"",
				"}",
				"",
				"function elapsedTime() {",
				"\treturn Date.now() - startTime;",
				"}",
				"",
				"resources.set( 'replay', {",
				"",
				"\t/*",
				"\t * Listen to events in the application",
				"\t * and set actions to the `result`.",
				"\t */",
				"\trecord: function() {",
				"",
				"\t\ttitle.userData.play.addEventListener( 'primary-down', actions.toggle );",
				"",
				"\t\tplayhead.addEventListener( 'focus', actions.startScrub );",
				"\t\tplayhead.addEventListener( 'drag', actions.scrub );",
				"\t\tplayhead.addEventListener( 'blur', actions.endScrub );",
				"",
				"\t\tcompass.addEventListener( 'focus', actions.freeze );",
				"\t\tcompass.addEventListener( 'drag', actions.orient );",
				"\t\tcompass.addEventListener( 'blur', actions.release );",
				"",
				"\t\tfor ( var i = 0; i < paddles.children.length; i++ ) {",
				"",
				"\t\t\tvar paddle = paddles.children[ i ];",
				"",
				"\t\t\tif ( !paddle.userData.isPaddle ) {",
				"\t\t\t\tcontinue;",
				"\t\t\t}",
				"",
				"\t\t\tpaddle.addEventListener( 'focus', actions.focus );",
				"\t\t\tpaddle.addEventListener( 'update', actions.update );",
				"\t\t\tpaddle.addEventListener( 'blur', actions.blur );",
				"",
				"\t\t}",
				"",
				"\t},",
				"",
				"\ttoJSON: function() {",
				"\t\treturn JSON.stringify( result );",
				"\t},",
				"",
				"\tload: function( obj ) {",
				"\t\tif ( typeof obj === 'string' ) {",
				"\t\t\tresult = JSON.parse( obj );",
				"\t\t} else {",
				"\t\t\tresult = obj;",
				"\t\t}",
				"\t\treplaying = true;",
				"\t},",
				"",
				"\tupdate: function() {",
				"",
				"\t\tif ( !replaying ) {",
				"\t\t\treturn;",
				"\t\t}",
				"",
				"\t\tvar action = result[ index ];",
				"\t\tvar time = elapsedTime();",
				"",
				"\t\tif ( action && time >= action.time ) {",
				"\t\t\t// Execute stored action",
				"\t\t\ttriggers[ action.name ]( action );",
				"\t\t\tindex++;",
				"\t\t}",
				"",
				"\t}",
				"",
				"} );"
			]
		]
	],
	"effects": [
		[
			"Audio Player",
			[
				"var manager = resources.get( 'audio-manager' );",
				"",
				"function start( progress ) {",
				"\tplayer.setAudio( manager );",
				"\tplayer.setLoop( [ 0, manager.duration ] );",
				"}",
				"",
				"function end( progress ) {",
				"\tplayer.setAudio( null );",
				"}",
				"",
				"function update( progress ) {",
				"",
				"\tmanager.update();",
				"\tmanager.updateFFT();",
				"",
				"}"
			]
		],
		[
			"Render",
			[
				"var manager = resources.get( 'audio-manager' );",
				"var renderer = resources.get( 'renderer' );",
				"var interaction = resources.get( 'interaction' );",
				"var ring = resources.get( 'ring' );",
				"var carousel = resources.get( 'carousel' );",
				"var backdrop = resources.get( 'backdrop' );",
				"var camera = resources.get( 'camera' );",
				"var scene = resources.get( 'scene' );",
				"var playhead = resources.get( 'playhead' );",
				"var paddles = resources.get( 'paddles' );",
				"var lights = resources.get( 'lights' );",
				"var debris = resources.get( 'debris' );",
				"var boids = resources.get( 'boids' );",
				"var compass = resources.get( 'compass' );",
				"var polarSpheres = resources.get( 'polar-spheres' );",
				"var replay = resources.get( 'replay' );",
				"",
				"var duration = 1;",
				"var timeAtLastFrame;",
				"var elapsedTime = 0;",
				"",
				"playhead.addEventListener( 'drag', scrub );",
				"",
				"window.addEventListener( 'blur', blur, false );",
				"",
				"function start( progress ) {",
				"\tduration = manager.duration;",
				"\ttimeAtLastFrame = Date.now();",
				"}",
				"",
				"function end( progress ){}",
				"",
				"function update( progress ) {",
				"",
				"\tvar now = Date.now();",
				"\tvar timeDelta = 0;",
				"",
				"\tif ( typeof timeAtLastFrame === 'number' ) {",
				"\t\ttimeDelta = now - timeAtLastFrame;",
				"\t}",
				"",
				"\telapsedTime += timeDelta;",
				"",
				"\treplay.update();",
				"",
				"\tvar isPresenting = renderer.vr.isPresenting();",
				"\tvar currentTime = 1000 * progress * duration;",
				"",
				"\tTWEEN.update();",
				"",
				"\tvar orbit = camera.userData.controls;",
				"\tvar orbitState = !orbit ? - 1 : orbit.getState();",
				"",
				"\tif ( orbitState < 0 ) {",
				"\t\tinteraction.update();",
				"\t}",
				"",
				"\tbackdrop.userData.update( progress, lights.userData.ambient.intensity );",
				"\tring.userData.update( progress );",
				"\tplayhead.userData.update( progress );",
				"\tpaddles.userData.update( progress );",
				"\tlights.userData.update( progress );",
				"\tboids.userData.update( progress );",
				"\tcompass.userData.update( progress );",
				"",
				"\t// Uniforms",
				"\tdebris.userData.update( currentTime );",
				"\tpolarSpheres.userData.update( elapsedTime );",
				"",
				"\tvar interacting = !!interaction.intersections.mouse;",
				"",
				"\tif ( orbit ) {",
				"\t\tif ( isPresenting || interacting ) {",
				"\t\t\torbit.enabled = false;",
				"\t\t\torbit.setState( - 1 );",
				"\t\t} else {",
				"\t\t\torbit.enabled = true;",
				"\t\t\torbit.update();",
				"\t\t}",
				"\t}",
				"",
				"\ttimeAtLastFrame = now;",
				"\trenderer.render( scene, camera );",
				"",
				"}",
				"",
				"function scrub( e ) {",
				"",
				"\tplayer.currentTime = e.progress * manager.duration;",
				"",
				"}",
				"",
				"function blur( e ) {",
				"\ttimeAtLastFrame = null;",
				"}"
			]
		],
		[
			"Set Backdrop Gray",
			[
				"var params = resources.get( 'params' );",
				"var backdrop = resources.get( 'backdrop' );",
				"var playhead = resources.get( 'playhead' );",
				"",
				"var black = new THREE.Color( 0, 0, 0 );",
				"var source = new THREE.Color();",
				"var target = new THREE.Color();",
				"",
				"var sourceStart = new THREE.Color();",
				"var targetStart = new THREE.Color();",
				"",
				"var initialized = false;",
				"",
				"function start( progress ) {",
				"",
				"\tvar color;",
				"\tvar userData = backdrop.userData;",
				"",
				"\tcolor = params.palette[ 2 ].source;",
				"\tsource.set( color );",
				"",
				"\tcolor = params.palette[ 2 ].target;",
				"\ttarget.set( color );",
				"\t",
				"\tsourceStart.copy( userData.cSource );",
				"\ttargetStart.copy( userData.cTarget );",
				"\tinitialized = true;",
				"",
				"}",
				"",
				"function end( progress ) {",
				"",
				"}",
				"",
				"function update( progress ) {",
				"",
				"\tif ( initialized ) {",
				"\t\t// Don't execute if this is being",
				"\t\t// triggered from a loop",
				"\t\treturn;",
				"\t}",
				"",
				"\tvar uniforms = backdrop.material.uniforms;",
				"\tvar userData = backdrop.userData;",
				"",
				"\tprogress = TWEEN.Easing.Back.Out( progress );",
				"",
				"\tuserData.cSource.copy( sourceStart ).lerp( source, progress );",
				"\tuserData.cTarget.copy( targetStart ).lerp( target, progress );",
				"",
				"}"
			]
		],
		[
			"Set Default Camera",
			[
				"var camera = resources.get( 'camera' );",
				"var renderer = resources.get( 'renderer' );",
				"var params = resources.get( 'params' );",
				"var playhead = resources.get( 'playhead' );",
				"var initialized = false;",
				"",
				"function start( progress ) {",
				"",
				"\tif ( initialized ) {",
				"\t\treturn;",
				"\t}",
				"",
				"\tcamera.position.z = 0;",
				"\tcamera.position.y = - 0.4;",
				"",
				"\tif ( !camera.userData.controls ) {",
				"\t\tcamera.userData.controls = new THREE.OrbitControls(",
				"\t\t\tcamera, renderer.domElement );",
				"\t\tcamera.userData.controls.enableDamping = true;",
				"\t\tcamera.userData.controls.enablePan = false;",
				"\t\tcamera.userData.controls.maxDistance = 9;",
				"\t\tcamera.userData.controls.dampingFactor = params.drag;",
				"\t\tcamera.userData.controls.rotateSpeed = 0.1;",
				"\t}",
				"",
				"\tinitialized = true;",
				"",
				"}",
				"",
				"function end( progress ) {",
				"}",
				"",
				"function update( progress ){}"
			]
		],
		[
			"Randomize Colors",
			[
				"var lights = resources.get( 'lights' );",
				"var backdrop = resources.get( 'backdrop' );",
				"var ambient = lights.userData.ambient;",
				"",
				"function start() {",
				"\t\t",
				"\tbackdrop.userData.cSource.set( 0xffffff * Math.random() );",
				"\tbackdrop.userData.cTarget.set( 0xffffff * Math.random() );",
				"\t",
				"}",
				"",
				"function update( progress ) {}"
			]
		],
		[
			"I'd Beat Up All My Cues For You",
			[
				"var manager = resources.get( 'audio-manager' );",
				"var lyrics = resources.get( 'lyrics' );",
				"var polarSpheres = resources.get( 'polar-spheres' );",
				"",
				"var playbackRate = 1;",
				"var index = 0;",
				"var iteration = 0;",
				"",
				"var keyframes = [",
				"\t// Taken from Ableton Project",
				"\t2.273, 2.620, 2.827, 3.135,",
				"\t3.459, 3.777, 4.022, 4.167",
				"];",
				"",
				"var words = [",
				"\t'I\\'D', 'BEAT', 'UP', 'ALL',",
				"\t'MY', 'CUES', 'FOR', 'YOU'",
				"];",
				"",
				"var cards = [];",
				"",
				"function start( progress ) {",
				"",
				"\treset( progress );",
				"",
				"}",
				"",
				"function end( progress ){",
				"",
				"\tresetCards();",
				"",
				"}",
				"",
				"function update( progress ) {",
				"",
				"\tvar analysis = manager.filters[ 'vocals' ];",
				"",
				"\tif ( analysis.playbackRate !== playbackRate ) {",
				"\t\treset( progress );",
				"\t}",
				"",
				"\tvar unitDuration = manager.unitDuration;",
				"\tvar maxIterations = Math.ceil( playbackRate );",
				"",
				"\tvar animationDuration = unitDuration * 2;",
				"\tvar duration = unitDuration / playbackRate;",
				"\tvar currentTime = progress * animationDuration;",
				"\tvar projectedTime = currentTime % duration;",
				"\tvar currentPct = projectedTime / duration;",
				"\tvar currentIteration = Math.floor( currentTime / duration );",
				"",
				"\tvar keyframe = keyframes[ index ] / unitDuration;",
				"",
				"\tvar ca = currentIteration < maxIterations;",
				"\tvar cb = currentIteration === iteration;",
				"\tvar cc = currentPct >= keyframe;",
				"",
				"\tif ( ca && cb && cc ) {",
				"\t\ttrigger( currentPct );",
				"\t}",
				"",
				"\tfor ( var i = 0; i < cards.length; i++ ) {",
				"",
				"\t\tvar card = cards[ i ];",
				"\t\tvar startPct = card.userData.startPct;",
				"\t\tvar t = 10 * ( currentPct - startPct );",
				"\t\tvar opacity = card.material.uniforms.opacity;",
				"",
				"\t\tif ( t < 1 ) {",
				"\t\t\topacity.value = 0.75 * ( 1 - t ) + 0.25;",
				"\t\t} else if ( opacity.value !== 0.25 ) {",
				"\t\t\topacity.value = 0.25;",
				"\t\t\tcards.splice( i, 1 );",
				"\t\t}",
				"",
				"\t}",
				"",
				"}",
				"",
				"function trigger( startPct ) {",
				"",
				"\tvar key = words[ index ];",
				"\tvar card = lyrics.userData.dictionary[ key ];",
				"",
				"\tif ( card ) {",
				"\t\tvar texture = card.material.uniforms.image.value;",
				"\t\tpolarSpheres.userData.setTexture( texture );",
				"\t\tcard.material.uniforms.opacity.value = 1;",
				"\t\tcard.userData.startPct = startPct;",
				"\t\tcards.push( card );",
				"\t}",
				"",
				"\tindex ++;",
				"\tif ( index >= keyframes.length ) {",
				"\t\tindex = 0;",
				"\t\titeration ++;",
				"\t}",
				"",
				"}",
				"",
				"function reset( progress ) {",
				"",
				"\tvar analysis = manager.filters[ 'vocals' ];",
				"\tvar unitDuration = manager.unitDuration;",
				"",
				"\tplaybackRate = analysis.playbackRate;",
				"",
				"\tvar animationDuration = unitDuration * 2;",
				"\tvar duration = unitDuration / playbackRate;",
				"\tvar currentTime = progress * animationDuration;",
				"\tvar projectedTime = currentTime % duration;",
				"\tvar currentPct = projectedTime / duration;",
				"",
				"\titeration = Math.floor( currentTime / duration );",
				"",
				"\tfor ( var i = 0; i < keyframes.length; i++ ) {",
				"\t\tindex = i;",
				"\t\tif ( keyframes[ i ] / unitDuration > currentPct ) {",
				"\t\t\tbreak;",
				"\t\t}",
				"\t}",
				"",
				"\tresetCards();",
				"",
				"}",
				"",
				"function resetCards() {",
				"",
				"\tfor ( var j = 0; j < cards.length; j++ ) {",
				"\t\tvar card = cards[ j ];",
				"\t\tcard.material.uniforms.opacity.value = 0.25;",
				"\t}",
				"",
				"\tcards.length = 0;",
				"",
				"}"
			]
		],
		[
			"For You I'd Take It Off Too Soon",
			[
				"var manager = resources.get( 'audio-manager' );",
				"var lyrics = resources.get( 'lyrics' );",
				"var polarSpheres = resources.get( 'polar-spheres' );",
				"",
				"var index = 0;",
				"var iteration = 0;",
				"",
				"var keyframes = [",
				"\t// Taken from Ableton Project",
				"\t2.228, 2.515, 2.667, 2.958,",
				"\t3.491, 3.765, 4.099, 4.167",
				"];",
				"",
				"var words = [",
				"\t'FOR', 'YOU', 'I\\'D', 'TAKE',",
				"\t'IT', 'OFF', 'TOO', 'SOON'",
				"];",
				"",
				"var cards = [];",
				"",
				"function start( progress ) {",
				"",
				"\treset( progress );",
				"",
				"}",
				"",
				"function end( progress ){",
				"",
				"\tresetCards();",
				"",
				"}",
				"",
				"function update( progress ) {",
				"",
				"\tvar analysis = manager.filters[ 'vocals' ];",
				"",
				"\tif ( analysis.playbackRate !== playbackRate ) {",
				"\t\treset( progress );",
				"\t}",
				"",
				"\tvar unitDuration = manager.unitDuration;",
				"\tvar maxIterations = Math.ceil( playbackRate );",
				"",
				"\tvar animationDuration = unitDuration * 2;",
				"\tvar duration = unitDuration / playbackRate;",
				"\tvar currentTime = progress * animationDuration;",
				"\tvar projectedTime = currentTime % duration;",
				"\tvar currentPct = projectedTime / duration;",
				"\tvar currentIteration = Math.floor( currentTime / duration );",
				"",
				"\tvar keyframe = keyframes[ index ] / unitDuration;",
				"",
				"\tvar ca = currentIteration < maxIterations;",
				"\tvar cb = currentIteration === iteration;",
				"\tvar cc = currentPct >= keyframe;",
				"",
				"\tif ( ca && cb && cc ) {",
				"\t\ttrigger( currentPct );",
				"\t}",
				"",
				"\tfor ( var i = 0; i < cards.length; i++ ) {",
				"",
				"\t\tvar card = cards[ i ];",
				"\t\tvar startPct = card.userData.startPct;",
				"\t\tvar t = 10 * ( currentPct - startPct );",
				"\t\tvar opacity = card.material.uniforms.opacity;",
				"",
				"\t\tif ( t < 1 ) {",
				"\t\t\topacity.value = 0.75 * ( 1 - t ) + 0.25;",
				"\t\t} else if ( opacity.value !== 0.25 ) {",
				"\t\t\topacity.value = 0.25;",
				"\t\t\tcards.splice( i, 1 );",
				"\t\t}",
				"",
				"\t}",
				"",
				"}",
				"",
				"function trigger( startPct ) {",
				"",
				"\tvar key = words[ index ];",
				"\tvar card = lyrics.userData.dictionary[ key ];",
				"",
				"\tif ( card ) {",
				"\t\tvar texture = card.material.uniforms.image.value;",
				"\t\tpolarSpheres.userData.setTexture( texture );",
				"\t\tcard.material.uniforms.opacity.value = 1;",
				"\t\tcard.userData.startPct = startPct;",
				"\t\tcards.push( card );",
				"\t}",
				"",
				"\tindex ++;",
				"\tif ( index >= keyframes.length ) {",
				"\t\tindex = 0;",
				"\t\titeration ++;",
				"\t}",
				"",
				"}",
				"",
				"function reset( progress ) {",
				"",
				"\tvar analysis = manager.filters[ 'vocals' ];",
				"\tvar unitDuration = manager.unitDuration;",
				"",
				"\tplaybackRate = analysis.playbackRate;",
				"",
				"\tvar animationDuration = unitDuration * 2;",
				"\tvar duration = unitDuration / playbackRate;",
				"\tvar currentTime = progress * animationDuration;",
				"\tvar projectedTime = currentTime % duration;",
				"\tvar currentPct = projectedTime / duration;",
				"",
				"\titeration = Math.floor( currentTime / duration );",
				"",
				"\tfor ( var i = 0; i < keyframes.length; i++ ) {",
				"\t\tindex = i;",
				"\t\tif ( keyframes[ i ] / unitDuration > currentPct ) {",
				"\t\t\tbreak;",
				"\t\t}",
				"\t}",
				"",
				"\tresetCards();",
				"",
				"}",
				"",
				"function resetCards() {",
				"",
				"\tfor ( var j = 0; j < cards.length; j++ ) {",
				"\t\tvar card = cards[ j ];",
				"\t\tcard.material.uniforms.opacity.value = 0.25;",
				"\t}",
				"",
				"\tcards.length = 0;",
				"",
				"}"
			]
		],
		[
			"Some Other Way To Get To You",
			[
				"var manager = resources.get( 'audio-manager' );",
				"var lyrics = resources.get( 'lyrics' );",
				"var polarSpheres = resources.get( 'polar-spheres' );",
				"",
				"var index = 0;",
				"var iteration = 0;",
				"",
				"var keyframes = [",
				"\t// Taken from Ableton Project",
				"\t2.181, 2.642, 3.000, 3.439,",
				"\t3.775, 4.010, 4.292",
				"];",
				"",
				"var words = [",
				"\t'SOME', 'OTHER', 'WAY', 'TO',",
				"\t'GET', 'TO', 'YOU'",
				"];",
				"",
				"var cards = [];",
				"",
				"function start( progress ) {",
				"",
				"\treset( progress );",
				"",
				"}",
				"",
				"function end( progress ){",
				"",
				"\tresetCards();",
				"",
				"}",
				"",
				"function update( progress ) {",
				"",
				"\tvar analysis = manager.filters[ 'vocals' ];",
				"",
				"\tif ( analysis.playbackRate !== playbackRate ) {",
				"\t\treset( progress );",
				"\t}",
				"",
				"\tvar unitDuration = manager.unitDuration;",
				"\tvar maxIterations = Math.ceil( playbackRate );",
				"",
				"\tvar animationDuration = unitDuration * 2;",
				"\tvar duration = unitDuration / playbackRate;",
				"\tvar currentTime = progress * animationDuration;",
				"\tvar projectedTime = currentTime % duration;",
				"\tvar currentPct = projectedTime / duration;",
				"\tvar currentIteration = Math.floor( currentTime / duration );",
				"",
				"\tvar keyframe = keyframes[ index ] / unitDuration;",
				"",
				"\tvar ca = currentIteration < maxIterations;",
				"\tvar cb = currentIteration === iteration;",
				"\tvar cc = currentPct >= keyframe;",
				"",
				"\tif ( ca && cb && cc ) {",
				"\t\ttrigger( currentPct );",
				"\t}",
				"",
				"\tfor ( var i = 0; i < cards.length; i++ ) {",
				"",
				"\t\tvar card = cards[ i ];",
				"\t\tvar startPct = card.userData.startPct;",
				"\t\tvar t = 10 * ( currentPct - startPct );",
				"\t\tvar opacity = card.material.uniforms.opacity;",
				"",
				"\t\tif ( t < 1 ) {",
				"\t\t\topacity.value = 0.75 * ( 1 - t ) + 0.25;",
				"\t\t} else if ( opacity.value !== 0.25 ) {",
				"\t\t\topacity.value = 0.25;",
				"\t\t\tcards.splice( i, 1 );",
				"\t\t}",
				"",
				"\t}",
				"",
				"}",
				"",
				"function trigger( startPct ) {",
				"",
				"\tvar key = words[ index ];",
				"\tvar card = lyrics.userData.dictionary[ key ];",
				"",
				"\tif ( card ) {",
				"\t\tvar texture = card.material.uniforms.image.value;",
				"\t\tpolarSpheres.userData.setTexture( texture );",
				"\t\tcard.material.uniforms.opacity.value = 1;",
				"\t\tcard.userData.startPct = startPct;",
				"\t\tcards.push( card );",
				"\t}",
				"",
				"\tindex ++;",
				"\tif ( index >= keyframes.length ) {",
				"\t\tindex = 0;",
				"\t\titeration ++;",
				"\t}",
				"",
				"}",
				"",
				"function reset( progress ) {",
				"",
				"\tvar analysis = manager.filters[ 'vocals' ];",
				"\tvar unitDuration = manager.unitDuration;",
				"",
				"\tplaybackRate = analysis.playbackRate;",
				"",
				"\tvar animationDuration = unitDuration * 2;",
				"\tvar duration = unitDuration / playbackRate;",
				"\tvar currentTime = progress * animationDuration;",
				"\tvar projectedTime = currentTime % duration;",
				"\tvar currentPct = projectedTime / duration;",
				"",
				"\titeration = Math.floor( currentTime / duration );",
				"",
				"\tfor ( var i = 0; i < keyframes.length; i++ ) {",
				"\t\tindex = i;",
				"\t\tif ( keyframes[ i ] / unitDuration > currentPct ) {",
				"\t\t\tbreak;",
				"\t\t}",
				"\t}",
				"",
				"\tresetCards();",
				"",
				"}",
				"",
				"function resetCards() {",
				"",
				"\tfor ( var j = 0; j < cards.length; j++ ) {",
				"\t\tvar card = cards[ j ];",
				"\t\tcard.material.uniforms.opacity.value = 0.25;",
				"\t}",
				"",
				"\tcards.length = 0;",
				"",
				"}"
			]
		],
		[
			"Now Give Up All My Fears For You",
			[
				"var manager = resources.get( 'audio-manager' );",
				"var lyrics = resources.get( 'lyrics' );",
				"var polarSpheres = resources.get( 'polar-spheres' );",
				"",
				"var index = 0;",
				"var iteration = 0;",
				"",
				"var keyframes = [",
				"\t// Taken from Ableton Project",
				"\t2.274, 2.631, 2.792, 3.132,",
				"\t3.488, 3.750, 4.021, 4.156",
				"];",
				"",
				"var words = [",
				"\t'NOW', 'GIVE', 'UP', 'ALL',",
				"\t'MY', 'FEARS', 'FOR', 'YOU'",
				"];",
				"",
				"var cards = [];",
				"",
				"function start( progress ) {",
				"",
				"\treset( progress );",
				"",
				"}",
				"",
				"function end( progress ){",
				"",
				"\tresetCards();",
				"",
				"}",
				"",
				"function update( progress ) {",
				"",
				"\tvar analysis = manager.filters[ 'vocals' ];",
				"",
				"\tif ( analysis.playbackRate !== playbackRate ) {",
				"\t\treset( progress );",
				"\t}",
				"",
				"\tvar unitDuration = manager.unitDuration;",
				"\tvar maxIterations = Math.ceil( playbackRate );",
				"",
				"\tvar animationDuration = unitDuration * 2;",
				"\tvar duration = unitDuration / playbackRate;",
				"\tvar currentTime = progress * animationDuration;",
				"\tvar projectedTime = currentTime % duration;",
				"\tvar currentPct = projectedTime / duration;",
				"\tvar currentIteration = Math.floor( currentTime / duration );",
				"",
				"\tvar keyframe = keyframes[ index ] / unitDuration;",
				"",
				"\tvar ca = currentIteration < maxIterations;",
				"\tvar cb = currentIteration === iteration;",
				"\tvar cc = currentPct >= keyframe;",
				"",
				"\tif ( ca && cb && cc ) {",
				"\t\ttrigger( currentPct );",
				"\t}",
				"",
				"\tfor ( var i = 0; i < cards.length; i++ ) {",
				"",
				"\t\tvar card = cards[ i ];",
				"\t\tvar startPct = card.userData.startPct;",
				"\t\tvar t = 10 * ( currentPct - startPct );",
				"\t\tvar opacity = card.material.uniforms.opacity;",
				"",
				"\t\tif ( t < 1 ) {",
				"\t\t\topacity.value = 0.75 * ( 1 - t ) + 0.25;",
				"\t\t} else if ( opacity.value !== 0.25 ) {",
				"\t\t\topacity.value = 0.25;",
				"\t\t\tcards.splice( i, 1 );",
				"\t\t}",
				"",
				"\t}",
				"",
				"}",
				"",
				"function trigger( startPct ) {",
				"",
				"\tvar key = words[ index ];",
				"\tvar card = lyrics.userData.dictionary[ key ];",
				"",
				"\tif ( card ) {",
				"\t\tvar texture = card.material.uniforms.image.value;",
				"\t\tpolarSpheres.userData.setTexture( texture );",
				"\t\tcard.material.uniforms.opacity.value = 1;",
				"\t\tcard.userData.startPct = startPct;",
				"\t\tcards.push( card );",
				"\t}",
				"",
				"\tindex ++;",
				"\tif ( index >= keyframes.length ) {",
				"\t\tindex = 0;",
				"\t\titeration ++;",
				"\t}",
				"",
				"}",
				"",
				"function reset( progress ) {",
				"",
				"\tvar analysis = manager.filters[ 'vocals' ];",
				"\tvar unitDuration = manager.unitDuration;",
				"",
				"\tplaybackRate = analysis.playbackRate;",
				"",
				"\tvar animationDuration = unitDuration * 2;",
				"\tvar duration = unitDuration / playbackRate;",
				"\tvar currentTime = progress * animationDuration;",
				"\tvar projectedTime = currentTime % duration;",
				"\tvar currentPct = projectedTime / duration;",
				"",
				"\titeration = Math.floor( currentTime / duration );",
				"",
				"\tfor ( var i = 0; i < keyframes.length; i++ ) {",
				"\t\tindex = i;",
				"\t\tif ( keyframes[ i ] / unitDuration > currentPct ) {",
				"\t\t\tbreak;",
				"\t\t}",
				"\t}",
				"",
				"\tresetCards();",
				"",
				"}",
				"",
				"function resetCards() {",
				"",
				"\tfor ( var j = 0; j < cards.length; j++ ) {",
				"\t\tvar card = cards[ j ];",
				"\t\tcard.material.uniforms.opacity.value = 0.25;",
				"\t}",
				"",
				"\tcards.length = 0;",
				"",
				"}"
			]
		],
		[
			"I'd Beat Up",
			[
				"var manager = resources.get( 'audio-manager' );",
				"var lyrics = resources.get( 'lyrics' );",
				"var polarSpheres = resources.get( 'polar-spheres' );",
				"",
				"var index = 0;",
				"var iteration = 0;",
				"",
				"var keyframes = [",
				"\t// Taken from Ableton Project",
				"\t2.326, 2.521, 2.833",
				"];",
				"",
				"var words = [",
				"\t'I\\'D', 'BEAT', 'UP'",
				"];",
				"",
				"var cards = [];",
				"",
				"function start( progress ) {",
				"",
				"\treset( progress );",
				"",
				"}",
				"",
				"function end( progress ){",
				"",
				"\tresetCards();",
				"",
				"}",
				"",
				"function update( progress ) {",
				"",
				"\tvar analysis = manager.filters[ 'vocals' ];",
				"",
				"\tif ( analysis.playbackRate !== playbackRate ) {",
				"\t\treset( progress );",
				"\t}",
				"",
				"\tvar unitDuration = manager.unitDuration;",
				"\tvar maxIterations = Math.ceil( playbackRate );",
				"",
				"\tvar animationDuration = unitDuration * 2;",
				"\tvar duration = unitDuration / playbackRate;",
				"\tvar currentTime = progress * animationDuration;",
				"\tvar projectedTime = currentTime % duration;",
				"\tvar currentPct = projectedTime / duration;",
				"\tvar currentIteration = Math.floor( currentTime / duration );",
				"",
				"\tvar keyframe = keyframes[ index ] / unitDuration;",
				"",
				"\tvar ca = currentIteration < maxIterations;",
				"\tvar cb = currentIteration === iteration;",
				"\tvar cc = currentPct >= keyframe;",
				"",
				"\tif ( ca && cb && cc ) {",
				"\t\ttrigger( currentPct );",
				"\t}",
				"",
				"\tfor ( var i = 0; i < cards.length; i++ ) {",
				"",
				"\t\tvar card = cards[ i ];",
				"\t\tvar startPct = card.userData.startPct;",
				"\t\tvar t = 10 * ( currentPct - startPct );",
				"\t\tvar opacity = card.material.uniforms.opacity;",
				"",
				"\t\tif ( t < 1 ) {",
				"\t\t\topacity.value = 0.75 * ( 1 - t ) + 0.25;",
				"\t\t} else if ( opacity.value !== 0.25 ) {",
				"\t\t\topacity.value = 0.25;",
				"\t\t\tcards.splice( i, 1 );",
				"\t\t}",
				"",
				"\t}",
				"",
				"}",
				"",
				"function trigger( startPct ) {",
				"",
				"\tvar key = words[ index ];",
				"\tvar card = lyrics.userData.dictionary[ key ];",
				"",
				"\tif ( card ) {",
				"\t\tvar texture = card.material.uniforms.image.value;",
				"\t\tpolarSpheres.userData.setTexture( texture );",
				"\t\tcard.material.uniforms.opacity.value = 1;",
				"\t\tcard.userData.startPct = startPct;",
				"\t\tcards.push( card );",
				"\t}",
				"",
				"\tindex ++;",
				"\tif ( index >= keyframes.length ) {",
				"\t\tindex = 0;",
				"\t\titeration ++;",
				"\t}",
				"",
				"}",
				"",
				"function reset( progress ) {",
				"",
				"\tvar analysis = manager.filters[ 'vocals' ];",
				"\tvar unitDuration = manager.unitDuration;",
				"",
				"\tplaybackRate = analysis.playbackRate;",
				"",
				"\tvar animationDuration = unitDuration * 2;",
				"\tvar duration = unitDuration / playbackRate;",
				"\tvar currentTime = progress * animationDuration;",
				"\tvar projectedTime = currentTime % duration;",
				"\tvar currentPct = projectedTime / duration;",
				"",
				"\titeration = Math.floor( currentTime / duration );",
				"",
				"\tfor ( var i = 0; i < keyframes.length; i++ ) {",
				"\t\tindex = i;",
				"\t\tif ( keyframes[ i ] / unitDuration > currentPct ) {",
				"\t\t\tbreak;",
				"\t\t}",
				"\t}",
				"",
				"\tresetCards();",
				"",
				"}",
				"",
				"function resetCards() {",
				"",
				"\tfor ( var j = 0; j < cards.length; j++ ) {",
				"\t\tvar card = cards[ j ];",
				"\t\tcard.material.uniforms.opacity.value = 0.25;",
				"\t}",
				"",
				"\tcards.length = 0;",
				"",
				"}"
			]
		],
		[
			"Come At Me What You Want Me To",
			[
				"var manager = resources.get( 'audio-manager' );",
				"var lyrics = resources.get( 'lyrics' );",
				"var polarSpheres = resources.get( 'polar-spheres' );",
				"",
				"var index = 0;",
				"var iteration = 0;",
				"",
				"var keyframes = [",
				"\t// Taken from Ableton Project",
				"\t2.285, 2.379, 2.667, 3.00,",
				"\t3.380, 3.922, 4.180, 4.395",
				"];",
				"",
				"var words = [",
				"\t'COME', 'AT', 'ME', 'WHAT',",
				"\t'YOU', 'WANT', 'ME', 'TO'",
				"];",
				"",
				"var cards = [];",
				"",
				"function start( progress ) {",
				"",
				"\treset( progress );",
				"",
				"}",
				"",
				"function end( progress ){",
				"",
				"\tresetCards();",
				"",
				"}",
				"",
				"function update( progress ) {",
				"",
				"\tvar analysis = manager.filters[ 'vocals' ];",
				"",
				"\tif ( analysis.playbackRate !== playbackRate ) {",
				"\t\treset( progress );",
				"\t}",
				"",
				"\tvar unitDuration = manager.unitDuration;",
				"\tvar maxIterations = Math.ceil( playbackRate );",
				"",
				"\tvar animationDuration = unitDuration * 2;",
				"\tvar duration = unitDuration / playbackRate;",
				"\tvar currentTime = progress * animationDuration;",
				"\tvar projectedTime = currentTime % duration;",
				"\tvar currentPct = projectedTime / duration;",
				"\tvar currentIteration = Math.floor( currentTime / duration );",
				"",
				"\tvar keyframe = keyframes[ index ] / unitDuration;",
				"",
				"\tvar ca = currentIteration < maxIterations;",
				"\tvar cb = currentIteration === iteration;",
				"\tvar cc = currentPct >= keyframe;",
				"",
				"\tif ( ca && cb && cc ) {",
				"\t\ttrigger( currentPct );",
				"\t}",
				"",
				"\tfor ( var i = 0; i < cards.length; i++ ) {",
				"",
				"\t\tvar card = cards[ i ];",
				"\t\tvar startPct = card.userData.startPct;",
				"\t\tvar t = 10 * ( currentPct - startPct );",
				"\t\tvar opacity = card.material.uniforms.opacity;",
				"",
				"\t\tif ( t < 1 ) {",
				"\t\t\topacity.value = 0.75 * ( 1 - t ) + 0.25;",
				"\t\t} else if ( opacity.value !== 0.25 ) {",
				"\t\t\topacity.value = 0.25;",
				"\t\t\tcards.splice( i, 1 );",
				"\t\t}",
				"",
				"\t}",
				"",
				"}",
				"",
				"function trigger( startPct ) {",
				"",
				"\tvar key = words[ index ];",
				"\tvar card = lyrics.userData.dictionary[ key ];",
				"",
				"\tif ( card ) {",
				"\t\tvar texture = card.material.uniforms.image.value;",
				"\t\tpolarSpheres.userData.setTexture( texture );",
				"\t\tcard.material.uniforms.opacity.value = 1;",
				"\t\tcard.userData.startPct = startPct;",
				"\t\tcards.push( card );",
				"\t}",
				"",
				"\tindex ++;",
				"\tif ( index >= keyframes.length ) {",
				"\t\tindex = 0;",
				"\t\titeration ++;",
				"\t}",
				"",
				"}",
				"",
				"function reset( progress ) {",
				"",
				"\tvar analysis = manager.filters[ 'vocals' ];",
				"\tvar unitDuration = manager.unitDuration;",
				"",
				"\tplaybackRate = analysis.playbackRate;",
				"",
				"\tvar animationDuration = unitDuration * 2;",
				"\tvar duration = unitDuration / playbackRate;",
				"\tvar currentTime = progress * animationDuration;",
				"\tvar projectedTime = currentTime % duration;",
				"\tvar currentPct = projectedTime / duration;",
				"",
				"\titeration = Math.floor( currentTime / duration );",
				"",
				"\tfor ( var i = 0; i < keyframes.length; i++ ) {",
				"\t\tindex = i;",
				"\t\tif ( keyframes[ i ] / unitDuration > currentPct ) {",
				"\t\t\tbreak;",
				"\t\t}",
				"\t}",
				"",
				"\tresetCards();",
				"",
				"}",
				"",
				"function resetCards() {",
				"",
				"\tfor ( var j = 0; j < cards.length; j++ ) {",
				"\t\tvar card = cards[ j ];",
				"\t\tcard.material.uniforms.opacity.value = 0.25;",
				"\t}",
				"",
				"\tcards.length = 0;",
				"",
				"}"
			]
		],
		[
			"Do Anything But Upset You",
			[
				"var manager = resources.get( 'audio-manager' );",
				"var lyrics = resources.get( 'lyrics' );",
				"var polarSpheres = resources.get( 'polar-spheres' );",
				"",
				"var index = 0;",
				"var iteration = 0;",
				"",
				"var keyframes = [",
				"\t// Taken from Ableton Project",
				"\t2.250, 2.667, 3.485,",
				"\t3.767, 4.372,",
				"];",
				"",
				"var words = [",
				"\t'DO', 'ANYTHING', 'BUT', 'UPSET', 'YOU'",
				"];",
				"",
				"var cards = [];",
				"",
				"function start( progress ) {",
				"",
				"\treset( progress );",
				"",
				"}",
				"",
				"function end( progress ){",
				"",
				"\tresetCards();",
				"",
				"}",
				"",
				"function update( progress ) {",
				"",
				"\tvar analysis = manager.filters[ 'vocals' ];",
				"",
				"\tif ( analysis.playbackRate !== playbackRate ) {",
				"\t\treset( progress );",
				"\t}",
				"",
				"\tvar unitDuration = manager.unitDuration;",
				"\tvar maxIterations = Math.ceil( playbackRate );",
				"",
				"\tvar animationDuration = unitDuration * 2;",
				"\tvar duration = unitDuration / playbackRate;",
				"\tvar currentTime = progress * animationDuration;",
				"\tvar projectedTime = currentTime % duration;",
				"\tvar currentPct = projectedTime / duration;",
				"\tvar currentIteration = Math.floor( currentTime / duration );",
				"",
				"\tvar keyframe = keyframes[ index ] / unitDuration;",
				"",
				"\tvar ca = currentIteration < maxIterations;",
				"\tvar cb = currentIteration === iteration;",
				"\tvar cc = currentPct >= keyframe;",
				"",
				"\tif ( ca && cb && cc ) {",
				"\t\ttrigger( currentPct );",
				"\t}",
				"",
				"\tfor ( var i = 0; i < cards.length; i++ ) {",
				"",
				"\t\tvar card = cards[ i ];",
				"\t\tvar startPct = card.userData.startPct;",
				"\t\tvar t = 10 * ( currentPct - startPct );",
				"\t\tvar opacity = card.material.uniforms.opacity;",
				"",
				"\t\tif ( t < 1 ) {",
				"\t\t\topacity.value = 0.75 * ( 1 - t ) + 0.25;",
				"\t\t} else if ( opacity.value !== 0.25 ) {",
				"\t\t\topacity.value = 0.25;",
				"\t\t\tcards.splice( i, 1 );",
				"\t\t}",
				"",
				"\t}",
				"",
				"}",
				"",
				"function trigger( startPct ) {",
				"",
				"\tvar key = words[ index ];",
				"\tvar card = lyrics.userData.dictionary[ key ];",
				"",
				"\tif ( card ) {",
				"\t\tvar texture = card.material.uniforms.image.value;",
				"\t\tpolarSpheres.userData.setTexture( texture );",
				"\t\tcard.material.uniforms.opacity.value = 1;",
				"\t\tcard.userData.startPct = startPct;",
				"\t\tcards.push( card );",
				"\t}",
				"",
				"\tindex ++;",
				"\tif ( index >= keyframes.length ) {",
				"\t\tindex = 0;",
				"\t\titeration ++;",
				"\t}",
				"",
				"}",
				"",
				"function reset( progress ) {",
				"",
				"\tvar analysis = manager.filters[ 'vocals' ];",
				"\tvar unitDuration = manager.unitDuration;",
				"",
				"\tplaybackRate = analysis.playbackRate;",
				"",
				"\tvar animationDuration = unitDuration * 2;",
				"\tvar duration = unitDuration / playbackRate;",
				"\tvar currentTime = progress * animationDuration;",
				"\tvar projectedTime = currentTime % duration;",
				"\tvar currentPct = projectedTime / duration;",
				"",
				"\titeration = Math.floor( currentTime / duration );",
				"",
				"\tfor ( var i = 0; i < keyframes.length; i++ ) {",
				"\t\tindex = i;",
				"\t\tif ( keyframes[ i ] / unitDuration > currentPct ) {",
				"\t\t\tbreak;",
				"\t\t}",
				"\t}",
				"",
				"\tresetCards();",
				"",
				"}",
				"",
				"function resetCards() {",
				"",
				"\tfor ( var j = 0; j < cards.length; j++ ) {",
				"\t\tvar card = cards[ j ];",
				"\t\tcard.material.uniforms.opacity.value = 0.25;",
				"\t}",
				"",
				"\tcards.length = 0;",
				"",
				"}"
			]
		],
		[
			"Feel Like I Could Comfort You",
			[
				"var manager = resources.get( 'audio-manager' );",
				"var lyrics = resources.get( 'lyrics' );",
				"var polarSpheres = resources.get( 'polar-spheres' );",
				"",
				"var index = 0;",
				"var iteration = 0;",
				"",
				"var keyframes = [",
				"\t// Taken from Ableton Project",
				"\t2.365, 2.750, 3.151, 3.453,",
				"\t3.778, 4.405",
				"];",
				"",
				"var words = [",
				"\t'FEEL', 'LIKE', 'I', 'COULD',",
				"\t'COMFORT', 'YOU'",
				"];",
				"",
				"var cards = [];",
				"",
				"function start( progress ) {",
				"",
				"\treset( progress );",
				"",
				"}",
				"",
				"function end( progress ){",
				"",
				"\tresetCards();",
				"",
				"}",
				"",
				"function update( progress ) {",
				"",
				"\tvar analysis = manager.filters[ 'vocals' ];",
				"",
				"\tif ( analysis.playbackRate !== playbackRate ) {",
				"\t\treset( progress );",
				"\t}",
				"",
				"\tvar unitDuration = manager.unitDuration;",
				"\tvar maxIterations = Math.ceil( playbackRate );",
				"",
				"\tvar animationDuration = unitDuration * 2;",
				"\tvar duration = unitDuration / playbackRate;",
				"\tvar currentTime = progress * animationDuration;",
				"\tvar projectedTime = currentTime % duration;",
				"\tvar currentPct = projectedTime / duration;",
				"\tvar currentIteration = Math.floor( currentTime / duration );",
				"",
				"\tvar keyframe = keyframes[ index ] / unitDuration;",
				"",
				"\tvar ca = currentIteration < maxIterations;",
				"\tvar cb = currentIteration === iteration;",
				"\tvar cc = currentPct >= keyframe;",
				"",
				"\tif ( ca && cb && cc ) {",
				"\t\ttrigger( currentPct );",
				"\t}",
				"",
				"\tfor ( var i = 0; i < cards.length; i++ ) {",
				"",
				"\t\tvar card = cards[ i ];",
				"\t\tvar startPct = card.userData.startPct;",
				"\t\tvar t = 10 * ( currentPct - startPct );",
				"\t\tvar opacity = card.material.uniforms.opacity;",
				"",
				"\t\tif ( t < 1 ) {",
				"\t\t\topacity.value = 0.75 * ( 1 - t ) + 0.25;",
				"\t\t} else if ( opacity.value !== 0.25 ) {",
				"\t\t\topacity.value = 0.25;",
				"\t\t\tcards.splice( i, 1 );",
				"\t\t}",
				"",
				"\t}",
				"",
				"}",
				"",
				"function trigger( startPct ) {",
				"",
				"\tvar key = words[ index ];",
				"\tvar card = lyrics.userData.dictionary[ key ];",
				"",
				"\tif ( card ) {",
				"\t\tvar texture = card.material.uniforms.image.value;",
				"\t\tpolarSpheres.userData.setTexture( texture );",
				"\t\tcard.material.uniforms.opacity.value = 1;",
				"\t\tcard.userData.startPct = startPct;",
				"\t\tcards.push( card );",
				"\t}",
				"",
				"\tindex ++;",
				"\tif ( index >= keyframes.length ) {",
				"\t\tindex = 0;",
				"\t\titeration ++;",
				"\t}",
				"",
				"}",
				"",
				"function reset( progress ) {",
				"",
				"\tvar analysis = manager.filters[ 'vocals' ];",
				"\tvar unitDuration = manager.unitDuration;",
				"",
				"\tplaybackRate = analysis.playbackRate;",
				"",
				"\tvar animationDuration = unitDuration * 2;",
				"\tvar duration = unitDuration / playbackRate;",
				"\tvar currentTime = progress * animationDuration;",
				"\tvar projectedTime = currentTime % duration;",
				"\tvar currentPct = projectedTime / duration;",
				"",
				"\titeration = Math.floor( currentTime / duration );",
				"",
				"\tfor ( var i = 0; i < keyframes.length; i++ ) {",
				"\t\tindex = i;",
				"\t\tif ( keyframes[ i ] / unitDuration > currentPct ) {",
				"\t\t\tbreak;",
				"\t\t}",
				"\t}",
				"",
				"\tresetCards();",
				"",
				"}",
				"",
				"function resetCards() {",
				"",
				"\tfor ( var j = 0; j < cards.length; j++ ) {",
				"\t\tvar card = cards[ j ];",
				"\t\tcard.material.uniforms.opacity.value = 0.25;",
				"\t}",
				"",
				"\tcards.length = 0;",
				"",
				"}"
			]
		],
		[
			"So Let Me Take You By Your Hand And Walk",
			[
				"var manager = resources.get( 'audio-manager' );",
				"var lyrics = resources.get( 'lyrics' );",
				"var polarSpheres = resources.get( 'polar-spheres' );",
				"",
				"var index = 0;",
				"var iteration = 0;",
				"",
				"var keyframes = [",
				"\t// Taken from Ableton Project",
				"\t2.288, 2.456, 2.631, 3.038,",
				"\t3.468, 3.780, 3.955, 4.333,",
				"\t4.799, 5.253",
				"];",
				"",
				"var words = [",
				"\t'SO', 'LET', 'ME', 'TAKE',",
				"\t'YOU', 'BY', 'YOUR', 'HAND',",
				"\t'AND', 'WALK'",
				"];",
				"",
				"var cards = [];",
				"",
				"function start( progress ) {",
				"",
				"\treset( progress );",
				"",
				"}",
				"",
				"function end( progress ){",
				"",
				"\tresetCards();",
				"",
				"}",
				"",
				"function update( progress ) {",
				"",
				"\tvar analysis = manager.filters[ 'vocals' ];",
				"",
				"\tif ( analysis.playbackRate !== playbackRate ) {",
				"\t\treset( progress );",
				"\t}",
				"",
				"\tvar unitDuration = manager.unitDuration;",
				"\tvar maxIterations = Math.ceil( playbackRate );",
				"",
				"\tvar animationDuration = unitDuration * 2;",
				"\tvar duration = unitDuration / playbackRate;",
				"\tvar currentTime = progress * animationDuration;",
				"\tvar projectedTime = currentTime % duration;",
				"\tvar currentPct = projectedTime / duration;",
				"\tvar currentIteration = Math.floor( currentTime / duration );",
				"",
				"\tvar keyframe = keyframes[ index ] / unitDuration;",
				"",
				"\tvar ca = currentIteration < maxIterations;",
				"\tvar cb = currentIteration === iteration;",
				"\tvar cc = currentPct >= keyframe;",
				"",
				"\tif ( ca && cb && cc ) {",
				"\t\ttrigger( currentPct );",
				"\t}",
				"",
				"\tfor ( var i = 0; i < cards.length; i++ ) {",
				"",
				"\t\tvar card = cards[ i ];",
				"\t\tvar startPct = card.userData.startPct;",
				"\t\tvar t = 10 * ( currentPct - startPct );",
				"\t\tvar opacity = card.material.uniforms.opacity;",
				"",
				"\t\tif ( t < 1 ) {",
				"\t\t\topacity.value = 0.75 * ( 1 - t ) + 0.25;",
				"\t\t} else if ( opacity.value !== 0.25 ) {",
				"\t\t\topacity.value = 0.25;",
				"\t\t\tcards.splice( i, 1 );",
				"\t\t}",
				"",
				"\t}",
				"",
				"}",
				"",
				"function trigger( startPct ) {",
				"",
				"\tvar key = words[ index ];",
				"\tvar card = lyrics.userData.dictionary[ key ];",
				"",
				"\tif ( card ) {",
				"\t\tvar texture = card.material.uniforms.image.value;",
				"\t\tpolarSpheres.userData.setTexture( texture );",
				"\t\tcard.material.uniforms.opacity.value = 1;",
				"\t\tcard.userData.startPct = startPct;",
				"\t\tcards.push( card );",
				"\t}",
				"",
				"\tindex ++;",
				"\tif ( index >= keyframes.length ) {",
				"\t\tindex = 0;",
				"\t\titeration ++;",
				"\t}",
				"",
				"}",
				"",
				"function reset( progress ) {",
				"",
				"\tvar analysis = manager.filters[ 'vocals' ];",
				"\tvar unitDuration = manager.unitDuration;",
				"",
				"\tplaybackRate = analysis.playbackRate;",
				"",
				"\tvar animationDuration = unitDuration * 2;",
				"\tvar duration = unitDuration / playbackRate;",
				"\tvar currentTime = progress * animationDuration;",
				"\tvar projectedTime = currentTime % duration;",
				"\tvar currentPct = projectedTime / duration;",
				"",
				"\titeration = Math.floor( currentTime / duration );",
				"",
				"\tfor ( var i = 0; i < keyframes.length; i++ ) {",
				"\t\tindex = i;",
				"\t\tif ( keyframes[ i ] / unitDuration > currentPct ) {",
				"\t\t\tbreak;",
				"\t\t}",
				"\t}",
				"",
				"\tresetCards();",
				"",
				"}",
				"",
				"function resetCards() {",
				"",
				"\tfor ( var j = 0; j < cards.length; j++ ) {",
				"\t\tvar card = cards[ j ];",
				"\t\tcard.material.uniforms.opacity.value = 0.25;",
				"\t}",
				"",
				"\tcards.length = 0;",
				"",
				"}"
			]
		],
		[
			"Beside You Into Something Good, Oh Oh",
			[
				"var manager = resources.get( 'audio-manager' );",
				"var lyrics = resources.get( 'lyrics' );",
				"var polarSpheres = resources.get( 'polar-spheres' );",
				"",
				"var index = 0;",
				"var iteration = 0;",
				"",
				"var keyframes = [",
				"\t// Taken from Ableton Project",
				"\t5.464, 6.090,",
				"\t6.732, 7.422, 7.750, 8.615,",
				"\t9.925",
				"];",
				"",
				"for ( var i = 0; i < keyframes.length; i++ ) {",
				"\tkeyframes[ i ] = keyframes[ i ] - manager.unitDuration;",
				"}",
				"",
				"var words = [",
				"\t'BESIDE', 'YOU',",
				"\t'INTO', 'SOMETHING', 'GOOD',",
				"\t'OH', 'OH'",
				"];",
				"",
				"var cards = [];",
				"",
				"function start( progress ) {",
				"",
				"\treset( progress );",
				"",
				"}",
				"",
				"function end( progress ){",
				"",
				"\tresetCards();",
				"",
				"}",
				"",
				"function update( progress ) {",
				"",
				"\tvar analysis = manager.filters[ 'vocals' ];",
				"",
				"\tif ( analysis.playbackRate !== playbackRate ) {",
				"\t\treset( progress );",
				"\t}",
				"",
				"\tvar unitDuration = manager.unitDuration;",
				"\tvar maxIterations = Math.ceil( playbackRate );",
				"",
				"\tvar animationDuration = unitDuration * 2;",
				"\tvar duration = unitDuration / playbackRate;",
				"\tvar currentTime = progress * animationDuration;",
				"\tvar projectedTime = currentTime % duration;",
				"\tvar currentPct = projectedTime / duration;",
				"\tvar currentIteration = Math.floor( currentTime / duration );",
				"",
				"\tvar keyframe = keyframes[ index ] / unitDuration;",
				"",
				"\tvar ca = currentIteration < maxIterations;",
				"\tvar cb = currentIteration === iteration;",
				"\tvar cc = currentPct >= keyframe;",
				"",
				"\tif ( ca && cb && cc ) {",
				"\t\ttrigger( currentPct );",
				"\t}",
				"",
				"\tfor ( var i = 0; i < cards.length; i++ ) {",
				"",
				"\t\tvar card = cards[ i ];",
				"\t\tvar startPct = card.userData.startPct;",
				"\t\tvar t = 10 * ( currentPct - startPct );",
				"\t\tvar opacity = card.material.uniforms.opacity;",
				"",
				"\t\tif ( t < 1 ) {",
				"\t\t\topacity.value = 0.75 * ( 1 - t ) + 0.25;",
				"\t\t} else if ( opacity.value !== 0.25 ) {",
				"\t\t\topacity.value = 0.25;",
				"\t\t\tcards.splice( i, 1 );",
				"\t\t}",
				"",
				"\t}",
				"",
				"}",
				"",
				"function trigger( startPct ) {",
				"",
				"\tvar key = words[ index ];",
				"\tvar card = lyrics.userData.dictionary[ key ];",
				"",
				"\tif ( card ) {",
				"\t\tvar texture = card.material.uniforms.image.value;",
				"\t\tpolarSpheres.userData.setTexture( texture );",
				"\t\tcard.material.uniforms.opacity.value = 1;",
				"\t\tcard.userData.startPct = startPct;",
				"\t\tcards.push( card );",
				"\t}",
				"",
				"\tindex ++;",
				"\tif ( index >= keyframes.length ) {",
				"\t\tindex = 0;",
				"\t\titeration ++;",
				"\t}",
				"",
				"}",
				"",
				"function reset( progress ) {",
				"",
				"\tvar analysis = manager.filters[ 'vocals' ];",
				"\tvar unitDuration = manager.unitDuration;",
				"",
				"\tplaybackRate = analysis.playbackRate;",
				"",
				"\tvar animationDuration = unitDuration * 2;",
				"\tvar duration = unitDuration / playbackRate;",
				"\tvar currentTime = progress * animationDuration;",
				"\tvar projectedTime = currentTime % duration;",
				"\tvar currentPct = projectedTime / duration;",
				"",
				"\titeration = Math.floor( currentTime / duration );",
				"",
				"\tfor ( var i = 0; i < keyframes.length; i++ ) {",
				"\t\tindex = i;",
				"\t\tif ( keyframes[ i ] / unitDuration > currentPct ) {",
				"\t\t\tbreak;",
				"\t\t}",
				"\t}",
				"",
				"\tresetCards();",
				"",
				"}",
				"",
				"function resetCards() {",
				"",
				"\tfor ( var j = 0; j < cards.length; j++ ) {",
				"\t\tvar card = cards[ j ];",
				"\t\tcard.material.uniforms.opacity.value = 0.25;",
				"\t}",
				"",
				"\tcards.length = 0;",
				"",
				"}"
			]
		],
		[
			"What You Don't Know, What You Don't Know, Oh Oh",
			[
				"var manager = resources.get( 'audio-manager' );",
				"var lyrics = resources.get( 'lyrics' );",
				"var polarSpheres = resources.get( 'polar-spheres' );",
				"",
				"var index = 0;",
				"var iteration = 0;",
				"",
				"var keyframes = [",
				"\t// Taken from Ableton Project",
				"\t0.149, 0.518, 0.750, 1.146,",
				"\t1.417, 1.667, 1.862, 2.333,",
				"\t3.268, 4.602",
				"];",
				"",
				"var words = [",
				"\t'WHAT', 'YOU', 'DON\\'T', 'KNOW',",
				"\t'WHAT', 'YOU', 'DON\\'T', 'KNOW',",
				"\t'OH', 'OH'",
				"];",
				"",
				"var cards = [];",
				"",
				"function start( progress ) {",
				"",
				"\treset( progress );",
				"",
				"}",
				"",
				"function end( progress ){",
				"",
				"\tresetCards();",
				"",
				"}",
				"",
				"function update( progress ) {",
				"",
				"\tvar analysis = manager.filters[ 'vocals' ];",
				"",
				"\tif ( analysis.playbackRate !== playbackRate ) {",
				"\t\treset( progress );",
				"\t}",
				"",
				"\tvar unitDuration = manager.unitDuration;",
				"\tvar maxIterations = Math.ceil( playbackRate );",
				"",
				"\tvar animationDuration = unitDuration * 2;",
				"\tvar duration = unitDuration / playbackRate;",
				"\tvar currentTime = progress * animationDuration;",
				"\tvar projectedTime = currentTime % duration;",
				"\tvar currentPct = projectedTime / duration;",
				"\tvar currentIteration = Math.floor( currentTime / duration );",
				"",
				"\tvar keyframe = keyframes[ index ] / unitDuration;",
				"",
				"\tvar ca = currentIteration < maxIterations;",
				"\tvar cb = currentIteration === iteration;",
				"\tvar cc = currentPct >= keyframe;",
				"",
				"\tif ( ca && cb && cc ) {",
				"\t\ttrigger( currentPct );",
				"\t}",
				"",
				"\tfor ( var i = 0; i < cards.length; i++ ) {",
				"",
				"\t\tvar card = cards[ i ];",
				"\t\tvar startPct = card.userData.startPct;",
				"\t\tvar t = 10 * ( currentPct - startPct );",
				"\t\tvar opacity = card.material.uniforms.opacity;",
				"",
				"\t\tif ( t < 1 ) {",
				"\t\t\topacity.value = 0.75 * ( 1 - t ) + 0.25;",
				"\t\t} else if ( opacity.value !== 0.25 ) {",
				"\t\t\topacity.value = 0.25;",
				"\t\t\tcards.splice( i, 1 );",
				"\t\t}",
				"",
				"\t}",
				"",
				"}",
				"",
				"function trigger( startPct ) {",
				"",
				"\tvar key = words[ index ];",
				"\tvar card = lyrics.userData.dictionary[ key ];",
				"",
				"\tif ( card ) {",
				"\t\tvar texture = card.material.uniforms.image.value;",
				"\t\tpolarSpheres.userData.setTexture( texture );",
				"\t\tcard.material.uniforms.opacity.value = 1;",
				"\t\tcard.userData.startPct = startPct;",
				"\t\tcards.push( card );",
				"\t}",
				"",
				"\tindex ++;",
				"\tif ( index >= keyframes.length ) {",
				"\t\tindex = 0;",
				"\t\titeration ++;",
				"\t}",
				"",
				"}",
				"",
				"function reset( progress ) {",
				"",
				"\tvar analysis = manager.filters[ 'vocals' ];",
				"\tvar unitDuration = manager.unitDuration;",
				"",
				"\tplaybackRate = analysis.playbackRate;",
				"",
				"\tvar animationDuration = unitDuration * 2;",
				"\tvar duration = unitDuration / playbackRate;",
				"\tvar currentTime = progress * animationDuration;",
				"\tvar projectedTime = currentTime % duration;",
				"\tvar currentPct = projectedTime / duration;",
				"",
				"\titeration = Math.floor( currentTime / duration );",
				"",
				"\tfor ( var i = 0; i < keyframes.length; i++ ) {",
				"\t\tindex = i;",
				"\t\tif ( keyframes[ i ] / unitDuration > currentPct ) {",
				"\t\t\tbreak;",
				"\t\t}",
				"\t}",
				"",
				"\tresetCards();",
				"",
				"}",
				"",
				"function resetCards() {",
				"",
				"\tfor ( var j = 0; j < cards.length; j++ ) {",
				"\t\tvar card = cards[ j ];",
				"\t\tcard.material.uniforms.opacity.value = 0.25;",
				"\t}",
				"",
				"\tcards.length = 0;",
				"",
				"}"
			]
		],
		[
			"Oh, Oh, Oh, Oh",
			[
				"var manager = resources.get( 'audio-manager' );",
				"var lyrics = resources.get( 'lyrics' );",
				"var polarSpheres = resources.get( 'polar-spheres' );",
				"",
				"var index = 0;",
				"var iteration = 0;",
				"",
				"var keyframes = [",
				"\t// Taken from Ableton Project",
				"\t0.615, 1.937, 3.261, 4.630",
				"];",
				"",
				"var words = [",
				"\t'OH', 'OH', 'OH', 'OH'",
				"];",
				"",
				"var cards = [];",
				"",
				"function start( progress ) {",
				"",
				"\treset( progress );",
				"",
				"}",
				"",
				"function end( progress ){",
				"",
				"\tresetCards();",
				"",
				"}",
				"",
				"function update( progress ) {",
				"",
				"\tvar analysis = manager.filters[ 'vocals' ];",
				"",
				"\tif ( analysis.playbackRate !== playbackRate ) {",
				"\t\treset( progress );",
				"\t}",
				"",
				"\tvar unitDuration = manager.unitDuration;",
				"\tvar maxIterations = Math.ceil( playbackRate );",
				"",
				"\tvar animationDuration = unitDuration * 2;",
				"\tvar duration = unitDuration / playbackRate;",
				"\tvar currentTime = progress * animationDuration;",
				"\tvar projectedTime = currentTime % duration;",
				"\tvar currentPct = projectedTime / duration;",
				"\tvar currentIteration = Math.floor( currentTime / duration );",
				"",
				"\tvar keyframe = keyframes[ index ] / unitDuration;",
				"",
				"\tvar ca = currentIteration < maxIterations;",
				"\tvar cb = currentIteration === iteration;",
				"\tvar cc = currentPct >= keyframe;",
				"",
				"\tif ( ca && cb && cc ) {",
				"\t\ttrigger( currentPct );",
				"\t}",
				"",
				"\tfor ( var i = 0; i < cards.length; i++ ) {",
				"",
				"\t\tvar card = cards[ i ];",
				"\t\tvar startPct = card.userData.startPct;",
				"\t\tvar t = 10 * ( currentPct - startPct );",
				"\t\tvar opacity = card.material.uniforms.opacity;",
				"",
				"\t\tif ( t < 1 ) {",
				"\t\t\topacity.value = 0.75 * ( 1 - t ) + 0.25;",
				"\t\t} else if ( opacity.value !== 0.25 ) {",
				"\t\t\topacity.value = 0.25;",
				"\t\t\tcards.splice( i, 1 );",
				"\t\t}",
				"",
				"\t}",
				"",
				"}",
				"",
				"function trigger( startPct ) {",
				"",
				"\tvar key = words[ index ];",
				"\tvar card = lyrics.userData.dictionary[ key ];",
				"",
				"\tif ( card ) {",
				"\t\tvar texture = card.material.uniforms.image.value;",
				"\t\tpolarSpheres.userData.setTexture( texture );",
				"\t\tcard.material.uniforms.opacity.value = 1;",
				"\t\tcard.userData.startPct = startPct;",
				"\t\tcards.push( card );",
				"\t}",
				"",
				"\tindex ++;",
				"\tif ( index >= keyframes.length ) {",
				"\t\tindex = 0;",
				"\t\titeration ++;",
				"\t}",
				"",
				"}",
				"",
				"function reset( progress ) {",
				"",
				"\tvar analysis = manager.filters[ 'vocals' ];",
				"\tvar unitDuration = manager.unitDuration;",
				"",
				"\tplaybackRate = analysis.playbackRate;",
				"",
				"\tvar animationDuration = unitDuration * 2;",
				"\tvar duration = unitDuration / playbackRate;",
				"\tvar currentTime = progress * animationDuration;",
				"\tvar projectedTime = currentTime % duration;",
				"\tvar currentPct = projectedTime / duration;",
				"",
				"\titeration = Math.floor( currentTime / duration );",
				"",
				"\tfor ( var i = 0; i < keyframes.length; i++ ) {",
				"\t\tindex = i;",
				"\t\tif ( keyframes[ i ] / unitDuration > currentPct ) {",
				"\t\t\tbreak;",
				"\t\t}",
				"\t}",
				"",
				"\tresetCards();",
				"",
				"}",
				"",
				"function resetCards() {",
				"",
				"\tfor ( var j = 0; j < cards.length; j++ ) {",
				"\t\tvar card = cards[ j ];",
				"\t\tcard.material.uniforms.opacity.value = 0.25;",
				"\t}",
				"",
				"\tcards.length = 0;",
				"",
				"}"
			]
		],
		[
			"Oh, Oh",
			[
				"var manager = resources.get( 'audio-manager' );",
				"var lyrics = resources.get( 'lyrics' );",
				"var polarSpheres = resources.get( 'polar-spheres' );",
				"",
				"var index = 0;",
				"var iteration = 0;",
				"",
				"var keyframes = [",
				"\t// Taken from Ableton Project",
				"\t0.615, 3.261",
				"];",
				"",
				"var words = [",
				"\t'OH', 'OH'",
				"];",
				"",
				"var cards = [];",
				"",
				"function start( progress ) {",
				"",
				"\treset( progress );",
				"",
				"}",
				"",
				"function end( progress ){",
				"",
				"\tresetCards();",
				"",
				"}",
				"",
				"function update( progress ) {",
				"",
				"\tvar analysis = manager.filters[ 'vocals' ];",
				"",
				"\tif ( analysis.playbackRate !== playbackRate ) {",
				"\t\treset( progress );",
				"\t}",
				"",
				"\tvar unitDuration = manager.unitDuration;",
				"\tvar maxIterations = Math.ceil( playbackRate );",
				"",
				"\tvar animationDuration = unitDuration * 2;",
				"\tvar duration = unitDuration / playbackRate;",
				"\tvar currentTime = progress * animationDuration;",
				"\tvar projectedTime = currentTime % duration;",
				"\tvar currentPct = projectedTime / duration;",
				"\tvar currentIteration = Math.floor( currentTime / duration );",
				"",
				"\tvar keyframe = keyframes[ index ] / unitDuration;",
				"",
				"\tvar ca = currentIteration < maxIterations;",
				"\tvar cb = currentIteration === iteration;",
				"\tvar cc = currentPct >= keyframe;",
				"",
				"\tif ( ca && cb && cc ) {",
				"\t\ttrigger( currentPct );",
				"\t}",
				"",
				"\tfor ( var i = 0; i < cards.length; i++ ) {",
				"",
				"\t\tvar card = cards[ i ];",
				"\t\tvar startPct = card.userData.startPct;",
				"\t\tvar t = 10 * ( currentPct - startPct );",
				"\t\tvar opacity = card.material.uniforms.opacity;",
				"",
				"\t\tif ( t < 1 ) {",
				"\t\t\topacity.value = 0.75 * ( 1 - t ) + 0.25;",
				"\t\t} else if ( opacity.value !== 0.25 ) {",
				"\t\t\topacity.value = 0.25;",
				"\t\t\tcards.splice( i, 1 );",
				"\t\t}",
				"",
				"\t}",
				"",
				"}",
				"",
				"function trigger( startPct ) {",
				"",
				"\tvar key = words[ index ];",
				"\tvar card = lyrics.userData.dictionary[ key ];",
				"",
				"\tif ( card ) {",
				"\t\tvar texture = card.material.uniforms.image.value;",
				"\t\tpolarSpheres.userData.setTexture( texture );",
				"\t\tcard.material.uniforms.opacity.value = 1;",
				"\t\tcard.userData.startPct = startPct;",
				"\t\tcards.push( card );",
				"\t}",
				"",
				"\tindex ++;",
				"\tif ( index >= keyframes.length ) {",
				"\t\tindex = 0;",
				"\t\titeration ++;",
				"\t}",
				"",
				"}",
				"",
				"function reset( progress ) {",
				"",
				"\tvar analysis = manager.filters[ 'vocals' ];",
				"\tvar unitDuration = manager.unitDuration;",
				"",
				"\tplaybackRate = analysis.playbackRate;",
				"",
				"\tvar animationDuration = unitDuration * 2;",
				"\tvar duration = unitDuration / playbackRate;",
				"\tvar currentTime = progress * animationDuration;",
				"\tvar projectedTime = currentTime % duration;",
				"\tvar currentPct = projectedTime / duration;",
				"",
				"\titeration = Math.floor( currentTime / duration );",
				"",
				"\tfor ( var i = 0; i < keyframes.length; i++ ) {",
				"\t\tindex = i;",
				"\t\tif ( keyframes[ i ] / unitDuration > currentPct ) {",
				"\t\t\tbreak;",
				"\t\t}",
				"\t}",
				"",
				"\tresetCards();",
				"",
				"}",
				"",
				"function resetCards() {",
				"",
				"\tfor ( var j = 0; j < cards.length; j++ ) {",
				"\t\tvar card = cards[ j ];",
				"\t\tcard.material.uniforms.opacity.value = 0.25;",
				"\t}",
				"",
				"\tcards.length = 0;",
				"",
				"}"
			]
		],
		[
			"What You Don't Know, What You Don't Know, Beat Up All My Cues For You",
			[
				"var manager = resources.get( 'audio-manager' );",
				"var lyrics = resources.get( 'lyrics' );",
				"var polarSpheres = resources.get( 'polar-spheres' );",
				"",
				"var index = 0;",
				"var iteration = 0;",
				"",
				"var keyframes = [",
				"\t// Taken from Ableton Project",
				"\t0.149, 0.518, 0.750, 1.146,",
				"\t1.417, 1.667, 1.862, 2.333,",
				"\t2.667, 3.013, 3.133, 3.485,",
				"\t3.776, 4.029, 4.333",
				"];",
				"",
				"var words = [",
				"\t'WHAT', 'YOU', 'DON\\'T', 'KNOW',",
				"\t'WHAT', 'YOU', 'DON\\'T', 'KNOW',",
				"\t'BEAT', 'UP', 'ALL', 'MY',",
				"\t'CUES', 'FOR', 'YOU'",
				"];",
				"",
				"var cards = [];",
				"",
				"function start( progress ) {",
				"",
				"\treset( progress );",
				"",
				"}",
				"",
				"function end( progress ){",
				"",
				"\tresetCards();",
				"",
				"}",
				"",
				"function update( progress ) {",
				"",
				"\tvar analysis = manager.filters[ 'vocals' ];",
				"",
				"\tif ( analysis.playbackRate !== playbackRate ) {",
				"\t\treset( progress );",
				"\t}",
				"",
				"\tvar unitDuration = manager.unitDuration;",
				"\tvar maxIterations = Math.ceil( playbackRate );",
				"",
				"\tvar animationDuration = unitDuration * 2;",
				"\tvar duration = unitDuration / playbackRate;",
				"\tvar currentTime = progress * animationDuration;",
				"\tvar projectedTime = currentTime % duration;",
				"\tvar currentPct = projectedTime / duration;",
				"\tvar currentIteration = Math.floor( currentTime / duration );",
				"",
				"\tvar keyframe = keyframes[ index ] / unitDuration;",
				"",
				"\tvar ca = currentIteration < maxIterations;",
				"\tvar cb = currentIteration === iteration;",
				"\tvar cc = currentPct >= keyframe;",
				"",
				"\tif ( ca && cb && cc ) {",
				"\t\ttrigger( currentPct );",
				"\t}",
				"",
				"\tfor ( var i = 0; i < cards.length; i++ ) {",
				"",
				"\t\tvar card = cards[ i ];",
				"\t\tvar startPct = card.userData.startPct;",
				"\t\tvar t = 10 * ( currentPct - startPct );",
				"\t\tvar opacity = card.material.uniforms.opacity;",
				"",
				"\t\tif ( t < 1 ) {",
				"\t\t\topacity.value = 0.75 * ( 1 - t ) + 0.25;",
				"\t\t} else if ( opacity.value !== 0.25 ) {",
				"\t\t\topacity.value = 0.25;",
				"\t\t\tcards.splice( i, 1 );",
				"\t\t}",
				"",
				"\t}",
				"",
				"}",
				"",
				"function trigger( startPct ) {",
				"",
				"\tvar key = words[ index ];",
				"\tvar card = lyrics.userData.dictionary[ key ];",
				"",
				"\tif ( card ) {",
				"\t\tvar texture = card.material.uniforms.image.value;",
				"\t\tpolarSpheres.userData.setTexture( texture );",
				"\t\tcard.material.uniforms.opacity.value = 1;",
				"\t\tcard.userData.startPct = startPct;",
				"\t\tcards.push( card );",
				"\t}",
				"",
				"\tindex ++;",
				"\tif ( index >= keyframes.length ) {",
				"\t\tindex = 0;",
				"\t\titeration ++;",
				"\t}",
				"",
				"}",
				"",
				"function reset( progress ) {",
				"",
				"\tvar analysis = manager.filters[ 'vocals' ];",
				"\tvar unitDuration = manager.unitDuration;",
				"",
				"\tplaybackRate = analysis.playbackRate;",
				"",
				"\tvar animationDuration = unitDuration * 2;",
				"\tvar duration = unitDuration / playbackRate;",
				"\tvar currentTime = progress * animationDuration;",
				"\tvar projectedTime = currentTime % duration;",
				"\tvar currentPct = projectedTime / duration;",
				"",
				"\titeration = Math.floor( currentTime / duration );",
				"",
				"\tfor ( var i = 0; i < keyframes.length; i++ ) {",
				"\t\tindex = i;",
				"\t\tif ( keyframes[ i ] / unitDuration > currentPct ) {",
				"\t\t\tbreak;",
				"\t\t}",
				"\t}",
				"",
				"\tresetCards();",
				"",
				"}",
				"",
				"function resetCards() {",
				"",
				"\tfor ( var j = 0; j < cards.length; j++ ) {",
				"\t\tvar card = cards[ j ];",
				"\t\tcard.material.uniforms.opacity.value = 0.25;",
				"\t}",
				"",
				"\tcards.length = 0;",
				"",
				"}"
			]
		],
		[
			"Oh, For You I'd Take It Off Too Soon",
			[
				"var manager = resources.get( 'audio-manager' );",
				"var lyrics = resources.get( 'lyrics' );",
				"var polarSpheres = resources.get( 'polar-spheres' );",
				"",
				"var index = 0;",
				"var iteration = 0;",
				"",
				"var keyframes = [",
				"\t// Taken from Ableton Project",
				"\t0.593,",
				"\t2.198, 2.625, 2.917,",
				"\t3.123, 3.333, 3.766,",
				"\t4.090, 4.333",
				"];",
				"",
				"var words = [",
				"\t'OH',",
				"\t'FOR', 'YOU', 'I\\'D', 'TAKE',",
				"\t'IT', 'OFF', 'TOO', 'SOON'",
				"];",
				"",
				"var cards = [];",
				"",
				"function start( progress ) {",
				"",
				"\treset( progress );",
				"",
				"}",
				"",
				"function end( progress ){",
				"",
				"\tresetCards();",
				"",
				"}",
				"",
				"function update( progress ) {",
				"",
				"\tvar analysis = manager.filters[ 'vocals' ];",
				"",
				"\tif ( analysis.playbackRate !== playbackRate ) {",
				"\t\treset( progress );",
				"\t}",
				"",
				"\tvar unitDuration = manager.unitDuration;",
				"\tvar maxIterations = Math.ceil( playbackRate );",
				"",
				"\tvar animationDuration = unitDuration * 2;",
				"\tvar duration = unitDuration / playbackRate;",
				"\tvar currentTime = progress * animationDuration;",
				"\tvar projectedTime = currentTime % duration;",
				"\tvar currentPct = projectedTime / duration;",
				"\tvar currentIteration = Math.floor( currentTime / duration );",
				"",
				"\tvar keyframe = keyframes[ index ] / unitDuration;",
				"",
				"\tvar ca = currentIteration < maxIterations;",
				"\tvar cb = currentIteration === iteration;",
				"\tvar cc = currentPct >= keyframe;",
				"",
				"\tif ( ca && cb && cc ) {",
				"\t\ttrigger( currentPct );",
				"\t}",
				"",
				"\tfor ( var i = 0; i < cards.length; i++ ) {",
				"",
				"\t\tvar card = cards[ i ];",
				"\t\tvar startPct = card.userData.startPct;",
				"\t\tvar t = 10 * ( currentPct - startPct );",
				"\t\tvar opacity = card.material.uniforms.opacity;",
				"",
				"\t\tif ( t < 1 ) {",
				"\t\t\topacity.value = 0.75 * ( 1 - t ) + 0.25;",
				"\t\t} else if ( opacity.value !== 0.25 ) {",
				"\t\t\topacity.value = 0.25;",
				"\t\t\tcards.splice( i, 1 );",
				"\t\t}",
				"",
				"\t}",
				"",
				"}",
				"",
				"function trigger( startPct ) {",
				"",
				"\tvar key = words[ index ];",
				"\tvar card = lyrics.userData.dictionary[ key ];",
				"",
				"\tif ( card ) {",
				"\t\tvar texture = card.material.uniforms.image.value;",
				"\t\tpolarSpheres.userData.setTexture( texture );",
				"\t\tcard.material.uniforms.opacity.value = 1;",
				"\t\tcard.userData.startPct = startPct;",
				"\t\tcards.push( card );",
				"\t}",
				"",
				"\tindex ++;",
				"\tif ( index >= keyframes.length ) {",
				"\t\tindex = 0;",
				"\t\titeration ++;",
				"\t}",
				"",
				"}",
				"",
				"function reset( progress ) {",
				"",
				"\tvar analysis = manager.filters[ 'vocals' ];",
				"\tvar unitDuration = manager.unitDuration;",
				"",
				"\tplaybackRate = analysis.playbackRate;",
				"",
				"\tvar animationDuration = unitDuration * 2;",
				"\tvar duration = unitDuration / playbackRate;",
				"\tvar currentTime = progress * animationDuration;",
				"\tvar projectedTime = currentTime % duration;",
				"\tvar currentPct = projectedTime / duration;",
				"",
				"\titeration = Math.floor( currentTime / duration );",
				"",
				"\tfor ( var i = 0; i < keyframes.length; i++ ) {",
				"\t\tindex = i;",
				"\t\tif ( keyframes[ i ] / unitDuration > currentPct ) {",
				"\t\t\tbreak;",
				"\t\t}",
				"\t}",
				"",
				"\tresetCards();",
				"",
				"}",
				"",
				"function resetCards() {",
				"",
				"\tfor ( var j = 0; j < cards.length; j++ ) {",
				"\t\tvar card = cards[ j ];",
				"\t\tcard.material.uniforms.opacity.value = 0.25;",
				"\t}",
				"",
				"\tcards.length = 0;",
				"",
				"}"
			]
		],
		[
			"Another Way To Get To You",
			[
				"var manager = resources.get( 'audio-manager' );",
				"var lyrics = resources.get( 'lyrics' );",
				"var polarSpheres = resources.get( 'polar-spheres' );",
				"",
				"var index = 0;",
				"var iteration = 0;",
				"",
				"var keyframes = [",
				"\t// Taken from Ableton Project",
				"\t2.829, 3.167, 3.407,",
				"\t3.758, 4.013, 4.333",
				"];",
				"",
				"var words = [",
				"\t'ANOTHER', 'WAY', 'TO',",
				"\t'GET', 'TO', 'YOU'",
				"];",
				"",
				"var cards = [];",
				"",
				"function start( progress ) {",
				"",
				"\treset( progress );",
				"",
				"}",
				"",
				"function end( progress ){",
				"",
				"\tresetCards();",
				"",
				"}",
				"",
				"function update( progress ) {",
				"",
				"\tvar analysis = manager.filters[ 'vocals' ];",
				"",
				"\tif ( analysis.playbackRate !== playbackRate ) {",
				"\t\treset( progress );",
				"\t}",
				"",
				"\tvar unitDuration = manager.unitDuration;",
				"\tvar maxIterations = Math.ceil( playbackRate );",
				"",
				"\tvar animationDuration = unitDuration * 2;",
				"\tvar duration = unitDuration / playbackRate;",
				"\tvar currentTime = progress * animationDuration;",
				"\tvar projectedTime = currentTime % duration;",
				"\tvar currentPct = projectedTime / duration;",
				"\tvar currentIteration = Math.floor( currentTime / duration );",
				"",
				"\tvar keyframe = keyframes[ index ] / unitDuration;",
				"",
				"\tvar ca = currentIteration < maxIterations;",
				"\tvar cb = currentIteration === iteration;",
				"\tvar cc = currentPct >= keyframe;",
				"",
				"\tif ( ca && cb && cc ) {",
				"\t\ttrigger( currentPct );",
				"\t}",
				"",
				"\tfor ( var i = 0; i < cards.length; i++ ) {",
				"",
				"\t\tvar card = cards[ i ];",
				"\t\tvar startPct = card.userData.startPct;",
				"\t\tvar t = 10 * ( currentPct - startPct );",
				"\t\tvar opacity = card.material.uniforms.opacity;",
				"",
				"\t\tif ( t < 1 ) {",
				"\t\t\topacity.value = 0.75 * ( 1 - t ) + 0.25;",
				"\t\t} else if ( opacity.value !== 0.25 ) {",
				"\t\t\topacity.value = 0.25;",
				"\t\t\tcards.splice( i, 1 );",
				"\t\t}",
				"",
				"\t}",
				"",
				"}",
				"",
				"function trigger( startPct ) {",
				"",
				"\tvar key = words[ index ];",
				"\tvar card = lyrics.userData.dictionary[ key ];",
				"",
				"\tif ( card ) {",
				"\t\tvar texture = card.material.uniforms.image.value;",
				"\t\tpolarSpheres.userData.setTexture( texture );",
				"\t\tcard.material.uniforms.opacity.value = 1;",
				"\t\tcard.userData.startPct = startPct;",
				"\t\tcards.push( card );",
				"\t}",
				"",
				"\tindex ++;",
				"\tif ( index >= keyframes.length ) {",
				"\t\tindex = 0;",
				"\t\titeration ++;",
				"\t}",
				"",
				"}",
				"",
				"function reset( progress ) {",
				"",
				"\tvar analysis = manager.filters[ 'vocals' ];",
				"\tvar unitDuration = manager.unitDuration;",
				"",
				"\tplaybackRate = analysis.playbackRate;",
				"",
				"\tvar animationDuration = unitDuration * 2;",
				"\tvar duration = unitDuration / playbackRate;",
				"\tvar currentTime = progress * animationDuration;",
				"\tvar projectedTime = currentTime % duration;",
				"\tvar currentPct = projectedTime / duration;",
				"",
				"\titeration = Math.floor( currentTime / duration );",
				"",
				"\tfor ( var i = 0; i < keyframes.length; i++ ) {",
				"\t\tindex = i;",
				"\t\tif ( keyframes[ i ] / unitDuration > currentPct ) {",
				"\t\t\tbreak;",
				"\t\t}",
				"\t}",
				"",
				"\tresetCards();",
				"",
				"}",
				"",
				"function resetCards() {",
				"",
				"\tfor ( var j = 0; j < cards.length; j++ ) {",
				"\t\tvar card = cards[ j ];",
				"\t\tcard.material.uniforms.opacity.value = 0.25;",
				"\t}",
				"",
				"\tcards.length = 0;",
				"",
				"}"
			]
		],
		[
			"Oh, Oh, Now Give Up All My Fears For You",
			[
				"var manager = resources.get( 'audio-manager' );",
				"var lyrics = resources.get( 'lyrics' );",
				"var polarSpheres = resources.get( 'polar-spheres' );",
				"",
				"var index = 0;",
				"var iteration = 0;",
				"",
				"var keyframes = [",
				"\t// Taken from Ableton Project",
				"\t0.594, 1.936, 2.279,",
				"\t2.633, 2.792, 3.133,",
				"\t3.478, 3.692, 4.033,",
				"\t4.250",
				"];",
				"",
				"var words = [",
				"\t'OH', 'OH',",
				"\t'NOW', 'GIVE', 'UP', 'ALL',",
				"\t'MY', 'FEARS', 'FOR', 'YOU'",
				"];",
				"",
				"var cards = [];",
				"",
				"function start( progress ) {",
				"",
				"\treset( progress );",
				"",
				"}",
				"",
				"function end( progress ){",
				"",
				"\tresetCards();",
				"",
				"}",
				"",
				"function update( progress ) {",
				"",
				"\tvar analysis = manager.filters[ 'vocals' ];",
				"",
				"\tif ( analysis.playbackRate !== playbackRate ) {",
				"\t\treset( progress );",
				"\t}",
				"",
				"\tvar unitDuration = manager.unitDuration;",
				"\tvar maxIterations = Math.ceil( playbackRate );",
				"",
				"\tvar animationDuration = unitDuration * 2;",
				"\tvar duration = unitDuration / playbackRate;",
				"\tvar currentTime = progress * animationDuration;",
				"\tvar projectedTime = currentTime % duration;",
				"\tvar currentPct = projectedTime / duration;",
				"\tvar currentIteration = Math.floor( currentTime / duration );",
				"",
				"\tvar keyframe = keyframes[ index ] / unitDuration;",
				"",
				"\tvar ca = currentIteration < maxIterations;",
				"\tvar cb = currentIteration === iteration;",
				"\tvar cc = currentPct >= keyframe;",
				"",
				"\tif ( ca && cb && cc ) {",
				"\t\ttrigger( currentPct );",
				"\t}",
				"",
				"\tfor ( var i = 0; i < cards.length; i++ ) {",
				"",
				"\t\tvar card = cards[ i ];",
				"\t\tvar startPct = card.userData.startPct;",
				"\t\tvar t = 10 * ( currentPct - startPct );",
				"\t\tvar opacity = card.material.uniforms.opacity;",
				"",
				"\t\tif ( t < 1 ) {",
				"\t\t\topacity.value = 0.75 * ( 1 - t ) + 0.25;",
				"\t\t} else if ( opacity.value !== 0.25 ) {",
				"\t\t\topacity.value = 0.25;",
				"\t\t\tcards.splice( i, 1 );",
				"\t\t}",
				"",
				"\t}",
				"",
				"}",
				"",
				"function trigger( startPct ) {",
				"",
				"\tvar key = words[ index ];",
				"\tvar card = lyrics.userData.dictionary[ key ];",
				"",
				"\tif ( card ) {",
				"\t\tvar texture = card.material.uniforms.image.value;",
				"\t\tpolarSpheres.userData.setTexture( texture );",
				"\t\tcard.material.uniforms.opacity.value = 1;",
				"\t\tcard.userData.startPct = startPct;",
				"\t\tcards.push( card );",
				"\t}",
				"",
				"\tindex ++;",
				"\tif ( index >= keyframes.length ) {",
				"\t\tindex = 0;",
				"\t\titeration ++;",
				"\t}",
				"",
				"}",
				"",
				"function reset( progress ) {",
				"",
				"\tvar analysis = manager.filters[ 'vocals' ];",
				"\tvar unitDuration = manager.unitDuration;",
				"",
				"\tplaybackRate = analysis.playbackRate;",
				"",
				"\tvar animationDuration = unitDuration * 2;",
				"\tvar duration = unitDuration / playbackRate;",
				"\tvar currentTime = progress * animationDuration;",
				"\tvar projectedTime = currentTime % duration;",
				"\tvar currentPct = projectedTime / duration;",
				"",
				"\titeration = Math.floor( currentTime / duration );",
				"",
				"\tfor ( var i = 0; i < keyframes.length; i++ ) {",
				"\t\tindex = i;",
				"\t\tif ( keyframes[ i ] / unitDuration > currentPct ) {",
				"\t\t\tbreak;",
				"\t\t}",
				"\t}",
				"",
				"\tresetCards();",
				"",
				"}",
				"",
				"function resetCards() {",
				"",
				"\tfor ( var j = 0; j < cards.length; j++ ) {",
				"\t\tvar card = cards[ j ];",
				"\t\tcard.material.uniforms.opacity.value = 0.25;",
				"\t}",
				"",
				"\tcards.length = 0;",
				"",
				"}"
			]
		],
		[
			"What You Don't Know, What You Don't Know, Come At Me What You Want Me To",
			[
				"var manager = resources.get( 'audio-manager' );",
				"var lyrics = resources.get( 'lyrics' );",
				"var polarSpheres = resources.get( 'polar-spheres' );",
				"",
				"var index = 0;",
				"var iteration = 0;",
				"",
				"var keyframes = [",
				"\t// Taken from Ableton Project",
				"\t0.149, 0.518, 0.750, 1.146,",
				"\t1.417, 1.667, 1.862, 2.333,",
				"\t2.400, 2.500, 2.667, 2.917,",
				"\t3.384, 3.750, 3.922, 4.394",
				"];",
				"",
				"var words = [",
				"\t'WHAT', 'YOU', 'DON\\'T', 'KNOW',",
				"\t'WHAT', 'YOU', 'DON\\'T', 'KNOW',",
				"\t'COME', 'AT', 'ME', 'WHAT',",
				"\t'YOU', 'WANT', 'ME', 'TO'",
				"];",
				"",
				"var cards = [];",
				"",
				"function start( progress ) {",
				"",
				"\treset( progress );",
				"",
				"}",
				"",
				"function end( progress ){",
				"",
				"\tresetCards();",
				"",
				"}",
				"",
				"function update( progress ) {",
				"",
				"\tvar analysis = manager.filters[ 'vocals' ];",
				"",
				"\tif ( analysis.playbackRate !== playbackRate ) {",
				"\t\treset( progress );",
				"\t}",
				"",
				"\tvar unitDuration = manager.unitDuration;",
				"\tvar maxIterations = Math.ceil( playbackRate );",
				"",
				"\tvar animationDuration = unitDuration * 2;",
				"\tvar duration = unitDuration / playbackRate;",
				"\tvar currentTime = progress * animationDuration;",
				"\tvar projectedTime = currentTime % duration;",
				"\tvar currentPct = projectedTime / duration;",
				"\tvar currentIteration = Math.floor( currentTime / duration );",
				"",
				"\tvar keyframe = keyframes[ index ] / unitDuration;",
				"",
				"\tvar ca = currentIteration < maxIterations;",
				"\tvar cb = currentIteration === iteration;",
				"\tvar cc = currentPct >= keyframe;",
				"",
				"\tif ( ca && cb && cc ) {",
				"\t\ttrigger( currentPct );",
				"\t}",
				"",
				"\tfor ( var i = 0; i < cards.length; i++ ) {",
				"",
				"\t\tvar card = cards[ i ];",
				"\t\tvar startPct = card.userData.startPct;",
				"\t\tvar t = 10 * ( currentPct - startPct );",
				"\t\tvar opacity = card.material.uniforms.opacity;",
				"",
				"\t\tif ( t < 1 ) {",
				"\t\t\topacity.value = 0.75 * ( 1 - t ) + 0.25;",
				"\t\t} else if ( opacity.value !== 0.25 ) {",
				"\t\t\topacity.value = 0.25;",
				"\t\t\tcards.splice( i, 1 );",
				"\t\t}",
				"",
				"\t}",
				"",
				"}",
				"",
				"function trigger( startPct ) {",
				"",
				"\tvar key = words[ index ];",
				"\tvar card = lyrics.userData.dictionary[ key ];",
				"",
				"\tif ( card ) {",
				"\t\tvar texture = card.material.uniforms.image.value;",
				"\t\tpolarSpheres.userData.setTexture( texture );",
				"\t\tcard.material.uniforms.opacity.value = 1;",
				"\t\tcard.userData.startPct = startPct;",
				"\t\tcards.push( card );",
				"\t}",
				"",
				"\tindex ++;",
				"\tif ( index >= keyframes.length ) {",
				"\t\tindex = 0;",
				"\t\titeration ++;",
				"\t}",
				"",
				"}",
				"",
				"function reset( progress ) {",
				"",
				"\tvar analysis = manager.filters[ 'vocals' ];",
				"\tvar unitDuration = manager.unitDuration;",
				"",
				"\tplaybackRate = analysis.playbackRate;",
				"",
				"\tvar animationDuration = unitDuration * 2;",
				"\tvar duration = unitDuration / playbackRate;",
				"\tvar currentTime = progress * animationDuration;",
				"\tvar projectedTime = currentTime % duration;",
				"\tvar currentPct = projectedTime / duration;",
				"",
				"\titeration = Math.floor( currentTime / duration );",
				"",
				"\tfor ( var i = 0; i < keyframes.length; i++ ) {",
				"\t\tindex = i;",
				"\t\tif ( keyframes[ i ] / unitDuration > currentPct ) {",
				"\t\t\tbreak;",
				"\t\t}",
				"\t}",
				"",
				"\tresetCards();",
				"",
				"}",
				"",
				"function resetCards() {",
				"",
				"\tfor ( var j = 0; j < cards.length; j++ ) {",
				"\t\tvar card = cards[ j ];",
				"\t\tcard.material.uniforms.opacity.value = 0.25;",
				"\t}",
				"",
				"\tcards.length = 0;",
				"",
				"}"
			]
		],
		[
			"What You Don't Know, What You Don't Know, Do Anything But Upset You",
			[
				"var manager = resources.get( 'audio-manager' );",
				"var lyrics = resources.get( 'lyrics' );",
				"var polarSpheres = resources.get( 'polar-spheres' );",
				"",
				"var index = 0;",
				"var iteration = 0;",
				"",
				"var keyframes = [",
				"\t// Taken from Ableton Project",
				"\t0.149, 0.518, 0.750, 1.146,",
				"\t1.417, 1.667, 1.862, 2.333,",
				"\t2.400, 2.500, 3.167, 3.767, ",
				"\t4.483",
				"];",
				"",
				"var words = [",
				"\t'WHAT', 'YOU', 'DON\\'T', 'KNOW',",
				"\t'WHAT', 'YOU', 'DON\\'T', 'KNOW',",
				"\t'DO', 'ANYTHING', 'BUT', 'UPSET',",
				"\t'YOU'",
				"];",
				"",
				"var cards = [];",
				"",
				"function start( progress ) {",
				"",
				"\treset( progress );",
				"",
				"}",
				"",
				"function end( progress ){",
				"",
				"\tresetCards();",
				"",
				"}",
				"",
				"function update( progress ) {",
				"",
				"\tvar analysis = manager.filters[ 'vocals' ];",
				"",
				"\tif ( analysis.playbackRate !== playbackRate ) {",
				"\t\treset( progress );",
				"\t}",
				"",
				"\tvar unitDuration = manager.unitDuration;",
				"\tvar maxIterations = Math.ceil( playbackRate );",
				"",
				"\tvar animationDuration = unitDuration * 2;",
				"\tvar duration = unitDuration / playbackRate;",
				"\tvar currentTime = progress * animationDuration;",
				"\tvar projectedTime = currentTime % duration;",
				"\tvar currentPct = projectedTime / duration;",
				"\tvar currentIteration = Math.floor( currentTime / duration );",
				"",
				"\tvar keyframe = keyframes[ index ] / unitDuration;",
				"",
				"\tvar ca = currentIteration < maxIterations;",
				"\tvar cb = currentIteration === iteration;",
				"\tvar cc = currentPct >= keyframe;",
				"",
				"\tif ( ca && cb && cc ) {",
				"\t\ttrigger( currentPct );",
				"\t}",
				"",
				"\tfor ( var i = 0; i < cards.length; i++ ) {",
				"",
				"\t\tvar card = cards[ i ];",
				"\t\tvar startPct = card.userData.startPct;",
				"\t\tvar t = 10 * ( currentPct - startPct );",
				"\t\tvar opacity = card.material.uniforms.opacity;",
				"",
				"\t\tif ( t < 1 ) {",
				"\t\t\topacity.value = 0.75 * ( 1 - t ) + 0.25;",
				"\t\t} else if ( opacity.value !== 0.25 ) {",
				"\t\t\topacity.value = 0.25;",
				"\t\t\tcards.splice( i, 1 );",
				"\t\t}",
				"",
				"\t}",
				"",
				"}",
				"",
				"function trigger( startPct ) {",
				"",
				"\tvar key = words[ index ];",
				"\tvar card = lyrics.userData.dictionary[ key ];",
				"",
				"\tif ( card ) {",
				"\t\tvar texture = card.material.uniforms.image.value;",
				"\t\tpolarSpheres.userData.setTexture( texture );",
				"\t\tcard.material.uniforms.opacity.value = 1;",
				"\t\tcard.userData.startPct = startPct;",
				"\t\tcards.push( card );",
				"\t}",
				"",
				"\tindex ++;",
				"\tif ( index >= keyframes.length ) {",
				"\t\tindex = 0;",
				"\t\titeration ++;",
				"\t}",
				"",
				"}",
				"",
				"function reset( progress ) {",
				"",
				"\tvar analysis = manager.filters[ 'vocals' ];",
				"\tvar unitDuration = manager.unitDuration;",
				"",
				"\tplaybackRate = analysis.playbackRate;",
				"",
				"\tvar animationDuration = unitDuration * 2;",
				"\tvar duration = unitDuration / playbackRate;",
				"\tvar currentTime = progress * animationDuration;",
				"\tvar projectedTime = currentTime % duration;",
				"\tvar currentPct = projectedTime / duration;",
				"",
				"\titeration = Math.floor( currentTime / duration );",
				"",
				"\tfor ( var i = 0; i < keyframes.length; i++ ) {",
				"\t\tindex = i;",
				"\t\tif ( keyframes[ i ] / unitDuration > currentPct ) {",
				"\t\t\tbreak;",
				"\t\t}",
				"\t}",
				"",
				"\tresetCards();",
				"",
				"}",
				"",
				"function resetCards() {",
				"",
				"\tfor ( var j = 0; j < cards.length; j++ ) {",
				"\t\tvar card = cards[ j ];",
				"\t\tcard.material.uniforms.opacity.value = 0.25;",
				"\t}",
				"",
				"\tcards.length = 0;",
				"",
				"}"
			]
		],
		[
			"What You Don't Know, What You Don't Know, Feel Like I Could Comfort You",
			[
				"var manager = resources.get( 'audio-manager' );",
				"var lyrics = resources.get( 'lyrics' );",
				"var polarSpheres = resources.get( 'polar-spheres' );",
				"",
				"var index = 0;",
				"var iteration = 0;",
				"",
				"var keyframes = [",
				"\t// Taken from Ableton Project",
				"\t0.149, 0.518, 0.750, 1.146,",
				"\t1.417, 1.667, 1.862, 2.333,",
				"\t2.500, 2.667, 2.833, 3.153,",
				"\t3.454, 3.759, 4.406",
				"];",
				"",
				"var words = [",
				"\t'WHAT', 'YOU', 'DON\\'T', 'KNOW',",
				"\t'WHAT', 'YOU', 'DON\\'T', 'KNOW',",
				"\t'FEEL', 'LIKE', 'I', 'COULD',",
				"\t'COMFORT', 'YOU'",
				"];",
				"",
				"var cards = [];",
				"",
				"function start( progress ) {",
				"",
				"\treset( progress );",
				"",
				"}",
				"",
				"function end( progress ){",
				"",
				"\tresetCards();",
				"",
				"}",
				"",
				"function update( progress ) {",
				"",
				"\tvar analysis = manager.filters[ 'vocals' ];",
				"",
				"\tif ( analysis.playbackRate !== playbackRate ) {",
				"\t\treset( progress );",
				"\t}",
				"",
				"\tvar unitDuration = manager.unitDuration;",
				"\tvar maxIterations = Math.ceil( playbackRate );",
				"",
				"\tvar animationDuration = unitDuration * 2;",
				"\tvar duration = unitDuration / playbackRate;",
				"\tvar currentTime = progress * animationDuration;",
				"\tvar projectedTime = currentTime % duration;",
				"\tvar currentPct = projectedTime / duration;",
				"\tvar currentIteration = Math.floor( currentTime / duration );",
				"",
				"\tvar keyframe = keyframes[ index ] / unitDuration;",
				"",
				"\tvar ca = currentIteration < maxIterations;",
				"\tvar cb = currentIteration === iteration;",
				"\tvar cc = currentPct >= keyframe;",
				"",
				"\tif ( ca && cb && cc ) {",
				"\t\ttrigger( currentPct );",
				"\t}",
				"",
				"\tfor ( var i = 0; i < cards.length; i++ ) {",
				"",
				"\t\tvar card = cards[ i ];",
				"\t\tvar startPct = card.userData.startPct;",
				"\t\tvar t = 10 * ( currentPct - startPct );",
				"\t\tvar opacity = card.material.uniforms.opacity;",
				"",
				"\t\tif ( t < 1 ) {",
				"\t\t\topacity.value = 0.75 * ( 1 - t ) + 0.25;",
				"\t\t} else if ( opacity.value !== 0.25 ) {",
				"\t\t\topacity.value = 0.25;",
				"\t\t\tcards.splice( i, 1 );",
				"\t\t}",
				"",
				"\t}",
				"",
				"}",
				"",
				"function trigger( startPct ) {",
				"",
				"\tvar key = words[ index ];",
				"\tvar card = lyrics.userData.dictionary[ key ];",
				"",
				"\tif ( card ) {",
				"\t\tvar texture = card.material.uniforms.image.value;",
				"\t\tpolarSpheres.userData.setTexture( texture );",
				"\t\tcard.material.uniforms.opacity.value = 1;",
				"\t\tcard.userData.startPct = startPct;",
				"\t\tcards.push( card );",
				"\t}",
				"",
				"\tindex ++;",
				"\tif ( index >= keyframes.length ) {",
				"\t\tindex = 0;",
				"\t\titeration ++;",
				"\t}",
				"",
				"}",
				"",
				"function reset( progress ) {",
				"",
				"\tvar analysis = manager.filters[ 'vocals' ];",
				"\tvar unitDuration = manager.unitDuration;",
				"",
				"\tplaybackRate = analysis.playbackRate;",
				"",
				"\tvar animationDuration = unitDuration * 2;",
				"\tvar duration = unitDuration / playbackRate;",
				"\tvar currentTime = progress * animationDuration;",
				"\tvar projectedTime = currentTime % duration;",
				"\tvar currentPct = projectedTime / duration;",
				"",
				"\titeration = Math.floor( currentTime / duration );",
				"",
				"\tfor ( var i = 0; i < keyframes.length; i++ ) {",
				"\t\tindex = i;",
				"\t\tif ( keyframes[ i ] / unitDuration > currentPct ) {",
				"\t\t\tbreak;",
				"\t\t}",
				"\t}",
				"",
				"\tresetCards();",
				"",
				"}",
				"",
				"function resetCards() {",
				"",
				"\tfor ( var j = 0; j < cards.length; j++ ) {",
				"\t\tvar card = cards[ j ];",
				"\t\tcard.material.uniforms.opacity.value = 0.25;",
				"\t}",
				"",
				"\tcards.length = 0;",
				"",
				"}"
			]
		],
		[
			"What You Don't Know, What You Don't Know, So Let Me Take You By Your Hands And Walk",
			[
				"var manager = resources.get( 'audio-manager' );",
				"var lyrics = resources.get( 'lyrics' );",
				"var polarSpheres = resources.get( 'polar-spheres' );",
				"",
				"var index = 0;",
				"var iteration = 0;",
				"",
				"var keyframes = [",
				"\t// Taken from Ableton Project",
				"\t0.149, 0.518, 0.750, 1.146,",
				"\t1.417, 1.667, 1.862, 2.333,",
				"\t2.345, 2.633, 2.833, 3.097,",
				"\t3.470, 3.781, 4.083, 4.333,",
				"\t4.583, 5.000",
				"];",
				"",
				"var words = [",
				"\t'WHAT', 'YOU', 'DON\\'T', 'KNOW',",
				"\t'WHAT', 'YOU', 'DON\\'T', 'KNOW',",
				"\t'SO', 'LET', 'ME', 'TAKE',",
				"\t'YOU', 'BY', 'YOUR', 'HAND',",
				"\t'AND', 'WALK'",
				"];",
				"",
				"var cards = [];",
				"",
				"function start( progress ) {",
				"",
				"\treset( progress );",
				"",
				"}",
				"",
				"function end( progress ){",
				"",
				"\tresetCards();",
				"",
				"}",
				"",
				"function update( progress ) {",
				"",
				"\tvar analysis = manager.filters[ 'vocals' ];",
				"",
				"\tif ( analysis.playbackRate !== playbackRate ) {",
				"\t\treset( progress );",
				"\t}",
				"",
				"\tvar unitDuration = manager.unitDuration;",
				"\tvar maxIterations = Math.ceil( playbackRate );",
				"",
				"\tvar animationDuration = unitDuration * 2;",
				"\tvar duration = unitDuration / playbackRate;",
				"\tvar currentTime = progress * animationDuration;",
				"\tvar projectedTime = currentTime % duration;",
				"\tvar currentPct = projectedTime / duration;",
				"\tvar currentIteration = Math.floor( currentTime / duration );",
				"",
				"\tvar keyframe = keyframes[ index ] / unitDuration;",
				"",
				"\tvar ca = currentIteration < maxIterations;",
				"\tvar cb = currentIteration === iteration;",
				"\tvar cc = currentPct >= keyframe;",
				"",
				"\tif ( ca && cb && cc ) {",
				"\t\ttrigger( currentPct );",
				"\t}",
				"",
				"\tfor ( var i = 0; i < cards.length; i++ ) {",
				"",
				"\t\tvar card = cards[ i ];",
				"\t\tvar startPct = card.userData.startPct;",
				"\t\tvar t = 10 * ( currentPct - startPct );",
				"\t\tvar opacity = card.material.uniforms.opacity;",
				"",
				"\t\tif ( t < 1 ) {",
				"\t\t\topacity.value = 0.75 * ( 1 - t ) + 0.25;",
				"\t\t} else if ( opacity.value !== 0.25 ) {",
				"\t\t\topacity.value = 0.25;",
				"\t\t\tcards.splice( i, 1 );",
				"\t\t}",
				"",
				"\t}",
				"",
				"}",
				"",
				"function trigger( startPct ) {",
				"",
				"\tvar key = words[ index ];",
				"\tvar card = lyrics.userData.dictionary[ key ];",
				"",
				"\tif ( card ) {",
				"\t\tvar texture = card.material.uniforms.image.value;",
				"\t\tpolarSpheres.userData.setTexture( texture );",
				"\t\tcard.material.uniforms.opacity.value = 1;",
				"\t\tcard.userData.startPct = startPct;",
				"\t\tcards.push( card );",
				"\t}",
				"",
				"\tindex ++;",
				"\tif ( index >= keyframes.length ) {",
				"\t\tindex = 0;",
				"\t\titeration ++;",
				"\t}",
				"",
				"}",
				"",
				"function reset( progress ) {",
				"",
				"\tvar analysis = manager.filters[ 'vocals' ];",
				"\tvar unitDuration = manager.unitDuration;",
				"",
				"\tplaybackRate = analysis.playbackRate;",
				"",
				"\tvar animationDuration = unitDuration * 2;",
				"\tvar duration = unitDuration / playbackRate;",
				"\tvar currentTime = progress * animationDuration;",
				"\tvar projectedTime = currentTime % duration;",
				"\tvar currentPct = projectedTime / duration;",
				"",
				"\titeration = Math.floor( currentTime / duration );",
				"",
				"\tfor ( var i = 0; i < keyframes.length; i++ ) {",
				"\t\tindex = i;",
				"\t\tif ( keyframes[ i ] / unitDuration > currentPct ) {",
				"\t\t\tbreak;",
				"\t\t}",
				"\t}",
				"",
				"\tresetCards();",
				"",
				"}",
				"",
				"function resetCards() {",
				"",
				"\tfor ( var j = 0; j < cards.length; j++ ) {",
				"\t\tvar card = cards[ j ];",
				"\t\tcard.material.uniforms.opacity.value = 0.25;",
				"\t}",
				"",
				"\tcards.length = 0;",
				"",
				"}"
			]
		],
		[
			"Clear Textures in Polar Spheres",
			[
				"var polarSpheres = resources.get( 'polar-spheres' );",
				"",
				"function start( progress ) {",
				"\tpolarSpheres.userData.setTexture( null );",
				"}",
				"",
				"function end( progress ){}",
				"",
				"function update( progress ){}"
			]
		],
		[
			"Set Polar Spheres WYDK Texture",
			[
				"var params = resources.get( 'params' );",
				"var polarSpheres = resources.get( 'polar-spheres' );",
				"var titleScreen = resources.get( 'title-screen' );",
				"var ring = resources.get( 'ring' );",
				"",
				"var loader = new THREE.TextureLoader();",
				"var texture = loader.load( params.rootPath + '/textures/wydk-title.png', resources.queue() );",
				"texture.flipY = true;",
				"",
				"var target = 0.5;",
				"var source = 0.5;",
				"",
				"function start( progress ) {",
				"",
				"\ttitleScreen.userData.setPlayer( player );",
				"\tpolarSpheres.userData.setTexture( texture );",
				"",
				"\tsource = ring.userData.texture.repeat.y;",
				"",
				"}",
				"",
				"function end( progress ){}",
				"",
				"function update( progress ) {",
				"\tvar t = TWEEN.Easing.Circular.Out( progress );",
				"\tring.userData.texture.repeat.y = t * ( target - source ) + source;",
				"}"
			]
		],
		[
			"Randomize Ring Texture Repeat",
			[
				"var ring = resources.get( 'ring' );",
				"var texture = ring.userData.texture;",
				"",
				"var source = 0.5;",
				"var target = 0.5;",
				"",
				"function start( progress ) {",
				"\tsource = texture.repeat.y;",
				"\ttarget = 11.5 * Math.random() + 0.5;",
				"\tring.material.transparent = Math.random() > 0.33;",
				"}",
				"",
				"function end( progress ){}",
				"",
				"function update( progress ) {",
				"\tvar t = TWEEN.Easing.Circular.Out( progress );",
				"\ttexture.repeat.y = t * ( target - source ) + source;",
				"}"
			]
		],
		[
			"Keyframe Ring Scale",
			[
				"var params = resources.get( 'params' );",
				"var manager = resources.get( 'audio-manager' );",
				"var ring = resources.get( 'ring' );",
				"",
				"var index = 0;",
				"var iteration = 0;",
				"",
				"var playbackRate = 1;",
				"var drag = params.drag / 8;",
				"var restingScale = 0.25;",
				"var track = 'machine-drum';",
				"",
				"var keyframes = [",
				"\t// Taken from Ableton Project",
				"\t// Machine Drum \"Up\" Beat",
				"\t0.000, 0.333,",
				"\t2.024, 2.172, 2.329,",
				"\t2.681, 3.011,",
				"\t4.680, 4.831, 5.006, 5.180, 5.332",
				"];",
				"function start( progress ) {",
				"\treset( progress );",
				"}",
				"",
				"function end( progress ) {",
				"}",
				"",
				"function update( progress ) {",
				"",
				"\tvar analysis = manager.filters[ track ];",
				"",
				"\tif ( analysis.playbackRate !== playbackRate ) {",
				"\t\treset( progress );",
				"\t}",
				"",
				"\tvar unitDuration = manager.unitDuration;",
				"\tvar maxIterations = Math.ceil( playbackRate );",
				"",
				"\tvar animationDuration = unitDuration * playbackRate;",
				"\tvar duration = unitDuration;",
				"\tvar currentTime = progress * animationDuration;",
				"\tvar projectedTime = currentTime % duration;",
				"\tvar currentPct = projectedTime / duration;",
				"\tvar currentIteration = Math.floor( currentTime / duration );",
				"",
				"\tvar keyframe = keyframes[ index ] / unitDuration;",
				"",
				"\tvar ca = currentIteration < maxIterations;",
				"\tvar cb = currentIteration === iteration;",
				"\tvar cc = currentPct >= keyframe;",
				"",
				"\tif ( ca && cb && cc ) {",
				"\t\ttrigger( currentPct );",
				"\t}",
				"",
				"\tvar spline = ring.userData.splines.scales;",
				"\tvar points = spline.points;",
				"",
				"\tfor ( var i = 0; i < points.length; i++ ) {",
				"",
				"\t\tvar v = points[ i ];",
				"\t\tvar d = restingScale - v.y;",
				"\t\tvar y;",
				"",
				"\t\tif ( d < 0 ) {",
				"\t\t\ty = v.y + d * drag;",
				"\t\t\tring.userData.setScale( i, y );",
				"\t\t} else if ( d !== 0 ) {",
				"\t\t\tring.userData.setScale( i, restingScale );",
				"\t\t}",
				"",
				"\t}",
				"",
				"}",
				"",
				"function trigger( startPct ) {",
				"",
				"\tvar spline = ring.userData.splines.scales;",
				"\tvar id = Math.floor( Math.random() * spline.points.length );",
				"\tvar nid = Math.floor(",
				"\t\t( id + spline.points.length / 2 ) % spline.points.length );",
				"\tvar scale = 1;",
				"",
				"\tring.userData.setScale( id, scale );",
				"\tring.userData.setScale( nid, scale );",
				"",
				"\tindex ++;",
				"\tif ( index >= keyframes.length - 1 ) {",
				"\t\tindex = 0;",
				"\t\titeration ++;",
				"\t}",
				"",
				"}",
				"",
				"function reset( progress ) {",
				"",
				"\tvar analysis = manager.filters[ track ];",
				"\tvar unitDuration = manager.unitDuration;",
				"",
				"\tplaybackRate = analysis.playbackRate;",
				"",
				"\tvar animationDuration = unitDuration;",
				"\tvar duration = unitDuration / playbackRate;",
				"\tvar currentTime = progress * animationDuration;",
				"\tvar projectedTime = currentTime % duration;",
				"\tvar currentPct = projectedTime / duration;",
				"",
				"\titeration = Math.floor( currentTime / duration );",
				"",
				"\tfor ( var i = 0; i < keyframes.length; i++ ) {",
				"\t\tindex = i;",
				"\t\tif ( keyframes[ i ] / unitDuration > currentPct ) {",
				"\t\t\tbreak;",
				"\t\t}",
				"\t}",
				"",
				"}"
			]
		],
		[
			"Reset Ring Scale",
			[
				"var ring = resources.get( 'ring' );",
				"var sources = [];",
				"var targets = [];",
				"",
				"function start( progress ) {",
				"",
				"\tvar spline = ring.userData.splines.scales;",
				"\tvar points = spline.points;",
				"",
				"\tfor ( var i = 0 ; i < points.length; i++ ) {",
				"\t\tsources[ i ] = points[ i ].y;",
				"\t\ttargets[ i ] = 0.5;",
				"\t}",
				"",
				"}",
				"",
				"function end( progress ){}",
				"",
				"function update( progress ) {",
				"",
				"\tvar t = TWEEN.Easing.Circular.Out( progress );",
				"\tvar spline = ring.userData.splines.scales;",
				"\tvar points = spline.points;",
				"",
				"\tfor ( var i = 0 ; i < points.length; i++ ) {",
				"\t\tvar source = sources[ i ];",
				"\t\tvar target = targets[ i ];",
				"\t\tvar y = t * ( target - source ) + source;",
				"\t\tring.userData.setScale( i, y );",
				"\t}",
				"",
				"}"
			]
		],
		[
			"Keyframe Ring Position",
			[
				"var params = resources.get( 'params' );",
				"var manager = resources.get( 'audio-manager' );",
				"var ring = resources.get( 'ring' );",
				"",
				"var index = 0;",
				"var iteration = 0;",
				"",
				"var phi = 1;",
				"var playbackRate = 1;",
				"var drag = params.drag / 8;",
				"var restingScale = 0.25;",
				"var track = 'machine-drum';",
				"",
				"var keyframes = [",
				"\t// Taken from Ableton Project",
				"\t// Machine Drum Down Beat",
				"\t0.000, 0.667, 1.335,",
				"\t2.000, 2.331, 2.667,",
				"\t3.332, 4.002, 4.665,",
				"\t4.999, 5.333",
				"];",
				"",
				"function start( progress ) {",
				"\treset( progress );",
				"}",
				"",
				"function end( progress ) {",
				"}",
				"",
				"function update( progress ) {",
				"",
				"\tvar analysis = manager.filters[ track ];",
				"",
				"\tif ( analysis.playbackRate !== playbackRate ) {",
				"\t\treset( progress );",
				"\t}",
				"",
				"\tvar unitDuration = manager.unitDuration;",
				"\tvar maxIterations = Math.ceil( playbackRate );",
				"",
				"\tvar animationDuration = unitDuration * playbackRate;",
				"\tvar duration = unitDuration;",
				"\tvar currentTime = progress * animationDuration;",
				"\tvar projectedTime = currentTime % duration;",
				"\tvar currentPct = projectedTime / duration;",
				"\tvar currentIteration = Math.floor( currentTime / duration );",
				"",
				"\tvar keyframePct = keyframes[ index ] / unitDuration;",
				"",
				"\tvar spline = ring.userData.splines.positions;",
				"\tvar points = spline.points;",
				"\tvar startPct = ( keyframes[ index - 1 ] || 0 ) / unitDuration;",
				"\tvar pct = ( currentPct - startPct ) / ( keyframePct - startPct );",
				"",
				"\tif ( pct > 1 ) {",
				"\t\tpct = 1;",
				"\t}",
				"",
				"\tvar amp = Math.sin( Math.PI * pct );",
				"",
				"\tvar radius = params.ring.amplitude * TWEEN.Easing.Circular.Out( amp );",
				"",
				"\tfor ( var i = 0; i < points.length; i++ ) {",
				"",
				"\t\tvar v = points[ i ];",
				"\t\tvar theta = phi * v.theta;",
				"\t\tvar y = radius * Math.sin( theta + params.ring.offset );",
				"",
				"\t\tring.userData.setPositionY( i, y );",
				"",
				"\t}",
				"",
				"\tvar ca = currentIteration < maxIterations;",
				"\tvar cb = currentIteration === iteration;",
				"\tvar cc = currentPct >= keyframePct;",
				"",
				"\tif ( ca && cb && cc ) {",
				"\t\ttrigger( currentPct );",
				"\t}",
				"",
				"}",
				"",
				"function trigger( startPct ) {",
				"",
				"\tphi = Math.floor( Math.random() * 5 + 2 ) * 2;",
				"",
				"\tif ( phi === 12 ) {",
				"\t\tphi = 14;",
				"\t}",
				"",
				"\tif ( Math.random() > 0.5 ) {",
				"\t\tphi *= - 1;",
				"\t}",
				"",
				"\tindex ++;",
				"\tif ( index >= keyframes.length - 1 ) {",
				"\t\tindex = 0;",
				"\t\titeration ++;",
				"\t}",
				"",
				"}",
				"",
				"function reset( progress ) {",
				"",
				"\tvar analysis = manager.filters[ track ];",
				"\tvar unitDuration = manager.unitDuration;",
				"",
				"\tplaybackRate = analysis.playbackRate;",
				"",
				"\tvar animationDuration = unitDuration;",
				"\tvar duration = unitDuration / playbackRate;",
				"\tvar currentTime = progress * animationDuration;",
				"\tvar projectedTime = currentTime % duration;",
				"\tvar currentPct = projectedTime / duration;",
				"",
				"\titeration = Math.floor( currentTime / duration );",
				"",
				"\tfor ( var i = 0; i < keyframes.length; i++ ) {",
				"\t\tindex = i;",
				"\t\tif ( keyframes[ i ] / unitDuration > currentPct ) {",
				"\t\t\tbreak;",
				"\t\t}",
				"\t}",
				"",
				"}"
			]
		],
		[
			"Ramp Up Ring Amplitude",
			[
				"var params = resources.get( 'params' );",
				"var source = 0;",
				"var target = 0.33;",
				"",
				"function start( progress ) {",
				"\tsource = params.ring.amplitude;",
				"}",
				"",
				"function end( progress ){}",
				"",
				"function update( progress ) {",
				"\tvar t = progress * progress;",
				"\tparams.ring.amplitude = t * ( target - source ) + source;",
				"}"
			]
		],
		[
			"Ramp Down Ring Amplitude",
			[
				"var params = resources.get( 'params' );",
				"var source = 0.33;",
				"var target = 0;",
				"",
				"function start( progress ) {",
				"\tsource = params.ring.amplitude;",
				"}",
				"",
				"function end( progress ){}",
				"",
				"function update( progress ) {",
				"\tvar t = progress * progress;",
				"\tparams.ring.amplitude = t * ( target - source ) + source;",
				"}"
			]
		],
		[
			"Keyframe Ring Offset",
			[
				"var params = resources.get( 'params' );",
				"var manager = resources.get( 'audio-manager' );",
				"",
				"var index = 0;",
				"var iteration = 0;",
				"",
				"var playbackRate = 1;",
				"var acceleration = 0;",
				"var drag = params.drag;",
				"",
				"var keyframes = [",
				"\t// Taken from Ableton Project",
				"\t0.330, 1.192, 1.850",
				"];",
				"function start( progress ) {",
				"\treset( progress );",
				"}",
				"",
				"function end( progress ) {",
				"}",
				"",
				"function update( progress ) {",
				"",
				"\tvar analysis = manager.filters[ 'melody' ];",
				"",
				"\tif ( analysis.playbackRate !== playbackRate ) {",
				"\t\treset( progress );",
				"\t}",
				"",
				"\tvar unitDuration = manager.unitDuration;",
				"\tvar maxIterations = Math.ceil( playbackRate );",
				"",
				"\tvar animationDuration = unitDuration;",
				"\tvar duration = unitDuration / playbackRate;",
				"\tvar currentTime = progress * animationDuration;",
				"\tvar projectedTime = currentTime % duration;",
				"\tvar currentPct = projectedTime / duration;",
				"\tvar currentIteration = Math.floor( currentTime / duration );",
				"",
				"\tvar keyframe = keyframes[ index ] / unitDuration;",
				"",
				"\tvar ca = currentIteration < maxIterations;",
				"\tvar cb = currentIteration === iteration;",
				"\tvar cc = currentPct >= keyframe;",
				"",
				"\tif ( ca && cb && cc ) {",
				"\t\ttrigger( currentPct );",
				"\t}",
				"",
				"\tparams.ring.offset += acceleration;",
				"\tacceleration += ( 0 - acceleration ) * drag;",
				"",
				"}",
				"",
				"function trigger( startPct ) {",
				"",
				"\tacceleration = Math.random() * 0.5 + 0.125;",
				"",
				"\tif ( Math.random() > 0.5 ) {",
				"\t\tacceleration *= - 1;",
				"\t}",
				"",
				"\tindex ++;",
				"\tif ( index >= keyframes.length - 1 ) {",
				"\t\tindex = 0;",
				"\t\titeration ++;",
				"\t}",
				"",
				"}",
				"",
				"function reset( progress ) {",
				"",
				"\tvar analysis = manager.filters[ 'melody' ];",
				"\tvar unitDuration = manager.unitDuration;",
				"",
				"\tplaybackRate = analysis.playbackRate;",
				"",
				"\tvar animationDuration = unitDuration * playbackRate;",
				"\tvar duration = unitDuration;",
				"\tvar currentTime = progress * animationDuration;",
				"\tvar projectedTime = currentTime % duration;",
				"\tvar currentPct = projectedTime / duration;",
				"",
				"\titeration = Math.floor( currentTime / duration );",
				"",
				"\tfor ( var i = 0; i < keyframes.length; i++ ) {",
				"\t\tindex = i;",
				"\t\tif ( keyframes[ i ] / unitDuration > currentPct ) {",
				"\t\t\tbreak;",
				"\t\t}",
				"\t}",
				"",
				"}"
			]
		],
		[
			"Swing Down Ring Amplitude",
			[
				"var params = resources.get( 'params' );",
				"var source;",
				"var target;",
				"",
				"function start( progress ) {",
				"\tsource = 0.33;",
				"\ttarget = 0.05;",
				"}",
				"",
				"function end( progress ){}",
				"",
				"function update( progress ) {",
				"\tvar t = Math.sin( Math.PI * progress );",
				"\tparams.ring.amplitude = t * ( target - source ) + source;",
				"}"
			]
		],
		[
			"Ramp Down Ring Scale",
			[
				"var ring = resources.get( 'ring' );",
				"var sources = [];",
				"var targets = [];",
				"",
				"function start( progress ) {",
				"",
				"\tvar spline = ring.userData.splines.scales;",
				"\tvar points = spline.points;",
				"",
				"\tfor ( var i = 0 ; i < points.length; i++ ) {",
				"\t\tsources[ i ] = points[ i ].y;",
				"\t\ttargets[ i ] = 0.08;",
				"\t}",
				"",
				"}",
				"",
				"function end( progress ){}",
				"",
				"function update( progress ) {",
				"",
				"\tvar t = TWEEN.Easing.Circular.Out( progress );",
				"\tvar spline = ring.userData.splines.scales;",
				"\tvar points = spline.points;",
				"",
				"\tfor ( var i = 0 ; i < points.length; i++ ) {",
				"\t\tvar source = sources[ i ];",
				"\t\tvar target = targets[ i ];",
				"\t\tvar y = t * ( target - source ) + source;",
				"\t\tring.userData.setScale( i, y );",
				"\t}",
				"",
				"}"
			]
		],
		[
			"Keyframe Polar Sphere Frequency",
			[
				"var params = resources.get( 'params' );",
				"var manager = resources.get( 'audio-manager' );",
				"var polarSpheres = resources.get( 'polar-spheres' );",
				"var TWO_PI = Math.PI * 2;",
				"",
				"var index = 0;",
				"var iteration = 0;",
				"",
				"var frequency = 1;",
				"var rotationTop = new THREE.Vector3();",
				"var rotationBot = new THREE.Vector3();",
				"",
				"var playbackRate = 1;",
				"var drag = params.drag / 8;",
				"var track = 'summation';",
				"",
				"var keyframes = [",
				"\t// Taken from Ableton Project",
				"\t// Summation",
				"\t0.993, 1.816, 2.668,",
				"\t3.668, 4.485, 5.333",
				"];",
				"",
				"function start( progress ) {",
				"\treset( progress );",
				"}",
				"",
				"function end( progress ) {",
				"}",
				"",
				"function update( progress ) {",
				"",
				"\tvar analysis = manager.filters[ track ];",
				"",
				"\tif ( analysis.playbackRate !== playbackRate ) {",
				"\t\treset( progress );",
				"\t}",
				"",
				"\tvar unitDuration = manager.unitDuration;",
				"\tvar maxIterations = Math.ceil( playbackRate );",
				"",
				"\tvar animationDuration = unitDuration * playbackRate;",
				"\tvar duration = unitDuration;",
				"\tvar currentTime = progress * animationDuration;",
				"\tvar projectedTime = currentTime % duration;",
				"\tvar currentPct = projectedTime / duration;",
				"\tvar currentIteration = Math.floor( currentTime / duration );",
				"",
				"\tvar keyframePct = keyframes[ index ] / unitDuration;",
				"\tvar startPct = ( keyframes[ index - 1 ] || 0 ) / unitDuration;",
				"\tvar pct = ( currentPct - startPct ) / ( keyframePct - startPct );",
				"",
				"\tif ( pct > 1 ) {",
				"\t\tpct = 1;",
				"\t}",
				"",
				"\tvar material = polarSpheres.userData.material;",
				"\tvar f = material.uniforms.frequency;",
				"\tf.value += ( frequency - f.value ) * drag;",
				"",
				"\tvar mesh = polarSpheres.userData.top;",
				"\tmesh.rotation.x += ( rotationTop.x - mesh.rotation.x ) * drag;",
				"\tmesh.rotation.y += ( rotationTop.y - mesh.rotation.y ) * drag;",
				"\tmesh.rotation.z += ( rotationTop.z - mesh.rotation.z ) * drag;",
				"",
				"\tif ( polarSpheres.userData.bottom ) {",
				"\t\tmesh = polarSpheres.userData.bottom;",
				"\t\tmesh.rotation.x += ( rotationTop.x - mesh.rotation.x ) * drag;",
				"\t\tmesh.rotation.y += ( rotationTop.y - mesh.rotation.y ) * drag;",
				"\t\tmesh.rotation.z += ( rotationTop.z - mesh.rotation.z ) * drag;",
				"\t}",
				"",
				"\tvar ca = currentIteration < maxIterations;",
				"\tvar cb = currentIteration === iteration;",
				"\tvar cc = currentPct >= keyframePct;",
				"",
				"\tif ( ca && cb && cc ) {",
				"\t\ttrigger( currentPct );",
				"\t}",
				"",
				"}",
				"",
				"function trigger( startPct ) {",
				"",
				"\tfrequency = Math.random() * Math.PI;",
				"",
				"\trotationTop.x = Math.random() * TWO_PI;",
				"\trotationTop.y = Math.random() * TWO_PI;",
				"\trotationTop.z = Math.random() * TWO_PI;",
				"",
				"\trotationBot.x = Math.random() * TWO_PI;",
				"\trotationBot.y = Math.random() * TWO_PI;",
				"\trotationBot.z = Math.random() * TWO_PI;",
				"",
				"\tif ( Math.random() > 0.5 ) {",
				"\t\tfrequency *= - 1;",
				"\t}",
				"",
				"\tindex ++;",
				"\tif ( index >= keyframes.length - 1 ) {",
				"\t\tindex = 0;",
				"\t\titeration ++;",
				"\t}",
				"",
				"}",
				"",
				"function reset( progress ) {",
				"",
				"\tvar analysis = manager.filters[ track ];",
				"\tvar unitDuration = manager.unitDuration;",
				"",
				"\tplaybackRate = analysis.playbackRate;",
				"",
				"\tvar animationDuration = unitDuration;",
				"\tvar duration = unitDuration / playbackRate;",
				"\tvar currentTime = progress * animationDuration;",
				"\tvar projectedTime = currentTime % duration;",
				"\tvar currentPct = projectedTime / duration;",
				"",
				"\titeration = Math.floor( currentTime / duration );",
				"",
				"\tfor ( var i = 0; i < keyframes.length; i++ ) {",
				"\t\tindex = i;",
				"\t\tif ( keyframes[ i ] / unitDuration > currentPct ) {",
				"\t\t\tbreak;",
				"\t\t}",
				"\t}",
				"",
				"}"
			]
		],
		[
			"Ring & Polar Sphere on the Fritz",
			[
				"var ring = resources.get( 'ring' );",
				"var polarSpheres = resources.get( 'polar-spheres' );",
				"var target = 0.5;",
				"var source = 0;",
				"",
				"function start( progress ){}",
				"",
				"function end( progress ) {",
				"\tring.visible = true;",
				"\tpolarSpheres.visible = true;",
				"}",
				"",
				"function update( progress ) {",
				"",
				"\tvar t = TWEEN.Easing.Circular.Out( progress );",
				"\tt = t * ( target - source ) + source;",
				"",
				"\tring.visible = Math.random() > t;",
				"\tpolarSpheres.visible = Math.random() > t;",
				"",
				"}"
			]
		],
		[
			"Randomize Position Y",
			[
				"var params = resources.get( 'params' );",
				"var ring = resources.get( 'ring' );",
				"",
				"function start( progress ){}",
				"",
				"function end( progress ){}",
				"",
				"function update( progress ){",
				"\tvar spline = ring.userData.splines.positions;",
				"\tvar points = spline.points;",
				"\tfor ( var i = 0; i < points.length; i++ ) {",
				"\t\tvar v = points[ i ];",
				"\t\tvar y = params.ring.amplitude * ( Math.random() - 0.5 );",
				"\t\tring.userData.setPositionY( i, y );",
				"\t}",
				"}"
			]
		],
		[
			"Update Ring Position Y Sans Changes",
			[
				"var params = resources.get( 'params' );",
				"var ring = resources.get( 'ring' );",
				"",
				"var drag = params.drag * 0.1;",
				"",
				"function start( progress ){}",
				"",
				"function end( progress ){}",
				"",
				"function update( progress ){",
				"\tvar spline = ring.userData.splines.positions;",
				"\tvar points = spline.points;",
				"\tfor ( var i = 0; i < points.length; i++ ) {",
				"\t\tvar v = points[ i ];",
				"\t\tvar y = v.y;",
				"\t\ty += ( 0 - v.y ) * drag;",
				"\t\tring.userData.setPositionY( i, y );",
				"\t}",
				"}"
			]
		],
		[
			"Trigger Boid to Beat",
			[
				"var params = resources.get( 'params' );",
				"var manager = resources.get( 'audio-manager' );",
				"var boids = resources.get( 'boids' );",
				"",
				"var index = 0;",
				"var iteration = 0;",
				"",
				"var playbackRate = 1;",
				"var drag = params.drag / 8;",
				"var track = 'blips';",
				"",
				"var keyframes = [",
				"\t// Taken from Ableton Project",
				"\t// Blips",
				"\t0.245, 0.577, 0.932,",
				"\t1.244, 1.451, 1.762,",
				"\t2.102, 2.448, 2.578,",
				"\t2.950, 3.245, 3.597,",
				"\t3.912, 4.250, 4.464,",
				"\t4.798, 5.096, 5.257",
				"];",
				"function start( progress ) {",
				"\treset( progress );",
				"}",
				"",
				"function end( progress ) {",
				"}",
				"",
				"function update( progress ) {",
				"",
				"\tvar analysis = manager.filters[ track ];",
				"",
				"\tif ( analysis.playbackRate !== playbackRate ) {",
				"\t\treset( progress );",
				"\t}",
				"",
				"\tvar unitDuration = manager.unitDuration;",
				"\tvar maxIterations = Math.ceil( playbackRate );",
				"",
				"\tvar animationDuration = unitDuration * playbackRate;",
				"\tvar duration = unitDuration;",
				"\tvar currentTime = progress * animationDuration;",
				"\tvar projectedTime = currentTime % duration;",
				"\tvar currentPct = projectedTime / duration;",
				"\tvar currentIteration = Math.floor( currentTime / duration );",
				"",
				"\tvar keyframe = keyframes[ index ] / unitDuration;",
				"",
				"\tvar ca = currentIteration < maxIterations;",
				"\tvar cb = currentIteration === iteration;",
				"\tvar cc = currentPct >= keyframe;",
				"",
				"\tif ( ca && cb && cc ) {",
				"\t\ttrigger( currentPct );",
				"\t}",
				"",
				"}",
				"",
				"function trigger( startPct ) {",
				"",
				"\tfor ( var i = 0; i < params.boids.amount; i++ ) {",
				"\t\tvar boid = boids.userData.next();",
				"\t\tboid.userData.start();",
				"\t}",
				"",
				"\tindex ++;",
				"\tif ( index >= keyframes.length - 1 ) {",
				"\t\tindex = 0;",
				"\t\titeration ++;",
				"\t}",
				"",
				"}",
				"",
				"function reset( progress ) {",
				"",
				"\tvar analysis = manager.filters[ track ];",
				"\tvar unitDuration = manager.unitDuration;",
				"",
				"\tplaybackRate = analysis.playbackRate;",
				"",
				"\tvar animationDuration = unitDuration;",
				"\tvar duration = unitDuration / playbackRate;",
				"\tvar currentTime = progress * animationDuration;",
				"\tvar projectedTime = currentTime % duration;",
				"\tvar currentPct = projectedTime / duration;",
				"",
				"\titeration = Math.floor( currentTime / duration );",
				"",
				"\tfor ( var i = 0; i < keyframes.length; i++ ) {",
				"\t\tindex = i;",
				"\t\tif ( keyframes[ i ] / unitDuration > currentPct ) {",
				"\t\t\tbreak;",
				"\t\t}",
				"\t}",
				"",
				"}"
			]
		],
		[
			"Crescendo Boids Amount",
			[
				"var params = resources.get( 'params' );",
				"",
				"function start( progress ){}",
				"",
				"function end( progress ) {",
				"}",
				"",
				"function update( progress ) {",
				"\tparams.boids.amount = Math.floor( 12 * progress * progress ) + 1;",
				"}"
			]
		],
		[
			"Keyframe Orbit Rotation",
			[
				"var params = resources.get( 'params' );",
				"var manager = resources.get( 'audio-manager' );",
				"var orbit = resources.get( 'orbit' );",
				"",
				"var TWO_PI = Math.PI * 2;",
				"var index = 0;",
				"var iteration = 0;",
				"var drag = params.drag;",
				"",
				"var target = new THREE.Vector3();",
				"var child;",
				"",
				"var playbackRate = 1;",
				"var track = 'instrumental';",
				"",
				"var keyframes = [",
				"\t// Taken from Ableton Project",
				"\t// Melody Whip",
				"\t1.500, 2.000, 3.900, 4.300",
				"];",
				"",
				"function start( progress ) {",
				"\treset( progress );",
				"}",
				"",
				"function end( progress ) {",
				"}",
				"",
				"function update( progress ) {",
				"",
				"\tvar analysis = manager.filters[ track ];",
				"",
				"\tif ( analysis.playbackRate !== playbackRate ) {",
				"\t\treset( progress );",
				"\t}",
				"",
				"\tvar unitDuration = manager.unitDuration;",
				"\tvar maxIterations = Math.ceil( playbackRate );",
				"",
				"\tvar animationDuration = unitDuration * playbackRate;",
				"\tvar duration = unitDuration;",
				"\tvar currentTime = progress * animationDuration;",
				"\tvar projectedTime = currentTime % duration;",
				"\tvar currentPct = projectedTime / duration;",
				"\tvar currentIteration = Math.floor( currentTime / duration );",
				"",
				"\tvar keyframePct = keyframes[ index ] / unitDuration;",
				"",
				"\tvar startPct = ( keyframes[ index - 1 ] || 0 ) / unitDuration;",
				"\tvar pct = ( currentPct - startPct ) / ( keyframePct - startPct );",
				"",
				"\tif ( pct > 1 ) {",
				"\t\tpct = 1;",
				"\t}",
				"",
				"\tif ( child ) {",
				"\t\tchild.rotation.x += ( target.x - child.rotation.x ) * drag;",
				"\t\tchild.rotation.y += ( target.y - child.rotation.y ) * drag;",
				"\t\tchild.rotation.z += ( target.z - child.rotation.z ) * drag;",
				"\t}",
				"",
				"\tvar ca = currentIteration < maxIterations;",
				"\tvar cb = currentIteration === iteration;",
				"\tvar cc = currentPct >= keyframePct;",
				"",
				"\tif ( ca && cb && cc ) {",
				"\t\ttrigger( currentPct );",
				"\t}",
				"",
				"}",
				"",
				"function trigger( startPct ) {",
				"",
				"\tvar id = Math.floor( Math.random() * orbit.children.length );",
				"",
				"\tchild = orbit.children[ id ];",
				"\ttarget.copy( child.rotation );",
				"",
				"\ttarget.x += ( Math.random() - 0.5 ) * Math.PI;",
				"\ttarget.y += ( Math.random() - 0.5 ) * Math.PI;",
				"\ttarget.z += ( Math.random() - 0.5 ) * Math.PI;",
				"",
				"\tindex ++;",
				"\tif ( index >= keyframes.length - 1 ) {",
				"\t\tindex = 0;",
				"\t\titeration ++;",
				"\t}",
				"",
				"}",
				"",
				"function reset( progress ) {",
				"",
				"\tvar analysis = manager.filters[ track ];",
				"\tvar unitDuration = manager.unitDuration;",
				"",
				"\tplaybackRate = analysis.playbackRate;",
				"",
				"\tvar animationDuration = unitDuration;",
				"\tvar duration = unitDuration / playbackRate;",
				"\tvar currentTime = progress * animationDuration;",
				"\tvar projectedTime = currentTime % duration;",
				"\tvar currentPct = projectedTime / duration;",
				"",
				"\titeration = Math.floor( currentTime / duration );",
				"",
				"\tfor ( var i = 0; i < keyframes.length; i++ ) {",
				"\t\tindex = i;",
				"\t\tif ( keyframes[ i ] / unitDuration > currentPct ) {",
				"\t\t\tbreak;",
				"\t\t}",
				"\t}",
				"",
				"}"
			]
		]
	],
	"animations": [
		[
			"Audio",
			0,
			175.98899999999998,
			0,
			0,
			true
		],
		[
			"",
			0,
			5.333,
			1,
			30,
			true
		],
		[
			"Main Titles",
			0,
			5.333,
			2,
			27,
			true
		],
		[
			"Backdrop Reveal",
			0,
			5,
			7,
			2,
			true
		],
		[
			"",
			0,
			1,
			8,
			4,
			true
		],
		[
			"Editor View",
			0,
			10,
			10,
			3,
			true
		],
		[
			"Video",
			0,
			175.98899999999998,
			13,
			1,
			true
		],
		[
			"",
			5.333,
			21.333,
			2,
			32,
			true
		],
		[
			"Machine Drum",
			5.333,
			10.666,
			3,
			31,
			true
		],
		[
			"Summation",
			5.333,
			10.667,
			5,
			37,
			true
		],
		[
			"Machine Drum",
			10.666,
			15.999,
			3,
			31,
			true
		],
		[
			"Summation",
			10.667,
			16.000999999999998,
			5,
			37,
			true
		],
		[
			"1.03 Lyrics",
			15.96875,
			26.667,
			6,
			5,
			true
		],
		[
			"Machine Drum",
			15.999,
			21.332,
			3,
			31,
			true
		],
		[
			"Summation",
			16.000999999999998,
			21.334999999999994,
			5,
			37,
			true
		],
		[
			"Machine Drum",
			21.332,
			26.665,
			3,
			31,
			true
		],
		[
			"1.04 Lyrics",
			21.332,
			32,
			7,
			6,
			true
		],
		[
			"",
			21.333,
			22.333,
			8,
			4,
			true
		],
		[
			"Summation",
			21.334999999999994,
			26.66899999999999,
			5,
			37,
			true
		],
		[
			"Machine Drum",
			26.665,
			31.997999999999998,
			3,
			31,
			true
		],
		[
			"1.05 Lyrics",
			26.666,
			37.332,
			6,
			7,
			true
		],
		[
			"Summation",
			26.66899999999999,
			32.002999999999986,
			5,
			37,
			true
		],
		[
			"Machine Drum",
			31.997999999999998,
			37.330999999999996,
			3,
			31,
			true
		],
		[
			"1.06 Lyrics",
			32,
			42.668,
			7,
			8,
			true
		],
		[
			"Summation",
			32.002999999999986,
			37.33699999999998,
			5,
			37,
			true
		],
		[
			"Machine Drum",
			37.330999999999996,
			42.663999999999994,
			3,
			31,
			true
		],
		[
			"1.07 Lyrics",
			37.332,
			47.998000000000005,
			6,
			9,
			true
		],
		[
			"Summation",
			37.33699999999998,
			42.67099999999998,
			5,
			37,
			true
		],
		[
			"Melody",
			42.57,
			47.9,
			12,
			43,
			true
		],
		[
			"Machine Drum",
			42.574725879770355,
			47.90472587977035,
			1,
			29,
			true
		],
		[
			"Machine Drum",
			42.663999999999994,
			47.99699999999999,
			3,
			31,
			true
		],
		[
			"",
			42.667,
			43.667,
			8,
			4,
			true
		],
		[
			"1.08 Lyrics",
			42.668,
			53.336,
			7,
			9,
			true
		],
		[
			"Summation",
			42.67099999999998,
			48.004999999999974,
			5,
			37,
			true
		],
		[
			"",
			47.9,
			74.62,
			1,
			36,
			true
		],
		[
			"Machine Drum",
			47.99699999999999,
			53.32999999999999,
			3,
			31,
			true
		],
		[
			"2.01 Lyrics",
			48,
			58.666,
			6,
			10,
			true
		],
		[
			"Summation",
			48.004999999999974,
			53.33899999999997,
			5,
			37,
			true
		],
		[
			"Machine Drum",
			53.32999999999999,
			58.66299999999999,
			3,
			31,
			true
		],
		[
			"2.02 Lyrics",
			53.336,
			64.00399999999999,
			7,
			11,
			true
		],
		[
			"Summation",
			53.33899999999997,
			58.672999999999966,
			5,
			37,
			true
		],
		[
			"Machine Drum",
			58.66299999999999,
			63.99599999999999,
			3,
			31,
			true
		],
		[
			"2.03 Lyrics",
			58.666,
			69.332,
			6,
			12,
			true
		],
		[
			"Summation",
			58.672999999999966,
			64.00699999999996,
			5,
			37,
			true
		],
		[
			"Machine Drum",
			63.99599999999999,
			69.32899999999998,
			3,
			31,
			true
		],
		[
			"2.04A Lyrics",
			64.00399999999999,
			74.666,
			7,
			13,
			true
		],
		[
			"Summation",
			64.00699999999996,
			69.34099999999995,
			5,
			37,
			true
		],
		[
			"Machine Drum",
			69.32899999999998,
			74.66199999999998,
			3,
			31,
			true
		],
		[
			"2.04B Lyrics",
			69.3320000000001,
			79.99800000000008,
			6,
			14,
			true
		],
		[
			"Summation",
			69.34099999999995,
			74.67499999999994,
			5,
			37,
			true
		],
		[
			"Oh",
			72.5,
			74,
			2,
			28,
			true
		],
		[
			"Oh",
			74,
			75.5,
			2,
			28,
			true
		],
		[
			"Machine Drum",
			74.62,
			79.95000000000002,
			1,
			29,
			true
		],
		[
			"Blips",
			74.66,
			79.99,
			9,
			41,
			true
		],
		[
			"",
			74.66,
			154.57,
			11,
			42,
			true
		],
		[
			"Melody",
			74.66,
			79.99,
			12,
			43,
			true
		],
		[
			"Machine Drum",
			74.66199999999998,
			79.99499999999998,
			3,
			31,
			true
		],
		[
			"3.01 Lyrics",
			74.666,
			85.328,
			7,
			15,
			true
		],
		[
			"",
			74.667,
			75.67,
			8,
			4,
			true
		],
		[
			"Summation",
			74.67499999999994,
			80.00899999999993,
			5,
			37,
			true
		],
		[
			"Melody",
			77.25,
			82.583,
			4,
			34,
			true
		],
		[
			"Oh",
			78,
			79.25,
			2,
			28,
			true
		],
		[
			"Oh",
			79.25,
			80.5,
			2,
			28,
			true
		],
		[
			"Machine Drum",
			79.95000000000002,
			85.28000000000003,
			1,
			29,
			true
		],
		[
			"Blips",
			79.99,
			85.32,
			9,
			41,
			true
		],
		[
			"Melody",
			79.99,
			85.32,
			12,
			43,
			true
		],
		[
			"Machine Drum",
			79.99499999999998,
			85.32799999999997,
			3,
			31,
			true
		],
		[
			"3.02 Lyrics",
			79.99800000000008,
			90.66400000000006,
			6,
			16,
			true
		],
		[
			"Summation",
			80.00899999999993,
			85.34299999999992,
			5,
			37,
			true
		],
		[
			"Oh",
			80.5,
			81.75,
			2,
			28,
			true
		],
		[
			"Oh",
			81.75,
			83,
			2,
			28,
			true
		],
		[
			"Melody",
			82.583,
			87.916,
			4,
			34,
			true
		],
		[
			"Oh",
			83,
			84.25,
			2,
			28,
			true
		],
		[
			"Oh",
			84.25,
			85.5,
			2,
			28,
			true
		],
		[
			"",
			85.28,
			127.99,
			10,
			35,
			true
		],
		[
			"Machine Drum",
			85.28000000000003,
			90.61000000000004,
			1,
			29,
			true
		],
		[
			"Blips",
			85.32,
			90.64999999999999,
			9,
			41,
			true
		],
		[
			"Melody",
			85.32,
			90.64999999999999,
			12,
			43,
			true
		],
		[
			"Machine Drum",
			85.32799999999997,
			90.66099999999997,
			3,
			31,
			true
		],
		[
			"3.03 Lyrics",
			85.328,
			95.99000000000001,
			7,
			15,
			true
		],
		[
			"Summation",
			85.34299999999992,
			90.67699999999991,
			5,
			37,
			true
		],
		[
			"Melody",
			87.916,
			93.249,
			4,
			34,
			true
		],
		[
			"Oh",
			88.5,
			89.75,
			2,
			28,
			true
		],
		[
			"Machine Drum",
			90.61000000000004,
			95.94000000000005,
			1,
			29,
			true
		],
		[
			"Blips",
			90.64999999999999,
			95.97999999999999,
			9,
			41,
			true
		],
		[
			"Melody",
			90.64999999999999,
			95.97999999999999,
			12,
			43,
			true
		],
		[
			"Machine Drum",
			90.66099999999997,
			95.99399999999997,
			3,
			31,
			true
		],
		[
			"3.04 Lyrics",
			90.66400000000006,
			101.33000000000004,
			6,
			17,
			true
		],
		[
			"Summation",
			90.67699999999991,
			96.0109999999999,
			5,
			37,
			true
		],
		[
			"Oh",
			91,
			92.25,
			2,
			28,
			true
		],
		[
			"Melody",
			93.249,
			98.582,
			4,
			34,
			true
		],
		[
			"Oh",
			93.75,
			95,
			2,
			28,
			true
		],
		[
			"Machine Drum",
			95.94000000000005,
			101.27000000000007,
			1,
			29,
			true
		],
		[
			"Blips",
			95.97999999999999,
			101.30999999999999,
			9,
			41,
			true
		],
		[
			"Melody",
			95.97999999999999,
			101.30999999999999,
			12,
			43,
			true
		],
		[
			"3.05  Lyrics",
			95.99000000000001,
			106.65200000000002,
			7,
			15,
			true
		],
		[
			"Machine Drum",
			95.99399999999997,
			101.32699999999997,
			3,
			31,
			true
		],
		[
			"Summation",
			96.0109999999999,
			101.34499999999989,
			5,
			37,
			true
		],
		[
			"Melody",
			98.582,
			103.91499999999999,
			4,
			34,
			true
		],
		[
			"Oh",
			99,
			100.25,
			2,
			28,
			true
		],
		[
			"Machine Drum",
			101.27000000000007,
			106.60000000000008,
			1,
			29,
			true
		],
		[
			"Blips",
			101.30999999999999,
			106.63999999999999,
			9,
			41,
			true
		],
		[
			"Melody",
			101.30999999999999,
			106.63999999999999,
			12,
			43,
			true
		],
		[
			"Machine Drum",
			101.32699999999997,
			106.65999999999997,
			3,
			31,
			true
		],
		[
			"4.01 Lyrics",
			101.33000000000004,
			111.99600000000002,
			6,
			17,
			true
		],
		[
			"Summation",
			101.34499999999989,
			106.67899999999987,
			5,
			37,
			true
		],
		[
			"Oh",
			102,
			103.25,
			2,
			28,
			true
		],
		[
			"Melody",
			103.91499999999999,
			109.24799999999999,
			4,
			34,
			true
		],
		[
			"Oh",
			104.5,
			105.75,
			2,
			28,
			true
		],
		[
			"Machine Drum",
			106.60000000000008,
			111.93000000000009,
			1,
			29,
			true
		],
		[
			"Blips",
			106.63999999999999,
			111.96999999999998,
			9,
			41,
			true
		],
		[
			"Melody",
			106.63999999999999,
			111.96999999999998,
			12,
			43,
			true
		],
		[
			"4.02  Lyrics",
			106.65200000000002,
			117.31400000000002,
			7,
			18,
			true
		],
		[
			"Machine Drum",
			106.65999999999997,
			111.99299999999997,
			3,
			31,
			true
		],
		[
			"Summation",
			106.67899999999987,
			112.01299999999986,
			5,
			37,
			true
		],
		[
			"Oh",
			107,
			108.25,
			2,
			28,
			true
		],
		[
			"Melody",
			109.24799999999999,
			114.58099999999999,
			4,
			34,
			true
		],
		[
			"",
			109.333,
			110.333,
			8,
			4,
			true
		],
		[
			"Oh",
			110,
			111.25,
			2,
			28,
			true
		],
		[
			"Oh",
			111.25,
			112.5,
			2,
			28,
			true
		],
		[
			"Machine Drum",
			111.93000000000009,
			117.2600000000001,
			1,
			29,
			true
		],
		[
			"Blips",
			111.96999999999998,
			117.29999999999998,
			9,
			41,
			true
		],
		[
			"Melody",
			111.96999999999998,
			117.29999999999998,
			12,
			43,
			true
		],
		[
			"Machine Drum",
			111.99299999999997,
			117.32599999999996,
			3,
			31,
			true
		],
		[
			"4.03 Lyrics",
			111.99600000000002,
			122.662,
			6,
			19,
			true
		],
		[
			"Summation",
			112.01299999999986,
			117.34699999999985,
			5,
			37,
			true
		],
		[
			"Oh",
			112.5,
			113.75,
			2,
			28,
			true
		],
		[
			"Oh",
			113.75,
			115,
			2,
			28,
			true
		],
		[
			"Melody",
			114.58099999999999,
			119.91399999999999,
			4,
			34,
			true
		],
		[
			"Oh",
			115,
			116.25,
			2,
			28,
			true
		],
		[
			"Oh",
			116.25,
			117.5,
			2,
			28,
			true
		],
		[
			"Machine Drum",
			117.2600000000001,
			122.59000000000012,
			1,
			29,
			true
		],
		[
			"Blips",
			117.29999999999998,
			122.62999999999998,
			9,
			41,
			true
		],
		[
			"Melody",
			117.29999999999998,
			122.62999999999998,
			12,
			43,
			true
		],
		[
			"4.04  Lyrics",
			117.31400000000002,
			127.97600000000003,
			7,
			20,
			true
		],
		[
			"Machine Drum",
			117.32599999999996,
			122.65899999999996,
			3,
			31,
			true
		],
		[
			"Summation",
			117.34699999999985,
			122.68099999999984,
			5,
			37,
			true
		],
		[
			"Melody",
			119.91399999999999,
			125.24699999999999,
			4,
			34,
			true
		],
		[
			"Machine Drum",
			122.59000000000012,
			127.92000000000013,
			1,
			29,
			true
		],
		[
			"Blips",
			122.62999999999998,
			127.95999999999998,
			9,
			41,
			true
		],
		[
			"Melody",
			122.62999999999998,
			127.95999999999998,
			12,
			43,
			true
		],
		[
			"Machine Drum",
			122.65899999999996,
			127.99199999999996,
			3,
			31,
			true
		],
		[
			"4.05 Lyrics",
			122.662,
			133.32799999999997,
			6,
			21,
			true
		],
		[
			"Summation",
			122.68099999999984,
			128.01499999999982,
			5,
			37,
			true
		],
		[
			"Oh",
			123.28483981965505,
			124.53483981965505,
			2,
			28,
			true
		],
		[
			"Oh",
			124.53483981965505,
			125.78483981965505,
			2,
			28,
			true
		],
		[
			"Melody",
			125.24699999999999,
			130.57999999999998,
			4,
			34,
			true
		],
		[
			"Oh",
			125.78483981965505,
			127.03483981965505,
			2,
			28,
			true
		],
		[
			"Oh",
			127.03483981965505,
			128.28483981965505,
			2,
			28,
			true
		],
		[
			"Machine Drum",
			127.92000000000013,
			133.25000000000014,
			1,
			29,
			true
		],
		[
			"Blips",
			127.95999999999998,
			133.28999999999996,
			9,
			41,
			true
		],
		[
			"Melody",
			127.95999999999998,
			133.28999999999996,
			12,
			43,
			true
		],
		[
			"5.01  Lyrics",
			127.97600000000003,
			138.63800000000003,
			7,
			22,
			true
		],
		[
			"",
			127.98,
			128.98,
			8,
			4,
			true
		],
		[
			"Machine Drum",
			127.99199999999996,
			133.32499999999996,
			3,
			31,
			true
		],
		[
			"Summation",
			128.01499999999982,
			133.3489999999998,
			5,
			37,
			true
		],
		[
			"Oh",
			128.5,
			129.75,
			2,
			28,
			true
		],
		[
			"Oh",
			129.75,
			131,
			2,
			28,
			true
		],
		[
			"Melody",
			130.57999999999998,
			135.91299999999998,
			4,
			34,
			true
		],
		[
			"Oh",
			131,
			132.25,
			2,
			28,
			true
		],
		[
			"Oh",
			132.25,
			133.5,
			2,
			28,
			true
		],
		[
			"Machine Drum",
			133.25000000000014,
			138.58000000000015,
			1,
			29,
			true
		],
		[
			"Blips",
			133.28999999999996,
			138.61999999999995,
			9,
			41,
			true
		],
		[
			"Melody",
			133.28999999999996,
			138.61999999999995,
			12,
			43,
			true
		],
		[
			"Machine Drum",
			133.32499999999996,
			138.65799999999996,
			3,
			31,
			true
		],
		[
			"5.02 Lyrics",
			133.32799999999997,
			143.99399999999994,
			6,
			23,
			true
		],
		[
			"Summation",
			133.3489999999998,
			138.68299999999977,
			5,
			37,
			true
		],
		[
			"Oh",
			133.844121082704,
			135.094121082704,
			2,
			28,
			true
		],
		[
			"Oh",
			135.25,
			136.5,
			2,
			28,
			true
		],
		[
			"Melody",
			135.91299999999998,
			141.24599999999998,
			4,
			34,
			true
		],
		[
			"Oh",
			136.5,
			137.75,
			2,
			28,
			true
		],
		[
			"Oh",
			137.75,
			139,
			2,
			28,
			true
		],
		[
			"Machine Drum",
			138.58000000000015,
			143.91000000000017,
			1,
			29,
			true
		],
		[
			"Blips",
			138.61999999999995,
			143.94999999999993,
			9,
			41,
			true
		],
		[
			"Melody",
			138.61999999999995,
			143.94999999999993,
			12,
			43,
			true
		],
		[
			"5.03  Lyrics",
			138.63800000000003,
			149.30000000000004,
			7,
			24,
			true
		],
		[
			"Machine Drum",
			138.65799999999996,
			143.99099999999996,
			3,
			31,
			true
		],
		[
			"Summation",
			138.68299999999977,
			144.01699999999974,
			5,
			37,
			true
		],
		[
			"Oh",
			139.25,
			140.5,
			2,
			28,
			true
		],
		[
			"Oh",
			140.5,
			141.75,
			2,
			28,
			true
		],
		[
			"Melody",
			141.24599999999998,
			146.57899999999998,
			4,
			34,
			true
		],
		[
			"Oh",
			141.75,
			143,
			2,
			28,
			true
		],
		[
			"Oh",
			143,
			144.25,
			2,
			28,
			true
		],
		[
			"Machine Drum",
			143.91000000000017,
			149.24000000000018,
			1,
			29,
			true
		],
		[
			"Blips",
			143.94999999999993,
			149.27999999999992,
			9,
			41,
			true
		],
		[
			"Melody",
			143.94999999999993,
			149.27999999999992,
			12,
			43,
			true
		],
		[
			"Machine Drum",
			143.99099999999996,
			149.32399999999996,
			3,
			31,
			true
		],
		[
			"5.04A Lyrics",
			143.99399999999994,
			154.6599999999999,
			6,
			25,
			true
		],
		[
			"Summation",
			144.01699999999974,
			149.35099999999971,
			5,
			37,
			true
		],
		[
			"Oh",
			144.5,
			145.75,
			2,
			28,
			true
		],
		[
			"Melody",
			146.57899999999998,
			151.91199999999998,
			4,
			34,
			true
		],
		[
			"Oh",
			147,
			148.25,
			2,
			28,
			true
		],
		[
			"Machine Drum",
			149.24000000000018,
			154.5700000000002,
			1,
			29,
			true
		],
		[
			"Blips",
			149.27999999999992,
			154.6099999999999,
			9,
			41,
			true
		],
		[
			"Melody",
			149.27999999999992,
			154.6099999999999,
			12,
			43,
			true
		],
		[
			"5.04B  Lyrics",
			149.30000000000004,
			159.96200000000005,
			7,
			14,
			true
		],
		[
			"Machine Drum",
			149.32399999999996,
			154.65699999999995,
			3,
			31,
			true
		],
		[
			"Summation",
			149.35099999999971,
			154.6849999999997,
			5,
			37,
			true
		],
		[
			"Oh",
			149.5,
			150.75,
			2,
			28,
			true
		],
		[
			"Oh",
			151,
			152.25,
			2,
			28,
			true
		],
		[
			"Melody",
			151.91199999999998,
			157.24499999999998,
			4,
			34,
			true
		],
		[
			"Oh",
			152.25,
			153.5,
			2,
			28,
			true
		],
		[
			"Oh",
			153.5,
			154.75,
			2,
			28,
			true
		],
		[
			"Machine Drum",
			154.57,
			159.9,
			3,
			39,
			true
		],
		[
			"",
			154.57,
			155.57,
			8,
			4,
			true
		],
		[
			"Machine Drum",
			154.5700000000002,
			159.9000000000002,
			1,
			29,
			true
		],
		[
			"Blips",
			154.6099999999999,
			159.93999999999988,
			9,
			41,
			true
		],
		[
			"Melody",
			154.6099999999999,
			159.93999999999988,
			12,
			43,
			true
		],
		[
			"Summation",
			154.6849999999997,
			160.01899999999966,
			5,
			37,
			true
		],
		[
			"Oh",
			155,
			156.25,
			2,
			28,
			true
		],
		[
			"Oh",
			156.5,
			157.75,
			2,
			28,
			true
		],
		[
			"Oh",
			157.75,
			159,
			2,
			28,
			true
		],
		[
			"Oh",
			159,
			160.25,
			2,
			28,
			true
		],
		[
			"Machine Drum",
			159.9,
			165.23000000000002,
			3,
			39,
			true
		],
		[
			"Machine Drum",
			159.9000000000002,
			165.23000000000022,
			1,
			29,
			true
		],
		[
			"Blips",
			159.93999999999988,
			165.26999999999987,
			9,
			41,
			true
		],
		[
			"Melody",
			159.93999999999988,
			165.26999999999987,
			12,
			43,
			true
		],
		[
			"",
			159.96,
			162.14598453251023,
			6,
			26,
			true
		],
		[
			"Summation",
			160.01899999999966,
			165.35299999999964,
			5,
			37,
			true
		],
		[
			"",
			165.23,
			175.999,
			1,
			33,
			true
		],
		[
			"Outro",
			165.23,
			176,
			2,
			38,
			true
		],
		[
			"Machine Drum",
			165.23000000000002,
			176,
			3,
			40,
			true
		],
		[
			"Blips",
			165.26999999999987,
			170.59999999999985,
			9,
			41,
			true
		],
		[
			"Summation",
			165.35299999999964,
			170.6869999999996,
			5,
			37,
			true
		],
		[
			"Blips",
			170.59999999999985,
			175.92999999999984,
			9,
			41,
			true
		],
		[
			"Summation",
			170.6869999999996,
			176.0209999999996,
			5,
			37,
			true
		]
	]
}
