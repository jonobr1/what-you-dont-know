{
	"config": {},
	"libraries": [
		"../release/third-party/WebAudio.js",
		"../release/third-party/three.js",
		"../release/third-party/two.js",
		"../release/third-party/vr-controller.js",
		"../release/third-party/WebVR.js",
		"../release/third-party/tween.js",
		"../release/src/interaction.js"
	],
	"includes": [
		[
			"AudioManager",
			[
				"var tracks = {",
				"\t'vocals': [],",
				"\t'vocals-a': [],",
				"\t'vocals-b': [],",
				"\t'vocals-c': [],",
				"\t'vocals-d': [],",
				"\t'vocals-e': [],",
				"\t'machine-drum-a': [],",
				"\t'machine-drum-b': [],",
				"\t'instrumental': [],",
				"\t'melody': [],",
				"\t'blips': [],",
				"\t'sub-tone': [],",
				"\t'sfx': [],",
				"\t'summation': []",
				"};",
				"",
				"// Simple flat array of every WebAudio object",
				"// for quick and easy access.",
				"var sounds = [];",
				"var sources = [];",
				"",
				"/**",
				" * An array describing what audio clips exist for",
				" * each track at every section of the \"song\".",
				" * `true` means there is a clip available and its",
				" * filename corresponds to its position within the object.",
				" * Finally, a `String` represents a corresponding",
				" * clip from a different section of the song. This is",
				" * used to select the specific clip.",
				" */",
				"var sequence = [",
				"",
				"\t{",
				"\t\tid: '1.01',",
				"\t\tname: 'intro',",
				"\t\ttracks: {",
				"\t\t\t'machine-drum-a': true,",
				"\t\t\t'melody': true,",
				"\t\t},",
				"\t\tduration: 2",
				"\t},",
				"\t{",
				"\t\tid: '1.02',",
				"\t\tname: 'intro',",
				"\t\ttracks: {",
				"\t\t\t'machine-drum-a': 'intro',",
				"\t\t\t'melody': 'intro',",
				"\t\t\t'sfx': true,",
				"\t\t\t'summation': true",
				"\t\t},",
				"\t\tduration: 2",
				"\t},",
				"",
				"\t//",
				"",
				"\t{",
				"\t\tid: '1.03',",
				"\t\tname: 'verse-1',",
				"\t\ttracks: {",
				"\t\t\t'vocals-a': { loop: false },",
				"\t\t\t'machine-drum-a': 'intro',",
				"\t\t\t'melody': 'intro',",
				"\t\t\t'summation': 'intro'",
				"\t\t},",
				"\t\tduration: 1",
				"\t},",
				"\t{",
				"\t\tid: '1.04',",
				"\t\tname: 'verse-1',",
				"\t\ttracks: {",
				"\t\t\t'vocals-b': { loop: false },",
				"\t\t\t'machine-drum-a': 'intro',",
				"\t\t\t'melody': 'intro',",
				"\t\t\t'summation': 'intro'",
				"\t\t},",
				"\t\tduration: 1",
				"\t},",
				"\t{",
				"\t\tid: '1.05',",
				"\t\tname: 'verse-1',",
				"\t\ttracks: {",
				"\t\t\t'vocals-c': { loop: false },",
				"\t\t\t'machine-drum-a': 'intro',",
				"\t\t\t'melody': 'intro',",
				"\t\t\t'summation': 'intro'",
				"\t\t},",
				"\t\tduration: 1",
				"\t},",
				"\t{",
				"\t\tid: '1.06',",
				"\t\tname: 'verse-1',",
				"\t\ttracks: {",
				"\t\t\t'vocals-d': { loop: false },",
				"\t\t\t'machine-drum-a': 'intro',",
				"\t\t\t'melody': 'intro',",
				"\t\t\t'summation': 'intro'",
				"\t\t},",
				"\t\tduration: 1",
				"\t},",
				"\t{",
				"\t\tid: '1.07',",
				"\t\tname: 'verse-1',",
				"\t\ttracks: {",
				"\t\t\t'vocals-e': { loop: false },",
				"\t\t\t'machine-drum-a': 'intro',",
				"\t\t\t'melody': 'intro',",
				"\t\t\t'summation': 'intro'",
				"\t\t},",
				"\t\tduration: 1",
				"\t},",
				"\t{",
				"\t\tid: '1.08',",
				"\t\tname: 'verse-1',",
				"\t\ttracks: {",
				"\t\t\t'vocals-e': 'verse-1',",
				"\t\t\t'machine-drum-a': true,",
				"\t\t\t'instrumental': true,",
				"\t\t\t'melody': true,",
				"\t\t\t'sub-tone': true,",
				"\t\t\t'summation': true",
				"\t\t},",
				"\t\tduration: 1",
				"\t},",
				"",
				"\t//",
				"",
				"\t{",
				"\t\tid: '2.01',",
				"\t\tname: 'verse-2',",
				"\t\ttracks: {",
				"\t\t\t'vocals-a': { loop: false },",
				"\t\t\t'machine-drum-a': true,",
				"\t\t\t'instrumental': true,",
				"\t\t\t'melody': true,",
				"\t\t\t'sub-tone': true,",
				"\t\t\t'summation': true",
				"\t\t},",
				"\t\tduration: 1",
				"\t},",
				"\t{",
				"\t\tid: '2.02',",
				"\t\tname: 'verse-2',",
				"\t\ttracks: {",
				"\t\t\t'vocals-b': { loop: false },",
				"\t\t\t'machine-drum-a': 'verse-2',",
				"\t\t\t'instrumental': 'verse-2',",
				"\t\t\t'melody': 'verse-2',",
				"\t\t\t'sub-tone': 'verse-2',",
				"\t\t\t'summation': 'verse-2'",
				"\t\t},",
				"\t\tduration: 1",
				"\t},",
				"\t{",
				"\t\tid: '2.03',",
				"\t\tname: 'verse-2',",
				"\t\ttracks: {",
				"\t\t\t'vocals-c': { loop: false },",
				"\t\t\t'machine-drum-a': 'verse-2',",
				"\t\t\t'instrumental': 'verse-2',",
				"\t\t\t'melody': 'verse-2',",
				"\t\t\t'sub-tone': 'verse-2',",
				"\t\t\t'summation': 'verse-2'",
				"\t\t},",
				"\t\tduration: 1",
				"\t},",
				"\t{",
				"\t\tid: '2.04',",
				"\t\tname: 'verse-2',",
				"\t\ttracks: {",
				"\t\t\t'vocals-d': { loop: false },",
				"\t\t\t'machine-drum-a': 'verse-2',",
				"\t\t\t'instrumental': 'verse-2',",
				"\t\t\t'melody': 'verse-2',",
				"\t\t\t'sub-tone': 'verse-2',",
				"\t\t\t'summation': 'verse-2'",
				"\t\t},",
				"\t\tduration: 2",
				"\t},",
				"\t",
				"\t//",
				"\t",
				"\t{",
				"\t\tid: '3.01',",
				"\t\tname: 'chorus',",
				"\t\ttracks: {",
				"\t\t\t'vocals-a': { loop: false },",
				"\t\t\t'machine-drum-a': true,",
				"\t\t\t'instrumental': true,",
				"\t\t\t'melody': true,",
				"\t\t\t'blips': true,",
				"\t\t\t'sub-tone': true,",
				"\t\t\t'sfx': true,",
				"\t\t\t'summation': true",
				"\t\t},",
				"\t\tduration: 1",
				"\t},",
				"\t{",
				"\t\tid: '3.02',",
				"\t\tname: 'chorus',",
				"\t\ttracks: {",
				"\t\t\t'vocals-b': { loop: false },",
				"\t\t\t'machine-drum-a': 'chorus',",
				"\t\t\t'instrumental': 'chorus',",
				"\t\t\t'melody': 'chorus',",
				"\t\t\t'blips': 'chorus',",
				"\t\t\t'sub-tone': 'chorus',",
				"\t\t\t'sfx': 'chorus',",
				"\t\t\t'summation': 'chorus'",
				"\t\t},",
				"\t\tduration: 1",
				"\t},",
				"\t{",
				"\t\tid: '3.03',",
				"\t\tname: 'chorus',",
				"\t\ttracks: {",
				"\t\t\t'vocals-c': { loop: false },",
				"\t\t\t'machine-drum-a': 'chorus',",
				"\t\t\t'instrumental': 'chorus',",
				"\t\t\t'melody': 'chorus',",
				"\t\t\t'blips': 'chorus',",
				"\t\t\t'sub-tone': 'chorus',",
				"\t\t\t'sfx': 'chorus',",
				"\t\t\t'summation': 'chorus'",
				"\t\t},",
				"\t\tduration: 1",
				"\t},",
				"\t{",
				"\t\tid: '3.04',",
				"\t\tname: 'chorus',",
				"\t\ttracks: {",
				"\t\t\t'vocals-d': { loop: false },",
				"\t\t\t'machine-drum-a': 'chorus',",
				"\t\t\t'instrumental': 'chorus',",
				"\t\t\t'melody': 'chorus',",
				"\t\t\t'blips': 'chorus',",
				"\t\t\t'sub-tone': 'chorus',",
				"\t\t\t'sfx': 'chorus',",
				"\t\t\t'summation': 'chorus'",
				"\t\t},",
				"\t\tduration: 1",
				"\t},",
				"\t{",
				"\t\tid: '3.05',",
				"\t\tname: 'chorus',",
				"\t\ttracks: {",
				"\t\t\t'vocals-e': { loop: false },",
				"\t\t\t'machine-drum-a': 'chorus',",
				"\t\t\t'instrumental': 'chorus',",
				"\t\t\t'melody': 'chorus',",
				"\t\t\t'blips': 'chorus',",
				"\t\t\t'sub-tone': 'chorus',",
				"\t\t\t'sfx': 'chorus',",
				"\t\t\t'summation': 'chorus'",
				"\t\t},",
				"\t\tduration: 1",
				"\t},",
				"",
				"\t//",
				"",
				"\t{",
				"\t\tid: '4.01',",
				"\t\tname: 'verse-3',",
				"\t\ttracks: {",
				"\t\t\t'vocals-a': { loop: false },",
				"\t\t\t'machine-drum-a': 'chorus',",
				"\t\t\t'instrumental': 'chorus',",
				"\t\t\t'melody': 'chorus',",
				"\t\t\t'blips': true,",
				"\t\t\t'sub-tone': 'chorus',",
				"\t\t\t'sfx': true,",
				"\t\t\t'summation': true",
				"\t\t},",
				"\t\tduration: 1",
				"\t},",
				"\t{",
				"\t\tid: '4.02',",
				"\t\tname: 'verse-3',",
				"\t\ttracks: {",
				"\t\t\t'vocals-b': { loop: false },",
				"\t\t\t'machine-drum-a': 'chorus',",
				"\t\t\t'instrumental': 'chorus',",
				"\t\t\t'melody': 'chorus',",
				"\t\t\t'blips': 'verse-3',",
				"\t\t\t'sub-tone': 'chorus',",
				"\t\t\t'sfx': 'verse-3',",
				"\t\t\t'summation': 'verse-3'",
				"\t\t},",
				"\t\tduration: 1",
				"\t},",
				"\t{",
				"\t\tid: '4.03',",
				"\t\tname: 'verse-3',",
				"\t\ttracks: {",
				"\t\t\t'vocals-c': { loop: false },",
				"\t\t\t'machine-drum-a': 'chorus',",
				"\t\t\t'instrumental': 'chorus',",
				"\t\t\t'melody': 'chorus',",
				"\t\t\t'blips': 'verse-3',",
				"\t\t\t'sub-tone': 'chorus',",
				"\t\t\t'sfx': 'verse-3',",
				"\t\t\t'summation': 'verse-3'",
				"\t\t},",
				"\t\tduration: 1",
				"\t},",
				"\t{",
				"\t\tid: '4.04',",
				"\t\tname: 'verse-3',",
				"\t\ttracks: {",
				"\t\t\t'vocals-d': { loop: false },",
				"\t\t\t'machine-drum-a': 'chorus',",
				"\t\t\t'instrumental': 'chorus',",
				"\t\t\t'melody': 'chorus',",
				"\t\t\t'blips': 'verse-3',",
				"\t\t\t'sub-tone': 'chorus',",
				"\t\t\t'sfx': 'verse-3',",
				"\t\t\t'summation': 'verse-3'",
				"\t\t},",
				"\t\tduration: 1",
				"\t},",
				"\t{",
				"\t\tid: '4.05',",
				"\t\tname: 'verse-3',",
				"\t\ttracks: {",
				"\t\t\t'vocals-e': { loop: false },",
				"\t\t\t'machine-drum-a': 'chorus',",
				"\t\t\t'instrumental': 'chorus',",
				"\t\t\t'melody': 'chorus',",
				"\t\t\t'blips': 'verse-3',",
				"\t\t\t'sub-tone': 'chorus',",
				"\t\t\t'sfx': 'verse-3',",
				"\t\t\t'summation': 'verse-3'",
				"\t\t},",
				"\t\tduration: 1",
				"\t},",
				"",
				"\t//",
				"",
				"\t{",
				"\t\tid: '5.01',",
				"\t\tname: 'verse-4',",
				"\t\ttracks: {",
				"\t\t\t'vocals-a': { loop: false },",
				"\t\t\t'machine-drum-a': 'chorus',",
				"\t\t\t'instrumental': 'chorus',",
				"\t\t\t'melody': 'chorus',",
				"\t\t\t'blips': true,",
				"\t\t\t'sub-tone': 'chorus',",
				"\t\t\t'sfx': true,",
				"\t\t\t'summation': 'verse-3'",
				"\t\t},",
				"\t\tduration: 1",
				"\t},",
				"\t{",
				"\t\tid: '5.02',",
				"\t\tname: 'verse-4',",
				"\t\ttracks: {",
				"\t\t\t'vocals-b': { loop: false },",
				"\t\t\t'machine-drum-a': 'chorus',",
				"\t\t\t'instrumental': 'chorus',",
				"\t\t\t'melody': 'chorus',",
				"\t\t\t'blips': 'verse-4',",
				"\t\t\t'sub-tone': 'chorus',",
				"\t\t\t'sfx': 'verse-4',",
				"\t\t\t'summation': 'verse-3'",
				"\t\t},",
				"\t\tduration: 1",
				"\t},",
				"\t{",
				"\t\tid: '5.03',",
				"\t\tname: 'verse-4',",
				"\t\ttracks: {",
				"\t\t\t'vocals-c': { loop: false },",
				"\t\t\t'machine-drum-a': 'chorus',",
				"\t\t\t'instrumental': 'chorus',",
				"\t\t\t'melody': 'chorus',",
				"\t\t\t'blips': 'verse-4',",
				"\t\t\t'sub-tone': 'chorus',",
				"\t\t\t'sfx': 'verse-4',",
				"\t\t\t'summation': 'verse-3'",
				"\t\t},",
				"\t\tduration: 1",
				"\t},",
				"\t{",
				"\t\tid: '5.04',",
				"\t\tname: 'verse-4',",
				"\t\ttracks: {",
				"\t\t\t'vocals-d': { loop: false },",
				"\t\t\t'machine-drum-a': 'chorus',",
				"\t\t\t'instrumental': 'chorus',",
				"\t\t\t'melody': 'chorus',",
				"\t\t\t'blips': 'verse-4',",
				"\t\t\t'sub-tone': 'chorus',",
				"\t\t\t'sfx': 'verse-4',",
				"\t\t\t'summation': 'verse-3'",
				"\t\t},",
				"\t\tduration: 2",
				"\t},",
				"",
				"\t//",
				"",
				"\t{",
				"\t\tid: '6.01',",
				"\t\tname: 'breakdown',",
				"\t\ttracks: {",
				"\t\t\t'vocals': { loop: false },",
				"\t\t\t'machine-drum-a': true,",
				"\t\t\t'instrumental': true,",
				"\t\t\t'melody': true,",
				"\t\t\t'blips': 'verse-4',",
				"\t\t\t'sub-tone': true,",
				"\t\t\t'sfx': true,",
				"\t\t\t'summation': true",
				"\t\t},",
				"\t\tduration: 2",
				"\t},",
				"",
				"\t// TODO: Add another breakdown to",
				"\t// better transition back to the",
				"\t// introduction of the whole \"song\".",
				"",
				"];",
				"",
				"var paused = true;",
				"var currentTime = 0;",
				"var playbackRate = 1;",
				"",
				"var manager = {",
				"",
				"\tunitDuration: 5.333, // In seconds",
				"\tstartTime: 0,",
				"",
				"\ttracks: {},",
				"\tsequence: sequence,",
				"",
				"\tanalysers: {",
				"\t\tlist: []",
				"\t},",
				"",
				"\tget currentTime() {",
				"\t\tvar ctx = WebAudio.getContext();",
				"\t\tvar playing = !paused;",
				"\t\tif ( playing ) {",
				"\t\t\treturn ( ctx.currentTime - manager.startTime ) * playbackRate;",
				"\t\t}",
				"\t\treturn currentTime;",
				"\t},",
				"\tset currentTime( time ) {",
				"\t\tvar playing = !paused;",
				"\t\tif ( playing ) {",
				"\t\t\tmanager.pause();",
				"\t\t}",
				"\t\tcurrentTime = time;",
				"\t\tif ( playing ) {",
				"\t\t\tmanager.play();",
				"\t\t}",
				"\t},",
				"",
				"\tget playbackRate() {",
				"\t\treturn playbackRate;",
				"\t},",
				"\tset playbackRate( rate ) {",
				"\t\tvar playing = !paused;",
				"\t\tif ( playing ) {",
				"\t\t\tmanager.pause();",
				"\t\t}",
				"\t\tplaybackRate = rate;",
				"\t\tif ( playing ) {",
				"\t\t\tmanager.play();",
				"\t\t}",
				"\t},",
				"\tget duration() {",
				"\t\tvar duration = 0;",
				"\t\tfor ( var i = 0; i < sequence.length; i++ ) {",
				"\t\t\tvar segment = sequence[ i ];",
				"\t\t\tduration += segment.duration * manager.unitDuration;",
				"\t\t}",
				"\t\treturn duration;",
				"\t},",
				"",
				"\tpause: function() {",
				"\t\tfor ( var i = 0; i < sources.length; i++ ) {",
				"\t\t\tvar source = sources[ i ];",
				"\t\t\tsource.stop( 0 );",
				"\t\t}",
				"\t\tsources.length = 0;",
				"\t\tif ( !paused ) {",
				"\t\t\tcurrentTime = manager.currentTime;",
				"\t\t}",
				"\t\tpaused = true;",
				"\t\treturn manager;",
				"\t},",
				"",
				"\tplay: function() {",
				"",
				"\t\tvar ctx = WebAudio.getContext();",
				"\t\tvar now = ctx.currentTime;",
				"\t\tvar startTime = 0;",
				"\t\tmanager.startTime = now - currentTime;",
				"",
				"\t\tfor ( var i = 0; i < sequence.length; i++ ) {",
				"",
				"\t\t\tvar segment = sequence[ i ];",
				"\t\t\tvar totalDuration = segment.duration * manager.unitDuration;",
				"",
				"\t\t\tif ( currentTime < startTime + totalDuration ) {",
				"",
				"\t\t\t\tfor ( var name in segment.tracks ) {",
				"",
				"\t\t\t\t\tvar sound = segment.tracks[ name ];",
				"\t\t\t\t\tvar buffer = sound.buffer;",
				"\t\t\t\t\tvar duration = sound.duration;",
				"\t\t\t\t\tvar offset = currentTime - startTime;",
				"",
				"\t\t\t\t\tif ( sound.track ) {",
				"",
				"\t\t\t\t\t\tvar source = ctx.createBufferSource();",
				"\t\t\t\t\t\tsource.buffer = buffer;",
				"\t\t\t\t\t\tsource.loop = sound.loop;",
				"\t\t\t\t\t\tsource.playbackRate.value = playbackRate;",
				"",
				"\t\t\t\t\t\tif ( currentTime < startTime ) {",
				"\t\t\t\t\t\t\tsource.start( manager.startTime + startTime, 0 );",
				"\t\t\t\t\t\t\tsource.stop( manager.startTime + startTime + totalDuration );",
				"\t\t\t\t\t\t} else {",
				"\t\t\t\t\t\t\tsource.start( now, offset );",
				"\t\t\t\t\t\t\tsource.stop( now + totalDuration - offset );",
				"\t\t\t\t\t\t}",
				"",
				"\t\t\t\t\t\tsource.connect( sound.track.node );",
				"\t\t\t\t\t\tsources.push( source );",
				"",
				"\t\t\t\t\t}",
				"\t\t\t\t}",
				"",
				"\t\t\t}",
				"\t\t\t",
				"\t\t\tstartTime += totalDuration;",
				"",
				"\t\t}",
				"",
				"\t\tpaused = false;",
				"",
				"\t\treturn manager;",
				"",
				"\t},",
				"",
				"\tupdateFFT: function() {",
				"",
				"\t\t// TODO: May need some if statements",
				"\t\t// around `paused` or not.",
				"\t\tmanager.analyser.getByteTimeDomainData( manager.analyser.data );",
				"",
				"\t\tfor ( var i = 0; i < manager.analysers.list.length; i++ ) {",
				"\t\t\tvar analyser = manager.analysers.list[ i ];",
				"\t\t\tanalyser.getByteFrequencyData( analyser.data );",
				"\t\t}",
				"",
				"\t\treturn manager;",
				"",
				"\t},",
				"",
				"\taddTrack: function( name, clips ) {",
				"",
				"\t\tvar ctx = WebAudio.getContext();",
				"",
				"\t\tvar track = {",
				"\t\t\tname: name,",
				"\t\t\tclips: clips,",
				"\t\t\tnode: ctx.createGain()",
				"\t\t};",
				"",
				"\t\tfor ( var i = 0; i < clips.length; i++ ) {",
				"\t\t\tvar clip = clips[ i ];",
				"\t\t\tif ( clip && !clip.connected ) {",
				"\t\t\t\tclip.track = track;",
				"\t\t\t\tclip.connect( track.node );",
				"\t\t\t\tclip.connected = true;",
				"\t\t\t}",
				"\t\t}",
				"\t\t",
				"\t\ttrack.node.connect( manager.destination );",
				"\t\t",
				"\t\tvar key = name.replace( /\\-[a-zA-Z]$/i, '' );",
				"\t\tif ( !( key in manager.analysers ) ) {",
				"\t\t\tvar analyser = createAnalyser( ctx );",
				"\t\t\tmanager.analysers[ key ] = analyser;",
				"\t\t\tmanager.analysers.list.push( analyser );",
				"\t\t}",
				"",
				"\t\ttrack.node.connect( manager.analysers[ key ] );",
				"\t\tmanager.tracks[ name ] = track;",
				"",
				"\t\treturn track;",
				"",
				"\t}",
				"",
				"};",
				"",
				"var i, name, sound, url, property;",
				"var ua = navigator.userAgent;",
				"var isMP3 = ( !!ua.match( /Safari/ig ) && !ua.match( /Chrome/ig ) ) || !!ua.match( /Edge/ig );",
				"var ctx = WebAudio.getContext();",
				"var extension = isMP3 ? 'mp3' : 'ogg';",
				"",
				"for ( i = 0; i < sequence.length; i++ ) {",
				"",
				"\tvar segment = sequence[ i ];",
				"\t",
				"\tfor ( name in tracks ) {",
				"",
				"\t\tsound = null;",
				"\t\turl = '../assets/v2/' + segment.name + '-' + name + '.' + extension;",
				"",
				"\t\tif ( segment.tracks[ name ] ) {",
				"",
				"\t\t\tswitch ( typeof segment.tracks[ name ] ) {",
				"\t\t\t\tcase 'object':",
				"\t\t\t\t\tsound = new WebAudio();",
				"\t\t\t\t\tsound.onLoad = resources.queue();",
				"\t\t\t\t\tsound.src = url;",
				"\t\t\t\t\tfor ( property in segment.tracks[ name ] ) {",
				"\t\t\t\t\t\tsound[ property ] = segment.tracks[ name ][ property ];",
				"\t\t\t\t\t}",
				"\t\t\t\t\tsound.section = segment.name;",
				"\t\t\t\t\tbreak;",
				"\t\t\t\tcase 'string':",
				"\t\t\t\t\tsound = getSoundByTrackNameAndSection( name, segment.tracks[ name ] );",
				"\t\t\t\t\tbreak;",
				"\t\t\t\tcase 'boolean':",
				"\t\t\t\t\t// Create a new sound",
				"\t\t\t\t\tsound = new WebAudio();",
				"\t\t\t\t\tsound.onLoad = resources.queue();",
				"\t\t\t\t\tsound.src = url;",
				"\t\t\t\t\tsound.loop = true;",
				"\t\t\t\t\tsound.section = segment.name;",
				"\t\t\t\t\tbreak;",
				"\t\t\t}",
				"",
				"\t\t\t// Overwrite data saved to have",
				"\t\t\t// convenient access to the sound",
				"\t\t\tsegment.tracks[ name ] = sound;",
				"\t\t\tsounds.push( sound );",
				"",
				"\t\t}",
				"",
				"\t\ttracks[ name ].push( sound );",
				"",
				"\t}",
				"",
				"}",
				"",
				"// Initialize Audio Manager",
				"",
				"var ctx = WebAudio.getContext();",
				"",
				"manager.master = ctx.createGain();",
				"manager.master.connect( ctx.destination );",
				"",
				"manager.destination = ctx.createGain();",
				"manager.destination.connect( manager.master );",
				"",
				"manager.analyser = createAnalyser( ctx );",
				"manager.destination.connect( manager.analyser );",
				"",
				"for ( name in tracks ) {",
				"\tmanager.addTrack( name, tracks[ name ] );",
				"}",
				"",
				"//",
				"",
				"function getSoundByTrackNameAndSection( track, section ) {",
				"",
				"\tvar list = tracks[ track ];",
				"\tvar regex = new RegExp( section, 'i' );",
				"",
				"\tfor ( var i = 0; i < list.length; i++ ) {",
				"\t\tvar item = list[ i ];",
				"\t\tif ( item && regex.test( item.section ) ) {",
				"\t\t\treturn item;",
				"\t\t}",
				"\t}",
				"",
				"\treturn null;",
				"",
				"}",
				"",
				"function createAnalyser( ctx ) {",
				"",
				"\tvar analyser = ctx.createAnalyser();",
				"\tanalyser.fftSize = 32;",
				"\tanalyser.data = new Uint8Array( analyser.frequencyBinCount );",
				"",
				"\treturn analyser;",
				"}",
				"",
				"resources.set( 'audio-manager', manager );"
			]
		],
		[
			"Scene",
			[
				"var scene = new THREE.Scene();",
				"",
				"var ambient = new THREE.HemisphereLight( 0xFEFCFF, 0xB0ADAA, 0.9 );",
				"scene.add( ambient );",
				"",
				"var amount = 3;",
				"var width = 1000;",
				"",
				"for ( var i = 0; i < amount; i++ ) {",
				"\tvar pct = i / ( amount - 1 );",
				"\tvar light = new THREE.DirectionalLight( 0xFFFFFF, 0.1 );",
				"\tlight.position.y = width / 2;",
				"\tlight.position.x = width * pct - width / 2;",
				"\tlight.lookAt( scene.position );",
				"\tlight.castShadow = true;",
				"\tscene.add( light );",
				"}",
				"",
				"resources.set( 'scene', scene );"
			]
		],
		[
			"Camera",
			[
				"var scene = resources.get( 'scene' );",
				"",
				"var camera = new THREE.PerspectiveCamera( 60, window.innerWidth / window.innerHeight, .01, 100000 );",
				"var group = new THREE.Group();",
				"group.position.set( 0, 0, 0 );",
				"",
				"group.add( camera );",
				"scene.add( group );",
				"",
				"resources.set( 'camera', camera );"
			]
		],
		[
			"Renderer",
			[
				"var camera = resources.get( 'camera' );",
				"",
				"var renderer = new THREE.WebGLRenderer( {",
				"\tantialias: true,",
				"\tpreserveDrawingBuffer: true",
				"} );",
				"renderer.setClearColor( 0x000000, 1 );",
				"renderer.setPixelRatio( window.devicePixelRatio );",
				"",
				"var domElement = resources.get( 'dom' );",
				"domElement.appendChild( renderer.domElement );",
				"",
				"renderer.vr.enabled = true;",
				"var WebVRButton = WEBVR.createButton( renderer );",
				"WebVRButton.style.zIndex = 'unset';",
				"domElement.appendChild( WebVRButton );",
				"",
				"resize();",
				"window.addEventListener( 'resize', resize, false );",
				"",
				"function resize() {",
				"",
				"\tvar rect = domElement.getBoundingClientRect();",
				"\tvar width = rect.width;",
				"\tvar height = rect.height;",
				"",
				"\tcamera.aspect = width / height;",
				"\tcamera.updateProjectionMatrix();",
				"",
				"\trenderer.setSize( width, height );",
				"",
				"}",
				"",
				"resources.set( 'renderer', renderer );"
			]
		],
		[
			"Backdrop",
			[
				"var scene = resources.get( 'scene' );",
				"",
				"var drag = 0.00625;",
				"",
				"var backdrop = new THREE.Mesh(",
				"\tnew THREE.SphereBufferGeometry( 750, 750, 16, 16 ),",
				"\tnew THREE.ShaderMaterial( {",
				"",
				"\t\tuniforms: {",
				"\t\t\tcSource: { type: 'c', value: new THREE.Color( 0x000000 ) },",
				"\t\t\tcTarget: { type: 'c', value: new THREE.Color( 0x000000 ) }",
				"\t\t},",
				"",
				"\t\tvertexShader: [",
				"",
				"\t\t\t'varying vec2 vUv;',",
				"",
				"\t\t\t'void main() {',",
				"",
				"\t\t\t\t'vUv = uv;',",
				"\t\t\t\t'gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',",
				"",
				"\t\t\t'}'",
				"",
				"\t\t].join( '\\n' ),",
				"",
				"\t\tfragmentShader: [",
				"",
				"\t\t\t'uniform vec3 cSource;',",
				"\t\t\t'uniform vec3 cTarget;',",
				"",
				"\t\t\t'varying vec2 vUv;',",
				"\t\t\t",
				"\t\t\t'void main() {',",
				"",
				"\t\t\t\t'vec3 pigment = mix( cSource, cTarget, vUv.y );',",
				"\t\t\t\t'gl_FragColor = vec4( pigment.rgb, 1.0 );',",
				"",
				"\t\t\t'}'",
				"",
				"\t\t].join( '\\n' ),",
				"\t\t",
				"\t\tside: THREE.BackSide,",
				"",
				"\t} )",
				");",
				"",
				"backdrop.userData.cSource = new THREE.Color( 0x000000 );",
				"backdrop.userData.cTarget = new THREE.Color( 0x000000 );",
				"",
				"backdrop.userData.setSourceColor = function ( color ) {",
				"\tbackdrop.userData.cSource.set( color );",
				"\treturn backdrop;",
				"};",
				"",
				"backdrop.userData.setTargetColor = function ( color ) {",
				"\tbackdrop.userData.cTarget.set( color );",
				"\treturn backdrop;",
				"};",
				"",
				"backdrop.userData.update = function () {",
				"",
				"\tvar source = backdrop.userData.cSource;",
				"\tvar target = backdrop.userData.cTarget;",
				"",
				"\tif ( !backdrop.material.uniforms.cSource.value.equals( source ) ) {",
				"\t\tbackdrop.material.uniforms.cSource.value.lerp( source, drag );",
				"\t}",
				"\tif ( !backdrop.material.uniforms.cTarget.value.equals( target ) ) {",
				"\t\tbackdrop.material.uniforms.cTarget.value.lerp( target, drag );",
				"\t}",
				"",
				"\treturn backdrop;",
				"",
				"};",
				"",
				"scene.add( backdrop );",
				"",
				"resources.set( 'backdrop', backdrop );"
			]
		],
		[
			"Interaction",
			[
				"var camera = resources.get( 'camera' );",
				"var renderer = resources.get( 'renderer' );",
				"var backdrop = resources.get( 'backdrop' );",
				"",
				"var interaction = new Interaction( renderer, camera );",
				"",
				"interaction.addEventListener( 'connected', connected );",
				"interaction.connect();",
				"",
				"resources.set( 'interaction', interaction );",
				"",
				"function connected( event ) {",
				"\tif ( !event.controller ) {",
				"\t\treturn;",
				"\t}",
				"\tvar laser = event.controller.userData.laser;",
				"\tvar material = laser.material;",
				"\tmaterial.emissive = backdrop.material.uniforms.cSource.value;",
				"}"
			]
		],
		[
			"Ring",
			[
				"var scene = resources.get( 'scene' );",
				"var backdrop = resources.get( 'backdrop' );",
				"",
				"var radius = 250;",
				"var thickness = 25 * 2;",
				"var radialSegments = 4;",
				"var tubularSegments = 250;",
				"",
				"var geometry = new THREE.TorusBufferGeometry( radius, thickness / 2, radialSegments, tubularSegments );",
				"var material = new THREE.MeshPhysicalMaterial( {",
				"\tskinning: true,",
				"\tmetalness: 0.0,",
				"\treflectivity: 0.1,",
				"\troughness: 0.25",
				"} );",
				"",
				"material.color = backdrop.material.uniforms.cSource.value;",
				"geometry.rotateX( Math.PI / 2 );",
				"",
				"var bones = [];",
				"var amount = 25;",
				"var root = new THREE.Bone();",
				"bones.push( root );",
				"",
				"for ( var i = 0; i < amount; i++ ) {",
				"",
				"\tvar pct = i / amount;",
				"\tvar theta = pct * Math.PI * 2;",
				"\tvar bone = new THREE.Bone();",
				"",
				"\tbone.position.x = radius * Math.cos( theta );",
				"\tbone.position.z = radius * Math.sin( theta );",
				"\tbone.rotation.order = 'YXZ';",
				"\tbone.rotation.y = Math.atan2( - bone.position.x, - bone.position.z );",
				"",
				"\tbone.userData.theta = theta;",
				"\tbone.userData.euler = new THREE.Euler().copy( bone.rotation );",
				"",
				"\troot.add( bone );",
				"\tbones.push( bone );",
				"",
				"}",
				"",
				"var distanceBetweenBones = bones[ 5 ].position.distanceTo( bones[ 6 ].position );",
				"var positions = geometry.attributes.position;",
				"",
				"var weightResolution = 4;",
				"var indices = [];",
				"var weights = [];",
				"",
				"var v1 = new THREE.Vector3();",
				"var v2 = new THREE.Vector3();",
				"",
				"var sortedBones = [];",
				"",
				"for ( var i = 0; i < bones.length; i ++ ) {",
				"",
				"\tvar bone = bones[ i ];",
				"\tsortedBones.push( { id: i, bone: bone, distance: 0 } );",
				"",
				"}",
				"",
				"function getNearestBones( vertex ) {",
				"",
				"\tfor ( var i = 0; i < sortedBones.length; i ++ ) {",
				"",
				"\t\tvar boneData = sortedBones[ i ];",
				"\t\tboneData.bone.getWorldPosition( v2 );",
				"\t\tboneData.distance = vertex.distanceTo( v2 );",
				"",
				"\t}",
				"",
				"\tsortedBones.sort( function ( a, b ) { return a.distance - b.distance } );",
				"",
				"\treturn sortedBones;",
				"",
				"}",
				"",
				"for ( var i = 0, j = 0; i < positions.count * weightResolution; i += weightResolution, j += 3 ) {",
				"",
				"\tv1.fromArray( positions.array, j );",
				"",
				"\tvar data = getNearestBones( v1 );",
				"\tvar shortestDistance = data[ 0 ].distance;",
				"",
				"\tfor ( var k = 0; k < weightResolution; k++ ) {",
				"",
				"\t\tvar id = data[ k ].id;",
				"\t\tvar weight = ( data[ k ].distance - shortestDistance ) / distanceBetweenBones;",
				"",
				"\t\tweight = Math.min( weight, 1 );                               // Clamp to 0 - 1",
				"\t\tweight = TWEEN.Easing.Sinusoidal.Out( weight );               // Bend curve",
				"\t\tweight = Math.floor( weight * 100 ) / 100;                    // 3 Decimal point precision",
				"\t\tweight = 1 - weight;                                          // Invert spectrum",
				"",
				"\t\tindices[ i + k ] = id;",
				"\t\tweights[ i + k ] = weight;",
				"",
				"  \t}",
				"",
				"}",
				"",
				"geometry.addAttribute( 'skinIndex', new THREE.Float32BufferAttribute( indices, weightResolution ) );",
				"geometry.addAttribute( 'skinWeight', new THREE.Float32BufferAttribute( weights, weightResolution ) );",
				"",
				"var torus = new THREE.SkinnedMesh( geometry, material );",
				"",
				"torus.receiveShadow = true;",
				"",
				"torus.userData.root = root;",
				"torus.userData.radius = radius;",
				"torus.userData.thickness = thickness;",
				"",
				"torus.add( root );",
				"torus.bind( new THREE.Skeleton( bones ) );",
				"scene.add( torus );",
				"",
				"resources.set( 'ring', torus );"
			]
		],
		[
			"Playhead",
			[
				"var ring = resources.get( 'ring' );",
				"var scene = resources.get( 'scene' );",
				"var interaction = resources.get( 'interaction' );",
				"var TWO_PI = Math.PI * 2;",
				"var HALF_PI = Math.PI / 2;",
				"",
				"var playhead = new THREE.Mesh(",
				"\tnew THREE.SphereBufferGeometry( 5, 32, 32 ),",
				"\tnew THREE.MeshBasicMaterial( {",
				"\t\tcolor: 'rgb( 0, 255, 150 )'",
				"\t} )",
				");",
				"",
				"var cylinder = new THREE.Mesh(",
				"\tnew THREE.CylinderBufferGeometry( 0.5, 0.5, 1, 64, 1, true ),",
				"\tnew THREE.ShaderMaterial( {",
				"\t\tuniforms: {",
				"\t\t\tthickness: { type: 'f', value: 1 },",
				"\t\t\trows: { type: 'f', value: 5 },",
				"\t\t\tcols: { type: 'f', value: 16 }",
				"\t\t},",
				"\t\tvertexShader: [",
				"\t\t\t'varying vec2 vUv;',",
				"\t\t\t'void main() {',",
				"\t\t\t\t'vUv = uv;',",
				"\t\t\t\t'vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );',",
				"\t\t\t\t'gl_Position = projectionMatrix * mvPosition;',",
				"\t\t\t'}'",
				"\t\t].join( '\\n' ),",
				"\t\tfragmentShader: [",
				"\t\t\t'uniform float thickness;',",
				"\t\t\t'uniform float rows;',",
				"\t\t\t'uniform float cols;',",
				"\t\t\t'varying vec2 vUv;',",
				"\t\t\t'void main() {',",
				"\t\t\t\t'float linewidth = thickness * 0.02;',",
				"\t\t\t\t'float t = mod( rows * vUv.y + 0.5, 1.0 );',",
				"\t\t\t\t'float alpha = step( 1.0 - linewidth, t );',",
				"\t\t\t\t't = mod( cols * vUv.x, 1.0 );',",
				"\t\t\t\t'alpha += step( 1.0 - linewidth / 8.0, t );',",
				"\t\t\t\t'if ( vUv.y < ( 0.5 / rows - linewidth / 2.0 ) || vUv.y > 1.0 - 0.5 / rows ) {',",
				"\t\t\t\t\t'discard;',",
				"\t\t\t\t'}',",
				"\t\t\t\t'gl_FragColor = vec4( vec3( 0.0 ).xyz, mix( 0.25, 0.85, alpha * thickness ) );',",
				"\t\t\t'}'",
				"\t\t].join( '\\n' ),",
				"\t\ttransparent: true,",
				"\t\tside: THREE.BackSide",
				"\t} )",
				");",
				"",
				"cylinder.visible = false;",
				"",
				"playhead.userData.outline = new THREE.Mesh(",
				"\tplayhead.geometry,",
				"\tnew THREE.MeshBasicMaterial( {",
				"\t\tcolor: 0xefefef,",
				"\t\tside: THREE.BackSide,",
				"\t\ttransparent: true,",
				"\t\topacity: 0.66,",
				"\t\tblending: THREE.AdditiveBlending",
				"\t} )",
				");",
				"playhead.userData.outline.scale.setLength( 2.25 );",
				"playhead.add( playhead.userData.outline );",
				"",
				"playhead.userData.update = function( progress ) {",
				"",
				"\tvar theta = null;",
				"\tvar radius = ring.userData.radius - ring.userData.thickness;",
				"\tvar dragging = cylinder.visible;",
				"\tvar linewidth = cylinder.material.uniforms.thickness;",
				"",
				"\tif ( dragging ) {",
				"",
				"\t\tplayhead.userData.outline.material.opacity = 1;",
				"",
				"\t\tfor ( var id in interaction.intersections ) {",
				"",
				"\t\t\tvar intersection = interaction.intersections[ id ];",
				"",
				"\t\t\tif ( intersection && intersection.object.uuid === cylinder.uuid ) {",
				"",
				"\t\t\t\t// Assumes camera is at 0, 0, 0",
				"\t\t\t\tvar point = intersection.point;",
				"\t\t\t\ttheta = Math.atan2( point.z, point.x );",
				"\t\t\t\tplayhead.dispatchEvent( {",
				"\t\t\t\t\ttype: 'drag',",
				"\t\t\t\t\ttheta: theta,",
				"\t\t\t\t\tprogress: mod( ( ( theta - Math.PI * 1.5 ) ), TWO_PI ) / TWO_PI,",
				"\t\t\t\t\theight: point.y",
				"\t\t\t\t} );",
				"",
				"\t\t\t}",
				"",
				"\t\t}",
				"",
				"\t\tlinewidth.value += ( 1 - linewidth.value ) * 0.0625;",
				"",
				"\t} else {",
				"",
				"\t\ttheta = progress * TWO_PI + Math.PI * 1.5;",
				"",
				"\t}",
				"",
				"\tif ( theta !== null ) {",
				"\t\tplayhead.position.x = radius * Math.cos( theta );",
				"\t\tplayhead.position.z = radius * Math.sin( theta );",
				"\t}",
				"",
				"\treturn playhead;",
				"",
				"};",
				"",
				"scene.add( playhead );",
				"scene.add( cylinder );",
				"",
				"//",
				"",
				"interaction.listen( playhead );",
				"interaction.listen( cylinder );",
				"",
				"playhead.addEventListener( 'over', function() {",
				"\tplayhead.userData.outline.material.opacity = 1;",
				"} );",
				"playhead.addEventListener( 'out', function() {",
				"\tplayhead.userData.outline.material.opacity = 0.66;",
				"} );",
				"playhead.addEventListener( 'primary-down', pointerdown );",
				"",
				"function pointerdown() {",
				"",
				"\tvar radius = ring.userData.radius - ring.userData.thickness;",
				"",
				"\tcylinder.visible = true;",
				"\tcylinder.scale.x = radius * 2;",
				"\tcylinder.scale.z = radius * 2;",
				"\tcylinder.scale.y = radius / 4;",
				"\tcylinder.material.uniforms.thickness.value = 0;",
				"",
				"\tinteraction.ignore( playhead );",
				"\tinteraction.addEventListener( 'primary-up', pointerup );",
				"",
				"}",
				"",
				"function pointerup() {",
				"",
				"\tcylinder.visible = false;",
				"\tplayhead.userData.outline.material.opacity = 0.66;",
				"",
				"\tinteraction.listen( playhead );",
				"\tinteraction.removeEventListener( 'primary-up', pointerup );",
				"",
				"}",
				"",
				"function mod( v, l ) {",
				"\twhile ( v < 0 ) {",
				"\t\tv += l;",
				"\t}",
				"\treturn v % l;",
				"}",
				"",
				"resources.set( 'playhead', playhead );"
			]
		]
	],
	"effects": [
		[
			"Audio Player",
			[
				"var manager = resources.get( 'audio-manager' );",
				"",
				"function start( progress ) {",
				"\tplayer.setAudio( manager );",
				"\tplayer.setLoop( [ 0, 170.666 ] );",
				"}",
				"",
				"function end( progress ) {",
				"\tplayer.setAudio( null );",
				"}",
				"",
				"function update( progress ) {",
				"",
				"\tmanager.updateFFT();",
				"",
				"}"
			]
		],
		[
			"Render",
			[
				"var manager = resources.get( 'audio-manager' );",
				"var renderer = resources.get( 'renderer' );",
				"var interaction = resources.get( 'interaction' );",
				"var carousel = resources.get( 'carousel' );",
				"var backdrop = resources.get( 'backdrop' );",
				"var camera = resources.get( 'camera' );",
				"var scene = resources.get( 'scene' );",
				"var playhead = resources.get( 'playhead' );",
				"",
				"playhead.addEventListener( 'drag', onPlayheadDrag );",
				"",
				"function start( progress ){}",
				"",
				"function end( progress ){}",
				"",
				"function update( progress ) {",
				"",
				"\tvar isPresenting = renderer.vr.isPresenting();",
				"",
				"\tTWEEN.update();",
				"",
				"\tTHREE.VRController.update();",
				"\tinteraction.update();",
				"\tplayhead.userData.update( progress );",
				"",
				"\trenderer.render( scene, camera );",
				"",
				"}",
				"",
				"function onPlayheadDrag( event ) {",
				"",
				"\tvar progress = event.progress;",
				"",
				"\tplayer.currentTime = progress * 170.65599999999998;",
				"//\tplayer.playbackRate = ( event.height / 100 ) + 1;",
				"",
				"}"
			]
		],
		[
			"Set Backdrop Red",
			[
				"var parameters = {",
				"\tsource: new FRAME.Parameters.Vector3( 'Source Color', [ 255, 50, 75 ] ),",
				"\ttarget: new FRAME.Parameters.Vector3( 'Target Color', [ 150, 50, 50 ] )",
				"};",
				"var backdrop = resources.get( 'backdrop' );",
				"",
				"var black = new THREE.Color( 0, 0, 0 );",
				"var source = new THREE.Color();",
				"var target = new THREE.Color()",
				"",
				"function start( progress ) {",
				"",
				"\tvar color;",
				"",
				"\tcolor = parameters.source.value;",
				"\tsource.setRGB( color[ 0 ] / 255, color[ 1 ] / 255, color[ 2 ] / 255 );",
				"",
				"\tcolor = parameters.target.value;",
				"\ttarget.setRGB( color[ 0 ] / 255, color[ 1 ] / 255, color[ 2 ] / 255 );",
				"",
				"}",
				"",
				"function end( progress ){}",
				"",
				"function update( progress ) {",
				"",
				"\tvar uniforms = backdrop.material.uniforms;",
				"",
				"\tprogress = TWEEN.Easing.Back.Out( progress );",
				"",
				"\tuniforms.cSource.value.copy( black ).lerp( source, progress );",
				"\tuniforms.cTarget.value.copy( black ).lerp( target, progress );",
				"",
				"}"
			]
		],
		[
			"Apply Stem FFT to Bones ",
			[
				"var manager = resources.get( 'audio-manager' );",
				"var ring = resources.get( 'ring' );",
				"",
				"function start( progress ){}",
				"",
				"function end( progress ){}",
				"",
				"function update( progress ) {",
				"",
				"\tvar root = ring.userData.root;",
				"\tvar bones = root.children;",
				"",
				"\tvar analysers = manager.analysers.list;",
				"\tvar bandwidth = 0;",
				"\tvar centerToCamera = 0.38;",
				"",
				"\tfor ( var i = 0; i < bones.length; i++ ) {",
				"",
				"\t\tvar pct = ( i / bones.length + centerToCamera )  % 1;",
				"\t\tvar t = pct * analysers.length;",
				"\t\tvar u = Math.floor( t );",
				"\t\tvar v = Math.ceil( t ) % analysers.length;",
				"\t\tvar offset = t % 1;",
				"",
				"\t\tvar bone = bones[ i ];",
				"\t\t",
				"\t\tvar du = analysers[ u ].data;",
				"\t\tvar dv = analysers[ v ].data;",
				"\t\t",
				"\t\tvar au = du[ bandwidth ];",
				"\t\tvar av = dv[ bandwidth ];",
				"",
				"\t\tvar amplitude = lerp( au, av, offset ) / 255;",
				"\t\tvar scale = 0.8 * amplitude + 0.2;",
				"",
				"\t\t// Ease into values",
				"\t\tbone.scale.y += ( scale - bone.scale.y ) * 0.66;",
				"//\t\tbone.scale.y = bone.scale.x;",
				"//\t\tbone.scale.z = bone.scale.z;",
				"",
				"\t}",
				"",
				"}",
				"",
				"function lerp( a, b, t ) {",
				"\treturn ( b - a ) * t + a;",
				"}"
			]
		]
	],
	"animations": [
		[
			"Audio",
			0,
			170.65599999999998,
			0,
			0,
			true
		],
		[
			"Backdrop Reveal",
			0,
			5,
			1,
			2,
			true
		],
		[
			"Ring Morph Scale",
			0,
			170.65599999999998,
			2,
			3,
			true
		],
		[
			"Video",
			0,
			170.65599999999998,
			5,
			1,
			true
		]
	]
}
