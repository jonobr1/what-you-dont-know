{
	"config": {},
	"libraries": [
		"../release/third-party/WebAudio.js",
		"../release/third-party/three.js",
		"../release/third-party/vr-controller.js",
		"../release/third-party/WebVR.js",
		"../release/third-party/tween.js",
		"../release/src/audio-manager.js",
		"../release/src/interaction.js"
	],
	"includes": [
		[
			"AudioManager",
			[
				"var tracks = [",
				"\t'vocals', 'machine-drum', 'instrumental',",
				"\t'melody', 'blips', 'sub-tone', 'sfx',",
				"\t'summation'",
				"];",
				"",
				"/**",
				" * An array describing what audio clips exist for",
				" * each track at every section of the \"song\". `false`",
				" * means there isn't a clip available for that section.",
				" * `true` means there is a clip available and its",
				" * filename corresponds to the sections array. Finally,",
				" * a String represents the exact base filename to be",
				" * used to select the specific clip.",
				" */",
				"tracks.data = {",
				"\t'vocals': [",
				"\t\ttrue, true, true, true, true, true ],",
				"\t'machine-drum': [",
				"\t\ttrue, true, true, 'chorus', 'breakdown', true ],",
				"\t'instrumental': [",
				"\t\ttrue, true, true, 'chorus', 'breakdown', true ],",
				"\t'melody': [",
				"\t\ttrue, true, true, 'chorus', 'breakdown', true ],",
				"\t'blips': [",
				"\t\tfalse, false, true, true, true, false ],",
				"\t'sub-tone': [",
				"\t\ttrue, true, true, 'chorus', 'breakdown', true ],",
				"\t'sfx': [",
				"\t\tfalse, false, true, true, true, true ],",
				"\t'summation': [",
				"\t\ttrue, true, true, 'chorus', 'breakdown', true ]",
				"};",
				"",
				"var sections = [",
				"\t'verse-1', 'verse-2', 'chorus',",
				"\t'verse-3', 'verse-4', 'breakdown'",
				"];",
				"",
				"sections.data = {};",
				"",
				"var manager = new AudioManager();",
				"",
				"var ua = navigator.userAgent;",
				"var isSafari = !!ua.match( /Safari/ig ) && ( !ua.match( /Chrome/ig ) || !!ua.match( /Edge/ig ) );",
				"var ctx = WebAudio.getContext();",
				"var extension = isSafari ? 'mp3' : 'ogg';",
				"",
				"for ( var name in tracks.data ) {",
				"",
				"\tvar clips = tracks.data[ name ];",
				"\tvar sounds = []",
				"",
				"\tfor ( var i = 0; i < clips.length; i++ ) {",
				"",
				"\t\tvar section = clips[ i ];",
				"",
				"\t\tif ( section === true ) {",
				"\t\t\tsection = sections[ i ];",
				"\t\t}",
				"",
				"\t\tvar url = '../assets/v1/' + section + '-' + name + '.' + extension;",
				"\t\tvar sound = new WebAudio();",
				"\t\tif ( section ) {",
				"\t\t\tsound.onLoad = resources.queue();",
				"\t\t\tsound.src = url;",
				"\t\t}",
				"\t\tsound.loop = true;",
				"",
				"\t\tsounds.push( sound );",
				"",
				"\t}",
				"",
				"\tmanager.addTrack( name, sounds );",
				"",
				"}",
				"",
				"resources.set( 'audio-manager', manager );"
			]
		],
		[
			"Scene",
			[
				"var scene = new THREE.Scene();",
				"",
				"resources.set( 'scene', scene );"
			]
		],
		[
			"Camera",
			[
				"var scene = resources.get( 'scene' );",
				"",
				"var camera = new THREE.PerspectiveCamera( 60, window.innerWidth / window.innerHeight, .01, 100000 );",
				"var group = new THREE.Group();",
				"group.position.set( 0, 0, 0 );",
				"",
				"group.add( camera );",
				"scene.add( group );",
				"",
				"resources.set( 'camera', camera );"
			]
		],
		[
			"Renderer",
			[
				"var camera = resources.get( 'camera' );",
				"",
				"var renderer = new THREE.WebGLRenderer( { antialias: true, preserveDrawingBuffer: true } );",
				"renderer.setClearColor( 0xBBBBBB, 1 );",
				"renderer.setPixelRatio( window.devicePixelRatio );",
				"renderer.setSize( window.innerWidth, window.innerHeight );",
				"",
				"var domElement = resources.get( 'dom' );",
				"domElement.appendChild( renderer.domElement );",
				"",
				"renderer.vr.enabled = true;",
				"domElement.appendChild( WEBVR.createButton( renderer ) );",
				"",
				"resize();",
				"window.addEventListener( 'resize', resize, false );",
				"",
				"function resize() {",
				"",
				"\tvar rect = domElement.getBoundingClientRect();",
				"\tvar width = rect.width;",
				"\tvar height = rect.height;",
				"",
				"\tcamera.aspect = width / height;",
				"\tcamera.updateProjectionMatrix();",
				"\trenderer.setSize( width, height );",
				"",
				"\t// TODO: Calculate the fov based on",
				"\t// the aspect ratio to ensure that",
				"\t// some amount of \"left\" and \"right\"",
				"\t// faces are visible. This allows",
				"\t// the user to navigate to different",
				"\t// sections of the song.",
				"",
				"}",
				"",
				"resources.set( 'renderer', renderer );"
			]
		],
		[
			"Interaction",
			[
				"var camera = resources.get( 'camera' );",
				"var renderer = resources.get( 'renderer' );",
				"",
				"var interaction = new Interaction( renderer, camera );",
				"interaction.connect();",
				"",
				"resources.set( 'interaction', interaction );"
			]
		]
	],
	"effects": [
		[
			"Initialize Audio",
			[
				"var manager = resources.get( 'audio-manager' );",
				"",
				"player.onplay = function() {",
				"\tmanager.start( 1 );",
				"};",
				"",
				"player.onpause = function() {",
				"\tmanager.stop();",
				"};",
				"",
				"function start ( progress ) {",
				"}",
				"",
				"function end( progress ) {",
				"}",
				"",
				"function update( progress ) {",
				"\tmanager.update();",
				"}"
			]
		],
		[
			"Render",
			[
				"var renderer = resources.get( 'renderer' );",
				"var interaction = resources.get( 'interaction' );",
				"var camera = resources.get( 'camera' );",
				"var scene = resources.get( 'scene' );",
				"",
				"function start( progress ){}",
				"",
				"function end( progress ){}",
				"",
				"function update( progress ) {",
				"",
				"\tTWEEN.update();",
				"\tTHREE.VRController.update();",
				"\tinteraction.update();",
				"\trenderer.render( scene, camera );",
				"",
				"}"
			]
		],
		[
			"Set Loop Verse 1",
			[
				"var manager = resources.get( 'audio-manager' );",
				"var navigation = resources.get( 'navigation' );",
				"var drag = 0.125;",
				"",
				"var section = 0;",
				"var startTime = 0;",
				"var endTime = 10;",
				"var rotation = new THREE.Euler( 0, 0, 0 );",
				"",
				"function start ( progress ) {",
				"",
				"\tplayer.setLoop([ startTime, endTime ]);",
				"",
				"\tfor ( var i = 0; i < navigation.children.length; i++ ) {",
				"\t\tvar child = navigation.children[ i ];",
				"\t\tchild.visible = child.userData.section !== section;",
				"\t}",
				"",
				"}",
				"",
				"function end( progress ){}",
				"",
				"function update( progress ) {",
				"",
				"\tvar sectionPlaying = manager.section;",
				"",
				"\tif ( section !== sectionPlaying ) {",
				"\t\tplayer.setLoop([ sectionPlaying * 10, ( sectionPlaying + 1 ) * 10 ]);",
				"\t\tplayer.currentTime = sectionPlaying * 10;",
				"\t}",
				"",
				"\tnavigation.rotation.x += ( rotation.x - navigation.rotation.x ) * drag;",
				"\tnavigation.rotation.y += ( rotation.y - navigation.rotation.y ) * drag;",
				"\tnavigation.rotation.z += ( rotation.z - navigation.rotation.z ) * drag;",
				"",
				"}"
			]
		],
		[
			"Faces on a Cube",
			[
				"var scene = resources.get( 'scene' );",
				"var manager = resources.get( 'audio-manager' );",
				"var interaction = resources.get( 'interaction' );",
				"",
				"var plane, geometry, material;",
				"var sections = 0;",
				"var group = new THREE.Group();",
				"var distance = 50;",
				"",
				"resources.set( 'navigation', group );",
				"",
				"geometry = new THREE.PlaneBufferGeometry(",
				"\tdistance * 0.975,\t// Width",
				"\tdistance * 0.975\t// Height",
				");",
				"",
				"// Front",
				"plane = createPlane( 'red' );",
				"plane.position.z = - distance / 2;",
				"group.userData.front = plane;",
				"",
				"// Left",
				"plane = createPlane( 'yellow' );",
				"plane.position.x = - distance / 2;",
				"plane.rotation.y = Math.PI / 2;",
				"group.userData.left = plane;",
				"",
				"// Right",
				"plane = createPlane( 'blue' );",
				"plane.position.x = distance / 2;",
				"plane.rotation.y = - Math.PI / 2;",
				"group.userData.right = plane;",
				"",
				"// Top",
				"plane = createPlane( 'purple' );",
				"plane.position.y = distance / 2;",
				"plane.rotation.x = Math.PI / 2;",
				"group.userData.top = plane;",
				"",
				"// Bottom",
				"plane = createPlane( 'orange' );",
				"plane.position.y = - distance / 2;",
				"plane.rotation.x = - Math.PI / 2;",
				"group.userData.bottom = plane;",
				"",
				"// Back",
				"plane = createPlane( 'green' );",
				"plane.position.z = distance / 2;",
				"plane.rotation.y = Math.PI;",
				"group.userData.back = plane;",
				"",
				"function start( progress ) {",
				"\tscene.add( group );",
				"}",
				"",
				"function end( progress ) {",
				"\tscene.remove( group );",
				"}",
				"",
				"function update( progress ){}",
				"",
				"function createPlane ( color ) {",
				"",
				"\tvar material = new THREE.MeshBasicMaterial( {",
				"\t\tcolor: color,",
				"\t\t// wireframe: true,",
				"\t\topacity: 0.5,",
				"\t\ttransparent: true",
				"\t} );",
				"",
				"\tvar plane = new THREE.Mesh( geometry, material );",
				"\tgroup.add( plane );",
				"\t",
				"\tplane.userData.section = sections++;",
				"\tplane.userData.tweens = {",
				"\t\topacity: new TWEEN.Tween( plane.material )",
				"\t\t\t.easing( TWEEN.Easing.Sinusoidal.InOut )",
				"\t};",
				"\tinteraction.listen( plane );",
				"\t",
				"\tplane.addEventListener( 'over', over );",
				"\tplane.addEventListener( 'out', out );",
				"\tplane.addEventListener( 'primary-down', select );",
				"",
				"\treturn plane;",
				"",
				"}",
				"",
				"function over () {",
				"\tthis.userData.tweens.opacity",
				"\t\t.to( { opacity: 1 }, 500 )",
				"\t\t.start();",
				"}",
				"",
				"function out() {",
				"\tthis.userData.tweens.opacity",
				"\t\t.to( { opacity: 0.5 }, 500 )",
				"\t\t.start();",
				"}",
				"",
				"function select () {",
				"\tvar section = this.userData.section;",
				"\tmanager.transition( section );",
				"}"
			]
		],
		[
			"Set Loop Verse 2",
			[
				"var manager = resources.get( 'audio-manager' );",
				"var navigation = resources.get( 'navigation' );",
				"var drag = 0.125;",
				"",
				"var section = 1;",
				"var startTime = 10;",
				"var endTime = 20;",
				"var rotation = new THREE.Euler( 0, - Math.PI / 2, 0 );",
				"",
				"function start ( progress ) {",
				"",
				"\tplayer.setLoop([ startTime, endTime ]);",
				"",
				"\tfor ( var i = 0; i < navigation.children.length; i++ ) {",
				"\t\tvar child = navigation.children[ i ];",
				"\t\tchild.visible = child.userData.section !== section;",
				"\t}",
				"",
				"}",
				"",
				"function end( progress ){}",
				"",
				"function update( progress ) {",
				"",
				"\tvar sectionPlaying = manager.section;",
				"",
				"\tif ( section !== sectionPlaying ) {",
				"\t\tplayer.setLoop([ sectionPlaying * 10, ( sectionPlaying + 1 ) * 10 ]);",
				"\t\tplayer.currentTime = sectionPlaying * 10;",
				"\t}",
				"",
				"\tnavigation.rotation.x += ( rotation.x - navigation.rotation.x ) * drag;",
				"\tnavigation.rotation.y += ( rotation.y - navigation.rotation.y ) * drag;",
				"\tnavigation.rotation.z += ( rotation.z - navigation.rotation.z ) * drag;",
				"",
				"}"
			]
		],
		[
			"Effect",
			[
				"var parameters = {",
				"\tvalue: new FRAME.Parameters.Float( 'Value', 1.0 )",
				"};",
				"",
				"function start( progress ){}",
				"",
				"function end( progress ){}",
				"",
				"function update( progress ){}"
			]
		]
	],
	"animations": [
		[
			"AudioManager",
			0,
			60,
			0,
			0,
			true
		],
		[
			"Transition Mechanism",
			0,
			60,
			1,
			3,
			true
		],
		[
			"Stage 1",
			0,
			10,
			2,
			2,
			true
		],
		[
			"Update Video",
			0,
			60,
			4,
			1,
			true
		],
		[
			"Stage 2",
			10,
			20,
			3,
			4,
			true
		],
		[
			"Stage 3",
			20,
			29,
			2,
			5,
			true
		]
	]
}
