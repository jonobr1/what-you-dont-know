{
	"config": {},
	"libraries": [
		"../release/third-party/WebAudio.js",
		"../release/third-party/three.js",
		"../release/third-party/vr-controller.js",
		"../release/third-party/WebVR.js",
		"../release/third-party/tween.js",
		"../release/src/audio-manager.js",
		"../release/src/interaction.js"
	],
	"includes": [
		[
			"AudioManager",
			[
				"var tracks = [",
				"\t'vocals', 'machine-drum', 'instrumental',",
				"\t'melody', 'blips', 'sub-tone', 'sfx',",
				"\t'summation'",
				"];",
				"",
				"/**",
				" * An array describing what audio clips exist for",
				" * each track at every section of the \"song\". `false`",
				" * means there isn't a clip available for that section.",
				" * `true` means there is a clip available and its",
				" * filename corresponds to the sections array. Finally,",
				" * a String represents the exact base filename to be",
				" * used to select the specific clip.",
				" */",
				"tracks.data = {",
				"\t'vocals': [",
				"\t\ttrue, true, true, true, true, true ],",
				"\t'machine-drum': [",
				"\t\ttrue, true, true, 'chorus', 'breakdown', true ],",
				"\t'instrumental': [",
				"\t\ttrue, true, true, 'chorus', 'breakdown', true ],",
				"\t'melody': [",
				"\t\ttrue, true, true, 'chorus', 'breakdown', true ],",
				"\t'blips': [",
				"\t\tfalse, false, true, true, true, false ],",
				"\t'sub-tone': [",
				"\t\ttrue, true, true, 'chorus', 'breakdown', true ],",
				"\t'sfx': [",
				"\t\tfalse, false, true, true, true, true ],",
				"\t'summation': [",
				"\t\ttrue, true, true, 'chorus', 'breakdown', true ]",
				"};",
				"",
				"var sections = [",
				"\t'verse-1', 'verse-2', 'chorus',",
				"\t'verse-3', 'verse-4', 'breakdown'",
				"];",
				"",
				"sections.data = {};",
				"",
				"var manager = new AudioManager();",
				"",
				"var ua = navigator.userAgent;",
				"var isSafari = !!ua.match( /Safari/ig ) && ( !ua.match( /Chrome/ig ) || !!ua.match( /Edge/ig ) );",
				"var ctx = WebAudio.getContext();",
				"var extension = isSafari ? 'mp3' : 'ogg';",
				"",
				"for ( var name in tracks.data ) {",
				"",
				"\tvar clips = tracks.data[ name ];",
				"\tvar sounds = []",
				"",
				"\tfor ( var i = 0; i < clips.length; i++ ) {",
				"",
				"\t\tvar section = clips[ i ];",
				"",
				"\t\tif ( section === true ) {",
				"\t\t\tsection = sections[ i ];",
				"\t\t}",
				"",
				"\t\tvar url = '../assets/v1/' + section + '-' + name + '.' + extension;",
				"\t\tvar sound = new WebAudio();",
				"\t\tif ( section ) {",
				"\t\t\tsound.onLoad = resources.queue();",
				"\t\t\tsound.src = url;",
				"\t\t}",
				"\t\t// Encforce a specific loop schedule",
				"\t\tsound.loopEnd = manager.getDuration();",
				"\t\tsound.loop = true;",
				"",
				"\t\tsounds.push( sound );",
				"",
				"\t}",
				"",
				"\tmanager.addTrack( name, sounds );",
				"",
				"}",
				"",
				"resources.set( 'audio-manager', manager );"
			]
		],
		[
			"Scene",
			[
				"var scene = new THREE.Scene();",
				"",
				"var ambient = new THREE.HemisphereLight( 0xFEFCFF, 0xB0ADAA, 0.9 );",
				"scene.add( ambient );",
				"",
				"var light = new THREE.DirectionalLight( 0xFFFFFF, 0.35 );",
				"light.position.set( 2.5, 5.0, 2.5 );",
				"light.castShadow = true;",
				"light.shadow.radius = 10;",
				"scene.add( light );",
				"",
				"resources.set( 'scene', scene );"
			]
		],
		[
			"Camera",
			[
				"var scene = resources.get( 'scene' );",
				"",
				"var camera = new THREE.PerspectiveCamera( 60, window.innerWidth / window.innerHeight, .01, 100000 );",
				"var group = new THREE.Group();",
				"group.position.set( 0, 0, 0 );",
				"",
				"group.add( camera );",
				"scene.add( group );",
				"",
				"resources.set( 'camera', camera );"
			]
		],
		[
			"Renderer",
			[
				"var camera = resources.get( 'camera' );",
				"",
				"var renderer = new THREE.WebGLRenderer( { antialias: true, preserveDrawingBuffer: true } );",
				"renderer.setClearColor( 0xf0c8c8, 1 );",
				"renderer.setPixelRatio( window.devicePixelRatio );",
				"",
				"var domElement = resources.get( 'dom' );",
				"domElement.appendChild( renderer.domElement );",
				"",
				"renderer.vr.enabled = true;",
				"domElement.appendChild( WEBVR.createButton( renderer ) );",
				"",
				"resize();",
				"window.addEventListener( 'resize', resize, false );",
				"",
				"function resize() {",
				"",
				"\tvar rect = domElement.getBoundingClientRect();",
				"\tvar width = rect.width;",
				"\tvar height = rect.height;",
				"",
				"\tcamera.aspect = width / height;",
				"",
				"\t// Calculate the fov based on",
				"\t// the aspect ratio to ensure that",
				"\t// some amount of \"left\" and \"right\"",
				"\t// faces are visible. This allows",
				"\t// the user to navigate to different",
				"\t// sections of the song.",
				"\tvar a = Math.pow( width / height, 3 );",
				"\tvar b = height / width;",
				"\tvar variance = 1 - Math.min( a, b );",
				"\tcamera.fov = 40 * variance + 60;",
				"",
				"\tcamera.updateProjectionMatrix();",
				"\trenderer.setSize( width, height );",
				"",
				"}",
				"",
				"resources.set( 'renderer', renderer );"
			]
		],
		[
			"Interaction",
			[
				"var camera = resources.get( 'camera' );",
				"var renderer = resources.get( 'renderer' );",
				"",
				"var interaction = new Interaction( renderer, camera );",
				"interaction.connect();",
				"",
				"resources.set( 'interaction', interaction );"
			]
		],
		[
			"Face",
			[
				"var Face = function( width, height ) {",
				"",
				"  THREE.Mesh.call( this, Face.Geometry, Face.Material.clone() );",
				"",
				"  if ( !width ) {",
				"\twidth = 10;",
				"  }",
				"",
				"  if ( !height ) {",
				"\theight = width;",
				"  }",
				"",
				"  this.scale.set( width, height, 1 );",
				"",
				"};",
				"",
				"Face.prototype = Object.create( THREE.Mesh.prototype );",
				"",
				"Face.Geometry = new THREE.PlaneBufferGeometry( 1, 1 );",
				"Face.Material = new THREE.ShaderMaterial( {",
				"",
				"  transparent: true,",
				"  // blending: THREE.AdditiveBlending,",
				"",
				"  uniforms: {",
				"\topacity: { type: 'f', value: 1 },",
				"\tportion: { type: 'f', value: 0 },",
				"\tcolor: { type: 'c', value: new THREE.Color( 0xffffff ) },",
				"\tlinewidth: { type: 'f', value: 0.5 }",
				"  },",
				"",
				"  vertexShader: [",
				"",
				"\t\"varying vec2 vUv;\",",
				"",
				"\t\"void main() {\",",
				"",
				"\t  \"vUv = uv;\",",
				"\t  \"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",",
				"",
				"\t\"}\"",
				"",
				"  ].join( '\\n' ),",
				"",
				"  fragmentShader: [",
				"",
				"\t\"const float PI = 3.141592653589793;\",",
				"\t\"const float amount = 20.0;\",",
				"",
				"\t\"uniform float opacity;\",",
				"\t\"uniform float portion;\",",
				"\t\"uniform vec3 color;\",",
				"\t\"uniform float linewidth;\",",
				"",
				"\t\"varying vec2 vUv;\",",
				"",
				"\t\"float easing( in float k ) {\",",
				"\t  \"return 0.5 * ( 1.0 - cos( PI * k ) );\",",
				"\t\"}\",",
				"",
				"\t\"float line( in float x, in float axis, in float linewidth ) {\",",
				"",
				"\t  \"x *= ( 1.0 - linewidth );\",",
				"\t  \"x += linewidth / 2.0;\",",
				"",
				"\t  \"float t = 1.0 - distance( x, axis );\",",
				"\t  \"t = step( t, 1.0 - linewidth );\",",
				"\t  \"t = 1.0 - t;\",",
				"",
				"\t  \"return t;\",",
				"",
				"\t\"}\",",
				"",
				"\t\"void main() {\",",
				"",
				"\t  \"vec2 uv = vUv;\",",
				"\t  \"float width = linewidth * 0.0025;\",",
				"",
				"\t  \"float f = 0.0;\",",
				"",
				"\t  \"for ( float i = 0.0; i < amount; i ++ ) {\",",
				"",
				"\t\t\"float pct = i / ( amount - 1.0 );\",",
				"\t\t\"float pos = 1.0 - pow( 1.0 - pow( portion, 1.0 ), 8.0 * pct );\",",
				"",
				"\t\t\"f += line( pct, uv.x, width );\",",
				"\t\t\"f += line( pos, uv.y, width );\",",
				"",
				"\t  \"}\",",
				"",
				"\t  \"f += line( 1.0, uv.y, width );\",",
				"",
				"\t  \"gl_FragColor = vec4( color.rgb, clamp( f, 0.0, 1.0 ) * opacity );\",",
				"",
				"\t\"}\"",
				"",
				"  ].join( '\\n' )",
				"",
				"} );",
				"",
				"resources.set( 'Face', Face );"
			]
		],
		[
			"Assets",
			[
				"function load( url ) {",
				"",
				"\tvar img = document.createElement( 'img' );",
				"\timg.src = url;",
				"\treturn img;",
				"",
				"}",
				"",
				"resources.set( 'assets/images/matcap', load( '../assets/textures/matcap.jpg' ) );",
				"resources.set( 'assets/images/noise1', load( '../assets/textures/noise.png' ) );",
				"resources.set( 'assets/images/noise2', load( '../assets/textures/noise2.png' ) );"
			]
		],
		[
			"Geometries",
			[
				"/**",
				" * A collection of project specific geometries.",
				" */",
				"var geometries = [",
				"\tnew THREE.BoxBufferGeometry(),",
				"\tnew THREE.BoxBufferGeometry( 1, 0.1, 0.1 ),",
				"\tnew THREE.CylinderBufferGeometry( 0.1, 0.1, 1 ),",
				"\tnew THREE.CylinderBufferGeometry( 0, 0.5, 1, 32 ),",
				"\tnew THREE.CylinderBufferGeometry( 0, 0.5, 1, 4 ),",
				"\tnew THREE.SphereBufferGeometry( 0.5, 32, 32 )",
				"];",
				"",
				"resources.set( 'geometries', geometries );"
			]
		],
		[
			"Materials",
			[
				"var roughness = new THREE.Texture( resources.get( 'assets/images/noise2' ) );",
				"roughness.anisotropy = 16;",
				"if ( roughness.image.complete ) {",
				"\troughness.needsUpdate = true;",
				"} else {",
				"\ttexture.image.addEventListener( 'load', onLoad( roughness ), false );",
				"}",
				"",
				"var metalness = new THREE.Texture( resources.get( 'assets/images/noise1' ) );",
				"metalness.anisotropy = 16;",
				"if ( metalness.image.complete ) {",
				"\tmetalness.needsUpdate = true;",
				"} else {",
				"\ttexture.image.addEventListener( 'load', onLoad( metalness ), false );",
				"}",
				"",
				"var enironment = new THREE.Texture( resources.get( 'assets/images/matcap' ) );",
				"enironment.mapping = THREE.SphericalReflectionMapping;",
				"if ( enironment.image.complete ) {",
				"\tenironment.needsUpdate = true;",
				"} else {",
				"\ttexture.image.addEventListener( 'load', onLoad( enironment ), false );",
				"}",
				"",
				"function onLoad ( texture ) {",
				"\treturn function () {",
				"\t\ttexture.needsUpdate = true;",
				"\t};",
				"}",
				"",
				"/**",
				" * A collection of project specific geometries.",
				" */",
				"",
				"var materials = [",
				"\tnew THREE.MeshStandardMaterial( {",
				"\t\tcolor: 0x1982C4,",
				"\t\troughness: 1.0,",
				"\t\tmetalness: 1.0,",
				"\t\troughnessMap: roughness,",
				"\t\tmetalnessMap: metalness,",
				"\t\tenvMap: enironment",
				"\t} ),",
				"\tnew THREE.MeshStandardMaterial( {",
				"\t\tcolor: 0x1E5782,",
				"\t\troughness: 1.0,",
				"\t\tmetalness: 1.0,",
				"\t\troughnessMap: roughness,",
				"\t\tmetalnessMap: metalness,",
				"\t\tenvMap: enironment",
				"\t} ),",
				"\tnew THREE.MeshStandardMaterial( {",
				"\t\tcolor: 0xD0A1AA,",
				"\t\troughness: 1.0,",
				"\t\tmetalness: 1.0,",
				"\t\troughnessMap: roughness,",
				"\t\tmetalnessMap: metalness,",
				"\t\tenvMap: enironment",
				"\t} ),",
				"\tnew THREE.MeshStandardMaterial( {",
				"\t\tcolor: 0x77D0AE,",
				"\t\troughness: 1.0,",
				"\t\tmetalness: 1.0,",
				"\t\troughnessMap: roughness,",
				"\t\tmetalnessMap: metalness,",
				"\t\tenvMap: enironment",
				"\t} ),",
				"\tnew THREE.MeshStandardMaterial( {",
				"\t\tcolor: 0xA292A7,",
				"\t\troughness: 1.0,",
				"\t\tmetalness: 1.0,",
				"\t\troughnessMap: roughness,",
				"\t\tmetalnessMap: metalness,",
				"\t\tenvMap: enironment",
				"\t} ),",
				"\tnew THREE.MeshStandardMaterial( {",
				"\t\tcolor: 0xFFD800,",
				"\t\troughness: 1.0,",
				"\t\tmetalness: 1.0,",
				"\t\troughnessMap: roughness,",
				"\t\tmetalnessMap: metalness,",
				"\t\tenvMap: enironment",
				"\t} ),",
				"\tnew THREE.MeshBasicMaterial( {",
				"\t\tcolor: 0x000000,",
				"\t\twireframe: true",
				"\t} )",
				"];",
				"",
				"// Fill array based on desired weighting",
				"materials.push( materials[ 0 ] );",
				"materials.push( materials[ 1 ] );",
				"materials.push( materials[ 2 ] );",
				"materials.push( materials[ 3 ] );",
				"materials.push( materials[ 4 ] );",
				"materials.push( materials[ 5 ] );",
				"",
				"resources.set( 'materials', materials );"
			]
		]
	],
	"effects": [
		[
			"Initialize Audio",
			[
				"var manager = resources.get( 'audio-manager' );",
				"",
				"player.onplay = function() {",
				"\tmanager.start( 1 );",
				"};",
				"",
				"player.onpause = function() {",
				"\tmanager.stop();",
				"};",
				"",
				"function start ( progress ) {",
				"}",
				"",
				"function end( progress ) {",
				"}",
				"",
				"function update( progress ) {",
				"\tmanager.update();",
				"}"
			]
		],
		[
			"Render",
			[
				"var renderer = resources.get( 'renderer' );",
				"var interaction = resources.get( 'interaction' );",
				"var camera = resources.get( 'camera' );",
				"var scene = resources.get( 'scene' );",
				"",
				"function start( progress ){}",
				"",
				"function end( progress ){}",
				"",
				"function update( progress ) {",
				"",
				"\tTWEEN.update();",
				"\tTHREE.VRController.update();",
				"\tinteraction.update();",
				"\trenderer.render( scene, camera );",
				"",
				"}"
			]
		],
		[
			"Set Loop Verse 1",
			[
				"var manager = resources.get( 'audio-manager' );",
				"var interaction = resources.get( 'interaction' );",
				"var navigation = resources.get( 'navigation' );",
				"var drag = 0.125;",
				"",
				"var section = 0;",
				"var startTime = 0;",
				"var endTime = 10;",
				"var rotation = new THREE.Euler( 0, 0, 0 );",
				"var quaternion = new THREE.Quaternion().setFromEuler( rotation );",
				"",
				"function start ( progress ) {",
				"",
				"\tplayer.setLoop([ startTime, endTime ]);",
				"",
				"\tfor ( var i = 0; i < navigation.children.length; i++ ) {",
				"",
				"\t\tvar child = navigation.children[ i ];",
				"",
				"\t\tif ( child.userData.section === section ) {",
				"",
				"\t\t\tinteraction.ignore( child );",
				"\t\t\tchild.userData.searchable = false;",
				"\t\t\tchild.userData.tweens.linewidth",
				"\t\t\t\t.to( { value: 0 }, 10000 )",
				"\t\t\t\t.start();",
				"",
				"\t\t} else if ( !child.userData.searchable ) {",
				"",
				"\t\t\tinteraction.listen( child );",
				"\t\t\tchild.userData.searchable = true;",
				"\t\t\tchild.visible = true;",
				"\t\t\tchild.userData.tweens.linewidth",
				"\t\t\t\t.to( { value: 1 }, 500 )",
				"\t\t\t\t.start();",
				"",
				"\t\t}",
				"",
				"\t}",
				"",
				"}",
				"",
				"function end( progress ){}",
				"",
				"function update( progress, delta ) {",
				"",
				"\tvar sectionPlaying = manager.section;",
				"",
				"\tif ( section !== sectionPlaying ) {",
				"\t\tplayer.setLoop( null );",
				"\t\tplayer.currentTime = sectionPlaying * 10;",
				"\t}",
				"",
				"\tif ( !navigation.quaternion.equals( quaternion ) ) {",
				"\t\tnavigation.quaternion.slerp( quaternion, drag );",
				"\t}",
				"",
				"\tvar child = navigation.children[ section ];",
				"\tif ( child.visible && child.material.uniforms.linewidth.value <= 0 ) {",
				"\t\tchild.visible = false;",
				"\t}",
				"",
				"}"
			]
		],
		[
			"Faces on a Cube",
			[
				"var Face = resources.get( 'Face' );",
				"var scene = resources.get( 'scene' );",
				"var manager = resources.get( 'audio-manager' );",
				"var interaction = resources.get( 'interaction' );",
				"",
				"var plane, geometry, material;",
				"var sections = 0;",
				"var group = new THREE.Group();",
				"var distance = 50;",
				"var portion = { value: 0 };",
				"var white = new THREE.Color( 0xffffff );",
				"",
				"resources.set( 'navigation', group );",
				"",
				"// Front",
				"plane = createPlane( '#777777' );",
				"plane.position.z = - distance / 2;",
				"group.userData.front = plane;",
				"",
				"// Left",
				"plane = createPlane( '#1E5782' );",
				"plane.position.x = - distance / 2;",
				"plane.rotation.y = Math.PI / 2;",
				"group.userData.left = plane;",
				"",
				"// Back",
				"plane = createPlane( '#77D0AE' );",
				"plane.position.z = distance / 2;",
				"plane.rotation.y = Math.PI;",
				"group.userData.back = plane;",
				"",
				"// Right",
				"plane = createPlane( '#A292A7' );",
				"plane.position.x = distance / 2;",
				"plane.rotation.y = - Math.PI / 2;",
				"group.userData.right = plane;",
				"",
				"// Top",
				"plane = createPlane( '#FFD800' );",
				"plane.position.y = distance / 2;",
				"plane.rotation.x = Math.PI / 2;",
				"group.userData.top = plane;",
				"",
				"// Bottom",
				"plane = createPlane( '#1982C4' );",
				"plane.position.y = - distance / 2;",
				"plane.rotation.x = - Math.PI / 2;",
				"group.userData.bottom = plane;",
				"",
				"group.position.z = - distance * 0.25;",
				"",
				"function start( progress ) {",
				"\tscene.add( group );",
				"}",
				"",
				"function end( progress ) {",
				"\tscene.remove( group );",
				"}",
				"",
				"function update( progress ) {",
				"",
				"\tvar pct = manager.elapsedPercentageOfCurrentRep;",
				"\tvar offset = 0;",
				"",
				"\tportion.value = pct;",
				"",
				"}",
				"",
				"function createPlane ( color ) {",
				"",
				"\tvar plane = new Face( distance * 0.975, distance * 0.975 );",
				"\tgroup.add( plane );",
				"",
				"\tplane.rotation.order = 'ZYX';",
				"\tplane.material.uniforms.opacity.value = 1;",
				"\tplane.material.uniforms.portion = portion;",
				"",
				"\tplane.material.uniforms.color.value = new THREE.Color( 0xffffff );",
				"\tplane.material.uniforms.color.hue = new THREE.Color( color );",
				"\tplane.material.uniforms.color.destination = new THREE.Color();",
				"\tplane.material.uniforms.color.t = 0;",
				"",
				"\tplane.userData.section = sections++;",
				"\tplane.userData.tweens = {",
				"\t\tcolor: new TWEEN.Tween( plane.material.uniforms.color )",
				"\t\t\t.easing( TWEEN.Easing.Circular.InOut )",
				"\t\t\t.onUpdate( updateColor ),",
				"\t\topacity: new TWEEN.Tween( plane.material.uniforms.opacity )",
				"\t\t\t.easing( TWEEN.Easing.Sinusoidal.InOut ),",
				"\t\tlinewidth: new TWEEN.Tween( plane.material.uniforms.linewidth )",
				"\t\t\t.easing( TWEEN.Easing.Circular.InOut )",
				"\t};",
				"\tplane.userData.searchable = true;",
				"\tinteraction.listen( plane );",
				"\t",
				"\tplane.addEventListener( 'over', over );",
				"\tplane.addEventListener( 'out', out );",
				"\tplane.addEventListener( 'primary-down', select );",
				"",
				"\treturn plane;",
				"",
				"}",
				"",
				"function over () {",
				"\tthis.material.uniforms.color.t = 0;",
				"\tthis.material.uniforms.color.destination.set( this.material.uniforms.color.hue );",
				"\tthis.userData.tweens.color",
				"\t\t.to( { t: 1 }, 500 )",
				"\t\t.start();",
				"}",
				"",
				"function out() {",
				"\tthis.material.uniforms.color.t = 0;",
				"\tthis.material.uniforms.color.destination.set( white );",
				"\tthis.userData.tweens.color",
				"\t\t.to( { t: 1 }, 500 )",
				"\t\t.start();",
				"}",
				"",
				"function select () {",
				"",
				"\tvar section = this.userData.section;",
				"",
				"\tfor ( var i = 0; i < group.children.length; i++ ) {",
				"",
				"\t\tvar child = group.children[ i ];",
				"\t\tvar selected = child.userData.section === section;",
				"\t\tvar dest = {",
				"\t\t\tvalue: selected ? 2 : 1",
				"\t\t};",
				"",
				"\t\tif ( child.userData.section === section || child.userData.searchable ) {",
				"\t\t\tchild.userData.tweens.linewidth",
				"\t\t\t\t.to( dest, 500 )",
				"\t\t\t\t.start();",
				"\t\t}",
				"",
				"\t}",
				"",
				"\tmanager.transition( section );",
				"",
				"}",
				"",
				"function updateColor () {",
				"",
				"\tvar scope = this._object;",
				"\tvar color = scope.destination;",
				"\tvar t = scope.t;",
				"",
				"\tscope.value.lerp( color, t );",
				"",
				"}",
				"",
				"function resetColorNormal () {",
				"",
				"\tvar scope = this._object;",
				"\tscope.t = 0;",
				"",
				"}"
			]
		],
		[
			"Set Loop Verse 2",
			[
				"var manager = resources.get( 'audio-manager' );",
				"var interaction = resources.get( 'interaction' );",
				"var navigation = resources.get( 'navigation' );",
				"var drag = 0.125;",
				"",
				"var section = 1;",
				"var startTime = 10;",
				"var endTime = 20;",
				"var rotation = new THREE.Euler( 0, - Math.PI / 2, 0 );",
				"var quaternion = new THREE.Quaternion().setFromEuler( rotation );",
				"",
				"function start ( progress ) {",
				"",
				"\tplayer.setLoop([ startTime, endTime ]);",
				"",
				"\tfor ( var i = 0; i < navigation.children.length; i++ ) {",
				"",
				"\t\tvar child = navigation.children[ i ];",
				"",
				"\t\tif ( child.userData.section === section ) {",
				"",
				"\t\t\tinteraction.ignore( child );",
				"\t\t\tchild.userData.searchable = false;",
				"\t\t\tchild.userData.tweens.linewidth",
				"\t\t\t\t.to( { value: 0 }, 10000 )",
				"\t\t\t\t.start();",
				"",
				"\t\t} else if ( !child.userData.searchable ) {",
				"",
				"\t\t\tinteraction.listen( child );",
				"\t\t\tchild.userData.searchable = true;",
				"\t\t\tchild.visible = true;",
				"\t\t\tchild.userData.tweens.linewidth",
				"\t\t\t\t.to( { value: 1 }, 500 )",
				"\t\t\t\t.start();",
				"",
				"\t\t}",
				"",
				"\t}",
				"",
				"}",
				"",
				"function end( progress ){}",
				"",
				"function update( progress ) {",
				"",
				"\tvar sectionPlaying = manager.section;",
				"",
				"\tif ( section !== sectionPlaying ) {",
				"\t\tplayer.setLoop( null );",
				"\t\tplayer.currentTime = sectionPlaying * 10;",
				"\t}",
				"",
				"\tif ( !navigation.quaternion.equals( quaternion ) ) {",
				"\t\tnavigation.quaternion.slerp( quaternion, drag );",
				"\t}",
				"",
				"\tvar child = navigation.children[ section ];",
				"\tif ( child.visible && child.material.uniforms.linewidth.value <= 0 ) {",
				"\t\tchild.visible = false;",
				"\t}",
				"",
				"}"
			]
		],
		[
			"Set Loop Chorus",
			[
				"var manager = resources.get( 'audio-manager' );",
				"var interaction = resources.get( 'interaction' );",
				"var navigation = resources.get( 'navigation' );",
				"var drag = 0.125;",
				"",
				"var section = 2;",
				"var startTime = 20;",
				"var endTime = 30;",
				"var rotation = new THREE.Euler( 0, - Math.PI, 0 );",
				"var quaternion = new THREE.Quaternion().setFromEuler( rotation );",
				"",
				"function start ( progress ) {",
				"",
				"\tplayer.setLoop([ startTime, endTime ]);",
				"",
				"\tfor ( var i = 0; i < navigation.children.length; i++ ) {",
				"",
				"\t\tvar child = navigation.children[ i ];",
				"",
				"\t\tif ( child.userData.section === section ) {",
				"",
				"\t\t\tinteraction.ignore( child );",
				"\t\t\tchild.userData.searchable = false;",
				"\t\t\tchild.userData.tweens.linewidth",
				"\t\t\t\t.to( { value: 0 }, 10000 )",
				"\t\t\t\t.start();",
				"",
				"\t\t} else if ( !child.userData.searchable ) {",
				"",
				"\t\t\tinteraction.listen( child );",
				"\t\t\tchild.userData.searchable = true;",
				"\t\t\tchild.visible = true;",
				"\t\t\tchild.userData.tweens.linewidth",
				"\t\t\t\t.to( { value: 1 }, 500 )",
				"\t\t\t\t.start();",
				"",
				"\t\t}",
				"",
				"\t}",
				"",
				"}",
				"",
				"function end( progress ){}",
				"",
				"function update( progress ) {",
				"",
				"\tvar sectionPlaying = manager.section;",
				"",
				"\tif ( section !== sectionPlaying ) {",
				"\t\tplayer.setLoop( null );",
				"\t\tplayer.currentTime = sectionPlaying * 10;",
				"\t}",
				"",
				"\tif ( !navigation.quaternion.equals( quaternion ) ) {",
				"\t\tnavigation.quaternion.slerp( quaternion, drag );",
				"\t}",
				"",
				"\tvar child = navigation.children[ section ];",
				"\tif ( child.visible && child.material.uniforms.linewidth.value <= 0 ) {",
				"\t\tchild.visible = false;",
				"\t}",
				"",
				"}"
			]
		],
		[
			"Set Loop Verse 3",
			[
				"var manager = resources.get( 'audio-manager' );",
				"var interaction = resources.get( 'interaction' );",
				"var navigation = resources.get( 'navigation' );",
				"var drag = 0.125;",
				"",
				"var section = 3;",
				"var startTime = 30;",
				"var endTime = 40;",
				"var rotation = new THREE.Euler( 0, Math.PI / 2, 0 );",
				"var quaternion = new THREE.Quaternion().setFromEuler( rotation );",
				"",
				"function start ( progress ) {",
				"",
				"\tplayer.setLoop([ startTime, endTime ]);",
				"",
				"\tfor ( var i = 0; i < navigation.children.length; i++ ) {",
				"",
				"\t\tvar child = navigation.children[ i ];",
				"",
				"\t\tif ( child.userData.section === section ) {",
				"",
				"\t\t\tinteraction.ignore( child );",
				"\t\t\tchild.userData.searchable = false;",
				"\t\t\tchild.userData.tweens.linewidth",
				"\t\t\t\t.to( { value: 0 }, 10000 )",
				"\t\t\t\t.start();",
				"",
				"\t\t} else if ( !child.userData.searchable ) {",
				"",
				"\t\t\tinteraction.listen( child );",
				"\t\t\tchild.userData.searchable = true;",
				"\t\t\tchild.visible = true;",
				"\t\t\tchild.userData.tweens.linewidth",
				"\t\t\t\t.to( { value: 1 }, 500 )",
				"\t\t\t\t.start();",
				"",
				"\t\t}",
				"",
				"\t}",
				"",
				"}",
				"",
				"function end( progress ){}",
				"",
				"function update( progress ) {",
				"",
				"\tvar sectionPlaying = manager.section;",
				"",
				"\tif ( section !== sectionPlaying ) {",
				"\t\tplayer.setLoop( null );",
				"\t\tplayer.currentTime = sectionPlaying * 10;",
				"\t}",
				"",
				"\tif ( !navigation.quaternion.equals( quaternion ) ) {",
				"\t\tnavigation.quaternion.slerp( quaternion, drag );",
				"\t}",
				"",
				"\tvar child = navigation.children[ section ];",
				"\tif ( child.visible && child.material.uniforms.linewidth.value <= 0 ) {",
				"\t\tchild.visible = false;",
				"\t}",
				"",
				"}"
			]
		],
		[
			"Set Loop Verse 4",
			[
				"var manager = resources.get( 'audio-manager' );",
				"var interaction = resources.get( 'interaction' );",
				"var navigation = resources.get( 'navigation' );",
				"var drag = 0.125;",
				"",
				"var section = 4;",
				"var startTime = 40;",
				"var endTime = 50;",
				"var rotation = new THREE.Euler( - Math.PI / 2, 0, 0 );",
				"var quaternion = new THREE.Quaternion().setFromEuler( rotation );",
				"",
				"function start ( progress ) {",
				"",
				"\tplayer.setLoop([ startTime, endTime ]);",
				"",
				"\tfor ( var i = 0; i < navigation.children.length; i++ ) {",
				"",
				"\t\tvar child = navigation.children[ i ];",
				"",
				"\t\tif ( child.userData.section === section ) {",
				"",
				"\t\t\tinteraction.ignore( child );",
				"\t\t\tchild.userData.searchable = false;",
				"\t\t\tchild.userData.tweens.linewidth",
				"\t\t\t\t.to( { value: 0 }, 10000 )",
				"\t\t\t\t.start();",
				"",
				"\t\t} else if ( !child.userData.searchable ) {",
				"",
				"\t\t\tinteraction.listen( child );",
				"\t\t\tchild.userData.searchable = true;",
				"\t\t\tchild.visible = true;",
				"\t\t\tchild.userData.tweens.linewidth",
				"\t\t\t\t.to( { value: 1 }, 500 )",
				"\t\t\t\t.start();",
				"",
				"\t\t}",
				"",
				"\t}",
				"",
				"}",
				"",
				"function end( progress ){}",
				"",
				"function update( progress ) {",
				"",
				"\tvar sectionPlaying = manager.section;",
				"",
				"\tif ( section !== sectionPlaying ) {",
				"\t\tplayer.setLoop( null );",
				"\t\tplayer.currentTime = sectionPlaying * 10;",
				"\t}",
				"",
				"\tif ( !navigation.quaternion.equals( quaternion ) ) {",
				"\t\tnavigation.quaternion.slerp( quaternion, drag );",
				"\t}",
				"",
				"\tvar child = navigation.children[ section ];",
				"\tif ( child.visible && child.material.uniforms.linewidth.value <= 0 ) {",
				"\t\tchild.visible = false;",
				"\t}",
				"",
				"}"
			]
		],
		[
			"Set Loop Breakdown",
			[
				"var manager = resources.get( 'audio-manager' );",
				"var interaction = resources.get( 'interaction' );",
				"var navigation = resources.get( 'navigation' );",
				"var drag = 0.125;",
				"",
				"var section = 5;",
				"var startTime = 50;",
				"var endTime = 60;",
				"var rotation = new THREE.Euler( Math.PI / 2, 0, 0 );",
				"var quaternion = new THREE.Quaternion().setFromEuler( rotation );",
				"",
				"function start ( progress ) {",
				"",
				"\tplayer.setLoop([ startTime, endTime ]);",
				"",
				"\tfor ( var i = 0; i < navigation.children.length; i++ ) {",
				"",
				"\t\tvar child = navigation.children[ i ];",
				"",
				"\t\tif ( child.userData.section === section ) {",
				"",
				"\t\t\tinteraction.ignore( child );",
				"\t\t\tchild.userData.searchable = false;",
				"\t\t\tchild.userData.tweens.linewidth",
				"\t\t\t\t.to( { value: 0 }, 10000 )",
				"\t\t\t\t.start();",
				"",
				"\t\t} else if ( !child.userData.searchable ) {",
				"",
				"\t\t\tinteraction.listen( child );",
				"\t\t\tchild.userData.searchable = true;",
				"\t\t\tchild.visible = true;",
				"\t\t\tchild.userData.tweens.linewidth",
				"\t\t\t\t.to( { value: 1 }, 500 )",
				"\t\t\t\t.start();",
				"",
				"\t\t}",
				"",
				"\t}",
				"",
				"}",
				"",
				"function end( progress ){}",
				"",
				"function update( progress ) {",
				"",
				"\tvar sectionPlaying = manager.section;",
				"",
				"\tif ( section !== sectionPlaying ) {",
				"\t\tplayer.setLoop( null );",
				"\t\tplayer.currentTime = sectionPlaying * 10;",
				"\t}",
				"",
				"\tif ( !navigation.quaternion.equals( quaternion ) ) {",
				"\t\tnavigation.quaternion.slerp( quaternion, drag );",
				"\t}",
				"",
				"\tvar child = navigation.children[ section ];",
				"\tif ( child.visible && child.material.uniforms.linewidth.value <= 0 ) {",
				"\t\tchild.visible = false;",
				"\t}",
				"",
				"}"
			]
		],
		[
			"Audio Reactive Objects on a Circle",
			[
				"var scene = resources.get( 'scene' );",
				"var manager = resources.get( 'audio-manager' );",
				"var navigation = resources.get( 'navigation' );",
				"var geometries = resources.get( 'geometries' );",
				"var materials = resources.get( 'materials' );",
				"",
				"var amount = 128;",
				"var radius = 250;",
				"var group = new THREE.Group();",
				"",
				"var vector = new THREE.Vector3();",
				"",
				"for ( var i = 0; i < amount; i++ ) {",
				"",
				"\tvar pct = i / ( amount - 1 );",
				"",
				"\tvar geometry = geometries[ i % geometries.length ];",
				"\tvar material = materials[ i % materials.length ];",
				"\tvar mesh = new THREE.Mesh( geometry, material );",
				"",
				"\tvar theta = ( pct + 0.2 * ( Math.random() - 0.5 ) ) * Math.PI * 2;",
				"",
				"\tmesh.userData.scale = Math.floor( Math.random() * 33 ) + 10;",
				"\tmesh.userData.track = Math.floor( Math.random() * manager.tracks.length );",
				"\tmesh.userData.bandwidth = Math.floor( Math.random() * AudioManager.fftSize / 2 );",
				"",
				"\tmesh.scale.setScalar( mesh.userData.scale );",
				"",
				"\tmesh.rotation.x = Math.random() * Math.PI * 2;",
				"\tmesh.rotation.y = Math.random() * Math.PI * 2;",
				"\tmesh.rotation.z = Math.random() * Math.PI * 2;",
				"",
				"\tvar r = radius + Math.random() * 50 - 25;",
				"\tvar x = r * Math.cos( theta );",
				"\tvar y = r * Math.sin( Math.random() * Math.PI * 2 ) / 10;",
				"\tvar z = r * Math.sin( theta );",
				"",
				"\tmesh.position.x = x;",
				"\tmesh.position.y = y;",
				"\tmesh.position.z = z;",
				"\t",
				"\tmesh.userData.velocity = new THREE.Euler();",
				"\tmesh.userData.velocity.x = 0.025 * ( Math.random() - 0.5 );",
				"\tmesh.userData.velocity.y = 0.025 * ( Math.random() - 0.5 );",
				"\tmesh.userData.velocity.z = 0.025 * ( Math.random() - 0.5 );",
				"",
				"\tmesh.userData.variance = new THREE.Vector3();",
				"\tmesh.userData.variance.x = mesh.userData.scale * Math.random();",
				"\tmesh.userData.variance.y = mesh.userData.scale * Math.random();",
				"\tmesh.userData.variance.z = mesh.userData.scale * Math.random();",
				"",
				"\tmesh.castShadow = true;",
				"\tmesh.receiveShadow = true;",
				"",
				"\tgroup.add( mesh );",
				"",
				"}",
				"",
				"group.rotation.z = Math.PI / 16;",
				"",
				"function start( progress ) {",
				"\tscene.add( group );",
				"}",
				"",
				"function end( progress ) {",
				"\tscene.remove( group );",
				"}",
				"",
				"function update( progress ) {",
				"",
				"\tgroup.rotation.y += 0.0005;",
				"",
				"\tfor ( var i = 0; i < group.children.length; i++ ) {",
				"",
				"\t\tvar child = group.children[ i ];",
				"",
				"\t\tchild.rotation.x += child.userData.velocity.x;",
				"\t\tchild.rotation.y += child.userData.velocity.y;",
				"\t\tchild.rotation.z += child.userData.velocity.z;",
				"",
				"\t\tif ( manager.isPlaying ) {",
				"",
				"\t\t\tvar track = manager.tracks[ child.userData.track ];",
				"\t\t\tvar analyser = track.analyser;",
				"\t\t\tvar fft = analyser.data[ child.userData.bandwidth ] / 255;",
				"",
				"\t\t\tvector.copy( child.userData.variance ).multiplyScalar( fft );",
				"\t\t\tvector.addScalar( child.userData.scale );",
				"",
				"\t\t\tchild.scale.copy( vector );",
				"",
				"\t\t}",
				"",
				"\t}",
				"",
				"}"
			]
		]
	],
	"animations": [
		[
			"AudioManager",
			0,
			60,
			0,
			0,
			true
		],
		[
			"Transition Mechanism",
			0,
			60,
			1,
			3,
			true
		],
		[
			"Stage 1",
			0,
			10,
			2,
			2,
			true
		],
		[
			"Asteroid Belt",
			0,
			60,
			4,
			9,
			true
		],
		[
			"Update Video",
			0,
			60,
			5,
			1,
			true
		],
		[
			"Stage 2",
			10,
			20,
			3,
			4,
			true
		],
		[
			"Stage 3",
			20,
			30,
			2,
			5,
			true
		],
		[
			"Stage 4",
			30,
			40,
			3,
			6,
			true
		],
		[
			"Stage 5",
			40,
			50,
			2,
			7,
			true
		],
		[
			"Stage 6",
			50,
			60,
			3,
			8,
			true
		]
	]
}
