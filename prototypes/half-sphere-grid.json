{
	"config": {},
	"libraries": [
		"../release/third-party/WebAudio.js",
		"../prototypes/js/three.js",
		"../prototypes/js/VRController.js",
		"../prototypes/js/WebVR.js",
		"../release/third-party/FBXLoader.js",
		"../release/third-party/tween.js"
	],
	"includes": [
		[
			"setup",
			[
				"var renderer = new THREE.WebGLRenderer();",
				"var scene = new THREE.Scene();",
				"var camera = new THREE.PerspectiveCamera( 75 );",
				"(new THREE.Group()).add( camera );",
				"",
				"camera.near = 0.1;",
				"camera.far = 10000;",
				"",
				"var domElement = resources.get( 'dom' );",
				"var controller = new THREE.VRController();",
				"",
				"controller.position.set( 0.25, 0.75, 0 );",
				"controller.userData.raycaster = new THREE.Raycaster();",
				"",
				"var cursor = new THREE.Mesh(",
				"\tnew THREE.CylinderBufferGeometry( 0, 0.25, 10, 3, 1 ),",
				"\tnew THREE.MeshBasicMaterial({",
				"\t\tcolor: 'red',",
				"\t\ttransparent: true,",
				"\t\topacity: 0.5,",
				"\t\tblending: THREE.AdditiveBlending",
				"\t})",
				");",
				"",
				"cursor.rotation.x = - Math.PI / 2;",
				"cursor.position.z = - 5;",
				"",
				"controller.add( cursor );",
				"scene.add( controller );",
				"scene.add( camera.parent );",
				"",
				"controller.connect( renderer.domElement );",
				"",
				"renderer.vr.enabled = true;",
				"window.addEventListener( 'resize', resize, false );",
				"resize();",
				"",
				"domElement.appendChild( renderer.domElement );",
				"domElement.appendChild( WEBVR.createButton( renderer ) );",
				"",
				"var loader = new THREE.FBXLoader();",
				"",
				"resources.set( 'renderer', renderer );",
				"resources.set( 'scene', scene );",
				"resources.set( 'camera', camera );",
				"resources.set( 'controller', controller );",
				"resources.set( 'fbx-loader', loader );",
				"",
				"function resize() {",
				"",
				"\tvar rect = domElement.getBoundingClientRect();",
				"\tvar width = rect.width;",
				"\tvar height = rect.height;",
				"\t",
				"\trenderer.setSize( width, height );",
				"\tcamera.aspect = width / height;",
				"\tcamera.updateProjectionMatrix();",
				"",
				"}"
			]
		]
	],
	"effects": [
		[
			"Render",
			[
				"var renderer = resources.get( 'renderer' );",
				"var scene = resources.get( 'scene' );",
				"var camera = resources.get( 'camera' );",
				"var controller = resources.get( 'controller' );",
				"",
				"var direction = new THREE.Vector3( 0, 0, - 1 );",
				"",
				"function start( progress ){}",
				"",
				"function end( progress ){}",
				"",
				"function update( progress ) {",
				"",
				"\tcontroller.update();",
				"\tdirection.set( 0, 0, - 1 );",
				"\tdirection.applyQuaternion( controller.quaternion );",
				"\tcontroller.userData.raycaster.set( controller.position, direction );",
				"\trenderer.render( scene, camera );",
				"",
				"}"
			]
		],
		[
			"Half Sphere Grid",
			[
				"var scene = resources.get( 'scene' );",
				"var camera = resources.get( 'camera' );",
				"var controller = resources.get( 'controller' );",
				"var mouse = controller.getMouse();",
				"var ray = new THREE.Ray();",
				"var spheres = [];",
				"var loader = resources.get( 'fbx-loader' );",
				"var drag = 0.125;",
				"",
				"var holeMat = new THREE.MeshPhongMaterial( {",
				"\tcolor: '#444',",
				"\tside: THREE.BackSide,",
				"\tspecular: 'black'",
				"} );",
				"var u;",
				"var holeGeo = new THREE.SphereBufferGeometry( 1, 32, 20, u, u, u, Math.PI / 2 );",
				"",
				"var rows = 6;",
				"var cols = 6;",
				"var width = 20;",
				"var height = 20;",
				"",
				"var group = new THREE.Group();",
				"",
				"// group.add( new THREE.AxesHelper( 1 ) );",
				"",
				"var alight = new THREE.AmbientLight( 0x777777 );",
				"group.add( alight );",
				"",
				"var plight1 = new THREE.PointLight();",
				"plight1.position.set( -3, 0, 2 )",
				"group.add( plight1 );",
				"",
				"var cursor = new THREE.Mesh(",
				"\tnew THREE.SphereBufferGeometry( 0.5 ),",
				"\tnew THREE.MeshBasicMaterial( {",
				"\t\tcolor: 'red'",
				"\t} )",
				");",
				"// group.add( cursor );",
				"",
				"// var plh = new THREE.PointLightHelper( plight1, 0.5 );",
				"// group.add( plh );",
				"",
				"var plane = new THREE.Mesh(",
				"\tnew THREE.PlaneBufferGeometry( width * 1.25, height * 1.25, 20, 20 ),",
				"\tnew THREE.MeshBasicMaterial( {",
				"\t\tcolor: 'white',",
				"\t\twireframe: true,",
				"\t\tvisible: false",
				"\t} )",
				");",
				"group.add( plane );",
				"",
				"var mat = new THREE.Mesh(",
				"\tnew THREE.PlaneBufferGeometry( width + 4, height + 4, 1, 1 ),",
				"\tnew THREE.ShaderMaterial( {",
				"\t\tuniforms: {",
				"\t\t\tcolor: { type: 'v3', value: new THREE.Color( 0.25, 0.25, 0.25 ) },",
				"\t\t\trows: { type: 'f', value: rows },",
				"\t\t\tcols: { type: 'f', value: cols }",
				"\t\t},",
				"\t\tvertexShader: [",
				"",
				"\t\t\t'varying vec2 vUv;',",
				"",
				"\t\t\t'void main() {',",
				"\t\t\t\t'vUv = uv;',",
				"\t\t\t\t'gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',",
				"\t\t\t'}'",
				"",
				"\t\t\t].join( '\\n' ),",
				"\t\tfragmentShader: [",
				"",
				"\t\t\t'varying vec2 vUv;',",
				"",
				"\t\t\t'uniform vec3 color;',",
				"\t\t\t'uniform float rows;',",
				"\t\t\t'uniform float cols;',",
				"",
				"\t\t\t'void main() {',",
				"\t\t\t\t'vec2 pos = vec2( vUv.x * cols, 1.0 - vUv.y * rows );',",
				"\t\t\t\t'pos = mod( pos, 1.0 );',",
				"\t\t\t\t'float d = length( vec2( 0.5 ) - pos );',",
				"\t\t\t\t'float t = step( 0.249, d );',",
				"\t\t\t\t'gl_FragColor = vec4( color.rgb, t );',",
				"\t\t\t'}'",
				"",
				"\t\t].join( '\\n' ),",
				"\t\twireframe: false,",
				"\t\ttransparent: true",
				"\t} )",
				");",
				"group.add( mat );",
				"",
				"loader.load( '../assets/models/half-sphere.fbx', function( model ) {",
				"",
				"\tvar model = model.children[ 0 ];",
				"",
				"\tfor ( var i = 0; i < cols; i++ ) {",
				"\t\tfor ( var j = 0; j < rows; j++ ) {",
				"",
				"\t\t\tvar xpct = i / ( cols - 1 );",
				"\t\t\tvar ypct = j / ( rows - 1 );",
				"\t\t\tvar sphere = new THREE.Group();",
				"",
				"\t\t\tsphere.add( model.clone() );",
				"\t\t\tsphere.children[ 0 ].rotation.x = Math.PI / 2;",
				"\t\t\tsphere.children[ 0 ].scale.setScalar( 0.9 );",
				"//\t\t\tsphere.children[ 0 ].visible = false;",
				"",
				"\t\t\tsphere.position.x = xpct * width - width / 2;",
				"\t\t\tsphere.position.y = ypct * height - height / 2;",
				"\t\t\tsphere.userData.target = new THREE.Object3D();",
				"\t\t\tsphere.add( new THREE.AxesHelper( 1 ) );",
				"",
				"\t\t\tvar hole = new THREE.Mesh( holeGeo, holeMat );",
				"\t\t\thole.position.copy( sphere.position );",
				"\t\t\thole.rotation.x = - Math.PI / 2;",
				"",
				"\t\t\tgroup.add( hole );",
				"\t\t\tgroup.add( sphere );",
				"\t\t\tspheres.push( sphere );",
				"",
				"\t\t}",
				"\t}",
				"",
				"} );",
				"",
				"function start( progress ) {",
				"\tscene.add( group );",
				"\tgroup.position.z = - 10;",
				"}",
				"",
				"function end( progress ) {",
				"\tscene.remove( group );",
				"}",
				"",
				"function update( progress ) {",
				"",
				"\tif ( !controller.visible ) {",
				"\t\tcontroller.userData.raycaster.setFromCamera( mouse, camera );",
				"\t}",
				"",
				"\tvar intersections = controller.userData.raycaster.intersectObject( plane );",
				"\tvar intersection;",
				"",
				"\tif ( intersections.length > 0 ) {",
				"\t\tintersection = intersections[ 0 ].point;",
				"\t\tcursor.position.copy( intersection );",
				"\t\tintersection.z += 2;",
				"\t}",
				"",
				"\tfor ( var i = 0; i < spheres.length; i++ ) {",
				"\t\tvar sphere = spheres[ i ];",
				"\t\tif ( intersection ) {",
				"\t\t\tsphere.userData.target.position.copy( sphere.position ).add( group.position );",
				"\t\t\tsphere.userData.target.lookAt( intersection );",
				"\t\t}",
				"\t\tvar dest = sphere.userData.target.rotation;",
				"\t\tsphere.rotation.x += ( dest.x - sphere.rotation.x ) * drag;",
				"\t\tsphere.rotation.y += ( dest.y - sphere.rotation.y ) * drag;",
				"\t\tsphere.rotation.z += ( dest.z - sphere.rotation.z ) * drag;",
				"\t}",
				"",
				"}",
				"",
				"function select() {",
				"}",
				"",
				"function deselect() {",
				"}"
			]
		],
		[
			"Play Verse",
			[
				"var audio = new WebAudio();",
				"audio.src = '../assets/loops/LOW-beat-up-all-my-cues-for-you.ogg';",
				"",
				"function start( progress ) {",
				"",
				"\tplayer.setAudio( audio );",
				"",
				"}",
				"",
				"function end( progress ) {",
				"",
				"\tplayer.currentTime = 0;",
				"",
				"}",
				"",
				"function update( progress ){}"
			]
		]
	],
	"animations": [
		[
			"Audio",
			0,
			10.6666,
			0,
			2,
			true
		],
		[
			"Scene",
			0,
			10.6666,
			1,
			1,
			true
		],
		[
			"Update Video",
			0,
			10.6666,
			2,
			0,
			true
		]
	]
}
