{
	"config": {},
	"libraries": [],
	"includes": [
		[
			"Clip",
			[
				"var Clip = function( url ) {",
				"",
				"\tvar scope = this;",
				"",
				"\tthis._callbacks = [];",
				"",
				"\tthis.url = url;",
				"\tthis.binary = null;",
				"\tthis.buffer = null;",
				"\t",
				"\tClip.load( url, function( binary ) {",
				"",
				"\t\tscope._ready = true;",
				"\t\tscope.binary = binary;",
				"",
				"\t\tfor ( var i = 0; i < scope._callbacks.length; i++ ) {",
				"\t\t\tscope._callbacks[i].call( scope );",
				"\t\t}",
				"",
				"\t\tscope._callbacks.length = 0;",
				"",
				"\t} );",
				"",
				"};",
				"",
				"Clip.prototype.play = function( ctx, time ) {",
				"",
				"\tvar scope = this;",
				"\t",
				"\tvar play = function() {",
				"",
				"\t\tvar source = ctx.createBufferSource();",
				"\t\tsource.buffer = scope.buffer;",
				"\t\tsource.connect( ctx.destination );",
				"\t\t",
				"\t\tif ( source.start ) {",
				"\t\t\tsource.start( time || 0 );",
				"\t\t} else {",
				"\t\t\tsource.noteOn( time || 0 );",
				"\t\t}",
				"",
				"\t};",
				"\t",
				"\tif ( this.buffer ) {",
				"",
				"\t\tplay();",
				"",
				"\t} else {",
				"",
				"\t\tvar success = function( buffer ) {",
				"\t\t\tscope.buffer = buffer;",
				"\t\t\tplay();",
				"\t\t};",
				"\t\t",
				"\t\tvar error = function(e) {",
				"\t\t\tconsole.error( 'decodeAudioData:', e );",
				"\t\t};",
				"",
				"\t\tctx.decodeAudioData( this.binary, success, error );",
				"\t}",
				"\t",
				"\treturn this;",
				"",
				"};",
				"",
				"Clip.prototype._ready = false;",
				"",
				"Clip.prototype.ready = function( func ) {",
				"\tif ( this._ready ) {",
				"\t\tfunc();",
				"\t\treturn this;",
				"\t}",
				"\tthis._callbacks.push( func );",
				"\treturn this;",
				"};",
				"",
				"Clip.load = function( url, callback ) {",
				"",
				"\tvar r = new XMLHttpRequest();",
				"\tr.open( 'GET', url, true );",
				"\tr.responseType = 'arraybuffer';",
				"\t",
				"\tr.onload = function() {",
				"\t\tcallback( r.response );",
				"\t};",
				"",
				"\tr.send();",
				"",
				"\treturn r;",
				"",
				"};",
				"",
				"resources.set( 'Clip', Clip );"
			]
		],
		[
			"AudioManager",
			[
				"var AudioContext = window.AudioContext || window.webkitAudioContext;",
				"var has = !!AudioContext;",
				"var ctx, analyser;",
				"",
				"var Clip = resources.get( 'Clip' );",
				"",
				"var intensities = {",
				"\tlow: 'low',",
				"\tmedium: 'medium',",
				"\thigh: 'high',",
				"\ttranscendent: 'transcendent'",
				"};",
				"",
				"var sections = [",
				"\t'beat-up-all-my-cues-for-you',",
				"\t'some-other-way-to-get-to-you',",
				"\t'do-anything-but-upset-you',",
				"\t'what-you-dont-know',",
				"\t'bridge'",
				"];",
				"",
				"sections.ids = {",
				"\t'beat-up-all-my-cues-for-you': 0,",
				"\t'some-other-way-to-get-to-you': 1,",
				"\t'do-anything-but-upset-you': 2,",
				"\t'what-you-dont-know': 3,",
				"\t'bridge': 4",
				"};",
				"",
				"var files = {",
				"\tlow: [ 0, 1, 3, 4 ],",
				"\tmedium: [ 0, 1, 3, 4 ],",
				"\thigh: [ 0, 2, 3, 4 ],",
				"\ttranscendent: [ 2, 4 ]",
				"};",
				"",
				"var formats = {",
				"\tOSX: 'aac',",
				"\tstandard: 'ogg'",
				"};",
				"",
				"for ( var f in files ) {",
				"",
				"\tvar intensity = files[ f ];",
				"",
				"\tfor ( var i = 0; i < intensity.length; i++ ) {",
				"",
				"\t\tvar sid = intensity[ i ];",
				"\t\tvar section = sections[ sid ];",
				"\t\tvar url = [",
				"\t\t\t'/assets/loops/',",
				"\t\t\tf.toUpperCase(),",
				"\t\t\t'-',",
				"\t\t\tsection,",
				"\t\t\t'.',",
				"\t\t\tformats.standard // TODO: Check for OSX",
				"\t\t].join( '' );",
				"",
				"\t\tvar clip = new Clip( url )",
				"\t\t\t.ready( function() {",
				"\t\t\t\tconsole.log( 'loaded', this.url );",
				"\t\t\t} );",
				"",
				"\t\tintensity[ section ] = clip;",
				"",
				"\t}",
				"",
				"}",
				"",
				"var AudioManager = {",
				"",
				"\tintensities: intensities,",
				"\tsections: sections,",
				"\t",
				"\tctx: null,",
				"\tcurrent: {",
				"\t\tintensity: intensities.low,",
				"\t\tsection: sections[ 0 ],",
				"\t\tbar: 0\t// An extrapolation of elapsed time",
				"\t},",
				"\tstartTime: 0,",
				"",
				"\t// Song specific parameters",
				"\tbpm: 90,",
				"\tbars: 4,",
				"\tbeats: 4,",
				"",
				"\tstart: function() {",
				"\t\tif ( !ctx ) {",
				"\t\t\tctx = AudioManager.ctx = new AudioContext();",
				"\t\t\tAudioManager.reset();",
				"\t\t}",
				"\t},",
				"\tupdate: function() {",
				"",
				"\t\tif ( !ctx ) {",
				"\t\t\treturn;",
				"\t\t}",
				"\t\t",
				"\t\tvar time = ctx.currentTime;",
				"\t\tvar elapsed = time - AudioManager.startTime;",
				"\t\tvar bps = AudioManager.bpm / 60;",
				"\t\tvar spb = 1 / bps;",
				"\t\tvar beat = Math.floor( ( elapsed * bps ) );",
				"\t\tvar bar = Math.floor( beat / AudioManager.beats );",
				"\t\tvar current = AudioManager.current;",
				"\t\t",
				"\t\tif ( bar - current.bar >= 3 ) {",
				"",
				"\t\t\tcurrent.bar += AudioManager.bars;",
				"",
				"\t\t\tvar clip = AudioManager.getClip( current.intensity, current.section );",
				"\t\t\tvar future = current.bar * AudioManager.beats / bps;",
				"",
				"\t\t\tclip.play( ctx, future );",
				"",
				"\t\t}",
				"",
				"\t},",
				"\treset: function() {",
				"\t\tAudioManager.startTime = ctx.currentTime;",
				"\t\tAudioManager.current.bar = 0;",
				"\t\treturn this;",
				"\t},",
				"\tgetClip: function( intensity, section ) {",
				"\t\treturn files[ intensity ][ section ];",
				"\t}",
				"};",
				"",
				"resources.set( 'AudioManager', AudioManager );"
			]
		]
	],
	"effects": [
		[
			"ManageAudio",
			[
				"var manager = resources.get( 'AudioManager' );",
				"",
				"function start() {",
				"\tmanager.start();",
				"}",
				"",
				"function end() {",
				"}",
				"",
				"function update( progress ) {",
				"\tmanager.update();",
				"}"
			]
		]
	],
	"animations": [
		[
			"Audio",
			0,
			60,
			0,
			0,
			true
		]
	]
}
