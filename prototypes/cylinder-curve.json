{
	"config": {},
	"libraries": [
		"../release/third-party/WebAudio.js",
		"../prototypes/js/three.js",
		"../prototypes/js/VRController.js",
		"../prototypes/js/WebVR.js",
		"../release/third-party/FBXLoader.js",
		"../release/third-party/tween.js"
	],
	"includes": [
		[
			"setup",
			[
				"var renderer = new THREE.WebGLRenderer();",
				"var scene = new THREE.Scene();",
				"var camera = new THREE.PerspectiveCamera( 75 );",
				"(new THREE.Group()).add( camera );",
				"",
				"camera.near = 0.1;",
				"camera.far = 10000;",
				"",
				"var domElement = resources.get( 'dom' );",
				"var controller = new THREE.VRController();",
				"",
				"controller.position.set( 0.25, 0.75, 0 );",
				"controller.userData.raycaster = new THREE.Raycaster();",
				"",
				"var cursor = new THREE.Mesh(",
				"\tnew THREE.CylinderBufferGeometry( 0, 0.25, 10, 3, 1 ),",
				"\tnew THREE.MeshBasicMaterial({",
				"\t\tcolor: 'red',",
				"\t\ttransparent: true,",
				"\t\topacity: 0.5,",
				"\t\tblending: THREE.AdditiveBlending",
				"\t})",
				");",
				"",
				"cursor.rotation.x = - Math.PI / 2;",
				"cursor.position.z = - 5;",
				"",
				"controller.add( cursor );",
				"scene.add( controller );",
				"scene.add( camera.parent );",
				"",
				"renderer.vr.enabled = true;",
				"window.addEventListener( 'resize', resize, false );",
				"resize();",
				"",
				"domElement.appendChild( renderer.domElement );",
				"domElement.appendChild( WEBVR.createButton( renderer ) );",
				"",
				"var loader = new THREE.FBXLoader();",
				"",
				"resources.set( 'renderer', renderer );",
				"resources.set( 'scene', scene );",
				"resources.set( 'camera', camera );",
				"resources.set( 'controller', controller );",
				"resources.set( 'fbx-loader', loader );",
				"",
				"function resize() {",
				"",
				"\tvar rect = domElement.getBoundingClientRect();",
				"\tvar width = rect.width;",
				"\tvar height = rect.height;",
				"\t",
				"\trenderer.setSize( width, height );",
				"\tcamera.aspect = width / height;",
				"\tcamera.updateProjectionMatrix();",
				"",
				"}"
			]
		]
	],
	"effects": [
		[
			"Render",
			[
				"var renderer = resources.get( 'renderer' );",
				"var scene = resources.get( 'scene' );",
				"var camera = resources.get( 'camera' );",
				"var controller = resources.get( 'controller' );",
				"",
				"var direction = new THREE.Vector3( 0, 0, - 1 );",
				"",
				"function start( progress ){}",
				"",
				"function end( progress ){}",
				"",
				"function update( progress ) {",
				"",
				"\tcontroller.update();",
				"\tdirection.set( 0, 0, - 1 );",
				"\tdirection.applyQuaternion( controller.quaternion );",
				"\tcontroller.userData.raycaster.set( controller.position, direction );",
				"\trenderer.render( scene, camera );",
				"",
				"}"
			]
		],
		[
			"Load Baked Model",
			[
				"var scene = resources.get( 'scene' );",
				"var camera = resources.get( 'camera' );",
				"var domElement = resources.get( 'renderer' ).domElement;",
				"",
				"var geometry = new THREE.CylinderBufferGeometry( 0.5, 0.5, 1, 4, 8, true );",
				"geometry.translate( 0, 0.5, 0 );",
				"",
				"var material = new THREE.ShaderMaterial( {",
				"\twireframe: true,",
				"\tuniforms: {",
				"\t\t// A bend attribute that is applied in",
				"\t\t// the X-Y plane of the object. Similar",
				"\t\t// to a Cinema4D Blend Deformer",
				"\t\tbend: { type: 'f', value: 0 }",
				"\t},",
				"\tvertexShader: [",
				"",
				"\t\t'const float PI = ' + Math.PI  + ';',",
				"",
				"\t\t'uniform float bend;',",
				"\t\t'varying vec2 vUv;',",
				"",
				"\t\t'void main() {',",
				"",
				"\t\t\t'vUv = uv;',",
				"\t\t\t'vec3 pos = vec3( position );',",
				"\t\t\t'float dist = pos.x;',",
				"\t\t\t'float pct = uv.y;',",
				"",
				"\t\t\t'pos.x = 1.0 - ( 1.0 + dist ) * cos( pct * PI );',",
				"\t\t\t'pos.y = ( 1.0 + dist ) * sin( pct * PI );',",
				"\t\t\t'pos.z = 0.0;',",
				"\t\t",
				"\t\t\t'pos.x = mix( position.x, - pos.x, bend );',",
				"\t\t\t'pos.y = mix( position.y, pos.y, bend );',",
				"\t\t",
				"",
				"\t\t\t/*",
				"\t\t\t'float radius = 1.0;',",
				"\t\t\t'float pct = uv.y;',",
				"\t\t\t'float theta = pct * PI;',",
				"\t\t\t'vec3 pos = vec3( position );',",
				"\t\t\t'float direction = sign( bend );',",
				"\t\t",
				"\t\t\t'float dx = 0.0 - pos.x;',",
				"\t\t\t'float ox = dx * cos( theta + PI / 2.0 );',",
				"\t\t\t'float oy = dx * sin( theta + PI / 2.0 );',",
				"",
				"\t\t\t'pos.x = mix( pos.x, bend * ox + bend * cos( theta ) + bend, abs( bend ) );',",
				"\t\t\t'pos.y = mix( 1.0 - pos.y, sin( theta ), abs( bend ) );',",
				"\t\t\t*/",
				"",
				"\t\t\t'gl_Position = projectionMatrix * modelViewMatrix * vec4( pos, 1.0 );',",
				"",
				"\t\t'}'",
				"",
				"\t].join( '\\n' ),",
				"\tfragmentShader: [",
				"",
				"\t\t'varying vec2 vUv;',",
				"",
				"\t\t'void main() {',",
				"\t\t\t'gl_FragColor = vec4( vUv.y, 0.33, vUv.x, 1.0 );',",
				"\t\t'}'",
				"",
				"\t].join( '\\n' )",
				"} );",
				"",
				"var cylinder = new THREE.Mesh( geometry, material );",
				"",
				"scene.add( cylinder );",
				"",
				"function start( progress ) {",
				"\tcamera.position.z = 5;",
				"\tcamera.position.y = 0.5;",
				"\twindow.addEventListener( 'mousemove', mousemove, false );",
				"}",
				"",
				"function end( progress ) {",
				"\twindow.removeEventListener( 'mousemove', mousemove, false );",
				"}",
				"",
				"function update( progress ) {\t",
				"}",
				"",
				"function mousemove( e ) {",
				"\tvar rect = domElement.getBoundingClientRect();",
				"\t// var xpct = 2 * ( e.clientX - rect.left ) / rect.width - 1.0;",
				"\tvar xpct = ( e.clientX - rect.left ) / rect.width;",
				"\tmaterial.uniforms.bend.value = xpct;",
				"}",
				"",
				"",
				"",
				"",
				"",
				""
			]
		],
		[
			"Play Verse",
			[
				"var audio = new WebAudio();",
				"audio.src = '../assets/loops/LOW-beat-up-all-my-cues-for-you.ogg';",
				"",
				"function start( progress ) {",
				"",
				"\tplayer.setAudio( audio );",
				"",
				"}",
				"",
				"function end( progress ) {",
				"",
				"\tplayer.currentTime = 0;",
				"",
				"}",
				"",
				"function update( progress ){}"
			]
		]
	],
	"animations": [
		[
			"Audio",
			0,
			10.6666,
			0,
			2,
			true
		],
		[
			"Scene",
			0,
			10.6666,
			1,
			1,
			true
		],
		[
			"Update Video",
			0,
			10.6666,
			2,
			0,
			true
		]
	]
}
