{
	"config": {},
	"libraries": [
		"../release/third-party/WebAudio.js",
		"../prototypes/js/three.js",
		"../prototypes/js/VRController.js",
		"../prototypes/js/WebVR.js"
	],
	"includes": [
		[
			"setup",
			[
				"var renderer = new THREE.WebGLRenderer();",
				"var scene = new THREE.Scene();",
				"var camera = new THREE.PerspectiveCamera( 75 );",
				"",
				"var domElement = resources.get( 'dom' );",
				"var controller = new THREE.VRController();",
				"",
				"controller.position.set( 0.25, 0.75, 0 );",
				"controller.userData.raycaster = new THREE.Raycaster();",
				"",
				"var cursor = new THREE.Mesh(",
				"\tnew THREE.CylinderBufferGeometry( 0, 0.25, 10, 3, 1 ),",
				"\tnew THREE.MeshBasicMaterial({",
				"\t\tcolor: 'red',",
				"\t\ttransparent: true,",
				"\t\topacity: 0.5,",
				"\t\tblending: THREE.AdditiveBlending",
				"\t})",
				");",
				"",
				"cursor.rotation.x = - Math.PI / 2;",
				"cursor.position.z = - 5;",
				"",
				"controller.add( cursor );",
				"scene.add( controller );",
				"",
				"controller.connect();",
				"",
				"renderer.vr.enabled = true;",
				"window.addEventListener( 'resize', resize, false );",
				"resize();",
				"",
				"domElement.appendChild( renderer.domElement );",
				"domElement.appendChild( WEBVR.createButton( renderer ) );",
				"",
				"resources.set( 'renderer', renderer );",
				"resources.set( 'scene', scene );",
				"resources.set( 'camera', camera );",
				"resources.set( 'controller', controller );",
				"",
				"function resize() {",
				"",
				"\tvar rect = domElement.getBoundingClientRect();",
				"\tvar width = rect.width;",
				"\tvar height = rect.height;",
				"\t",
				"\trenderer.setSize( width, height );",
				"\tcamera.aspect = width / height;",
				"\tcamera.updateProjectionMatrix();",
				"",
				"}"
			]
		]
	],
	"effects": [
		[
			"Render",
			[
				"var renderer = resources.get( 'renderer' );",
				"var scene = resources.get( 'scene' );",
				"var camera = resources.get( 'camera' );",
				"var controller = resources.get( 'controller' );",
				"",
				"var direction = new THREE.Vector3( 0, 0, - 1 );",
				"",
				"function start( progress ){}",
				"",
				"function end( progress ){}",
				"",
				"function update( progress ) {",
				"",
				"\tcontroller.update();",
				"\tdirection.set( 0, 0, - 1 );",
				"\tdirection.applyQuaternion( controller.quaternion );",
				"\tcontroller.userData.raycaster.set( controller.position, direction );",
				"\trenderer.render( scene, camera );",
				"",
				"}"
			]
		],
		[
			"Spinning Cube",
			[
				"var scene = resources.get( 'scene' );",
				"var camera = resources.get( 'camera' );",
				"var controller = resources.get( 'controller' );",
				"var mouse = controller.getMouse();",
				"var vector = new THREE.Vector3();",
				"",
				"var dragging = false;",
				"var drag = 0.0125;",
				"var elapsed = 0;",
				"var lastTime = 0;",
				"var offset = 0;",
				"",
				"var group = new THREE.Group();",
				"var ray = new THREE.Ray();",
				"",
				"var sphere = new THREE.Mesh(",
				"\tnew THREE.SphereBufferGeometry( 1, 32, 32 ),",
				"\tnew THREE.MeshNormalMaterial()",
				");",
				"",
				"var geometry = new THREE.Geometry();",
				"for (var i = 0; i < 200; i++) {",
				"\tvector.set(",
				"\t\t2 * Math.random() - 1,",
				"\t\t2 * Math.random() - 1,",
				"\t\t2 * Math.random() - 1",
				"\t);",
				"\tvector.setLength( Math.random() );",
				"\tgeometry.vertices.push(new THREE.Vector3().copy(vector));",
				"}",
				"",
				"var particles = new THREE.Points(",
				"\tgeometry,",
				"\tnew THREE.PointsMaterial({",
				"\t\tcolor: 'white',",
				"\t\ttransparent: true,",
				"\t\tsizeAttenuation: false,",
				"\t\tsize: 10,",
				"\t\tblending: THREE.AdditiveBlending",
				"\t})",
				");",
				"",
				"sphere.visible = false;",
				"particles.visible = false;",
				"",
				"var plane = new THREE.Mesh(",
				"\tnew THREE.PlaneBufferGeometry( 50, 50, 10, 10 ),",
				"\tnew THREE.MeshBasicMaterial({",
				"\t\tcolor: 'white',",
				"\t\twireframe: true",
				"\t})",
				");",
				"",
				"plane.userData.delta = new THREE.Vector3();",
				"",
				"group.add( plane );",
				"group.add( sphere );",
				"group.add( particles );",
				"",
				"controller.addEventListener( 'selectstart', function () {",
				"",
				"\tdragging = true;",
				"\tvar intersections = controller.userData.raycaster.intersectObject( plane );",
				"\tlastTime = Date.now();",
				"\tif ( intersections.length > 0 ) {",
				"\t\tplane.userData.intersection = intersections[ 0 ].point;",
				"\t\tsphere.position.copy(",
				"\t\t\tplane.userData.intersection",
				"\t\t);",
				"\t\tsphere.visible = true;",
				"\t}",
				"",
				"} );",
				"",
				"controller.addEventListener( 'selectend', function () {",
				"",
				"\tdragging = false;",
				"\tplane.userData.intersection = null;",
				"\tsphere.visible = false;",
				"",
				"} );",
				"",
				"function start( progress ) {",
				"\tgroup.position.z = - 15;",
				"\tscene.add( group );",
				"}",
				"",
				"function end( progress ) {",
				"\tscene.remove( group );",
				"}",
				"",
				"function update( progress ) {",
				"",
				"\tvar intersections, intersection;",
				"\t",
				"\tif ( dragging && controller.visible ) {",
				"",
				"\t\t// Gamepad Controller Controls",
				"\t\t// Reset ray from potential mouse interaction",
				"\t\tcontroller.userData.raycaster.ray.copy( ray );",
				"\t\tintersections = controller.userData.raycaster.intersectObject( plane );",
				"\t\tif ( intersections.length > 0 ) {",
				"\t\t\tintersection = intersections[ 0 ].point;",
				"\t\t\tif ( plane.userData.intersection ) {",
				"\t\t\t\tplane.userData.delta.subVectors( intersection, plane.userData.intersection );",
				"\t\t\t\t// TODO:",
				"\t\t\t}",
				"\t\t\tplane.userData.intersection = intersection;",
				"\t\t\tsphere.position.copy(",
				"\t\t\t\tplane.userData.intersection",
				"\t\t\t);",
				"\t\t\tfill();",
				"\t\t}",
				"",
				"\t} else if ( dragging && !controller.visible ) {",
				"",
				"\t\t// Mouse / Touch Controls",
				"\t\tcontroller.userData.raycaster.setFromCamera( mouse, camera );",
				"\t\tintersections = controller.userData.raycaster.intersectObject( plane );",
				"\t\tif ( intersections.length > 0 ) {",
				"\t\t\tintersection = intersections[ 0 ].point;",
				"\t\t\tif ( plane.userData.intersection ) {",
				"\t\t\t\tplane.userData.delta.subVectors( intersection, plane.userData.intersection );",
				"\t\t\t\t// TODO:",
				"\t\t\t}",
				"\t\t\tplane.userData.intersection = intersection;",
				"\t\t\tsphere.position.copy(",
				"\t\t\t\tplane.userData.intersection",
				"\t\t\t);",
				"\t\t\tfill();",
				"\t\t}",
				"",
				"\t} else {",
				"",
				"\t\tif ( offset > 0 ) {",
				"\t\t\texplode( offset );",
				"\t\t}",
				"",
				"\t\tsphere.scale.set( 0, 0, 0 );",
				"\t\telapsed = 0;",
				"\t\toffset = 0;",
				"",
				"\t}",
				"\t",
				"\tif ( particles.visible ) {",
				"",
				"\t\tvar scale = particles.scale.x;",
				"",
				"\t\tparticles.scale.x += ( 33 - scale ) * 0.33;",
				"\t\tparticles.scale.y = particles.scale.x;",
				"\t\tparticles.scale.z = particles.scale.x;",
				"",
				"\t\tparticles.material.opacity -= particles.material.opacity * 0.125;",
				"",
				"\t\tif ( particles.material.opacity < 0.001 ) {",
				"\t\t\tparticles.visible = false;",
				"\t\t}",
				"\t}",
				"",
				"}",
				"",
				"function fill() {",
				"",
				"\tvar now = Date.now();",
				"\tvar size = sphere.scale.x;",
				"",
				"\tsize += ( 10 - size ) * drag;",
				"\tsphere.scale.set( size, size, size );",
				"",
				"\telapsed += now - lastTime;",
				"\tlastTime = now;",
				"",
				"\toffset += ( 50 - offset ) * drag / 200;",
				"",
				"\tsphere.position.x += Math.random() * offset - offset / 2;",
				"\tsphere.position.y += Math.random() * offset - offset / 2;",
				"\tsphere.position.z += Math.random() * offset - offset / 2;",
				"",
				"}",
				"",
				"function explode( amt ) {",
				"",
				"\tparticles.position.copy( sphere.position );",
				"\tparticles.visible = true;",
				"\tparticles.material.opacity = 1;",
				"\tparticles.scale.set( 0.1, 0.1, 0.1 );",
				"",
				"}",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				""
			]
		],
		[
			"Play Verse",
			[
				"var audio = new WebAudio();",
				"audio.src = '../assets/loops/LOW-beat-up-all-my-cues-for-you.ogg';",
				"",
				"function start( progress ) {",
				"",
				"\tplayer.setAudio( audio );",
				"",
				"}",
				"",
				"function end( progress ) {",
				"",
				"\tplayer.currentTime = 0;",
				"",
				"}",
				"",
				"function update( progress ){}"
			]
		]
	],
	"animations": [
		[
			"Audio",
			0,
			10.6666,
			0,
			2,
			true
		],
		[
			"Scene",
			0,
			10.6666,
			1,
			1,
			true
		],
		[
			"Update Video",
			0,
			10.6666,
			2,
			0,
			true
		]
	]
}
