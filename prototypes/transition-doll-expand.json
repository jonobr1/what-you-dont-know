{
	"config": {},
	"libraries": [
		"../release/third-party/WebAudio.js",
		"../prototypes/js/three.js",
		"../prototypes/js/VRController.js",
		"../prototypes/js/WebVR.js",
		"../release/third-party/FBXLoader.js",
		"../release/third-party/tween.js"
	],
	"includes": [
		[
			"setup",
			[
				"var renderer = new THREE.WebGLRenderer();",
				"var scene = new THREE.Scene();",
				"var camera = new THREE.PerspectiveCamera( 75 );",
				"(new THREE.Group()).add( camera );",
				"",
				"camera.near = 0.1;",
				"camera.far = 10000;",
				"",
				"var domElement = resources.get( 'dom' );",
				"var controller = new THREE.VRController();",
				"",
				"controller.position.set( 0.25, 0.75, 0 );",
				"controller.userData.raycaster = new THREE.Raycaster();",
				"",
				"var cursor = new THREE.Mesh(",
				"\tnew THREE.CylinderBufferGeometry( 0, 0.25, 10, 3, 1 ),",
				"\tnew THREE.MeshBasicMaterial({",
				"\t\tcolor: 'red',",
				"\t\ttransparent: true,",
				"\t\topacity: 0.5,",
				"\t\tblending: THREE.AdditiveBlending",
				"\t})",
				");",
				"",
				"cursor.rotation.x = - Math.PI / 2;",
				"cursor.position.z = - 5;",
				"",
				"controller.add( cursor );",
				"scene.add( controller );",
				"scene.add( camera.parent );",
				"",
				"renderer.vr.enabled = true;",
				"window.addEventListener( 'resize', resize, false );",
				"resize();",
				"",
				"domElement.appendChild( renderer.domElement );",
				"domElement.appendChild( WEBVR.createButton( renderer ) );",
				"",
				"var loader = new THREE.FBXLoader();",
				"",
				"resources.set( 'renderer', renderer );",
				"resources.set( 'scene', scene );",
				"resources.set( 'camera', camera );",
				"resources.set( 'controller', controller );",
				"resources.set( 'fbx-loader', loader );",
				"",
				"function resize() {",
				"",
				"\tvar rect = domElement.getBoundingClientRect();",
				"\tvar width = rect.width;",
				"\tvar height = rect.height;",
				"\t",
				"\trenderer.setSize( width, height );",
				"\tcamera.aspect = width / height;",
				"\tcamera.updateProjectionMatrix();",
				"",
				"}"
			]
		]
	],
	"effects": [
		[
			"Render",
			[
				"var renderer = resources.get( 'renderer' );",
				"var scene = resources.get( 'scene' );",
				"var camera = resources.get( 'camera' );",
				"var controller = resources.get( 'controller' );",
				"",
				"var direction = new THREE.Vector3( 0, 0, - 1 );",
				"",
				"function start( progress ){}",
				"",
				"function end( progress ){}",
				"",
				"function update( progress ) {",
				"",
				"\tcontroller.update();",
				"\tdirection.set( 0, 0, - 1 );",
				"\tdirection.applyQuaternion( controller.quaternion );",
				"\tcontroller.userData.raycaster.set( controller.position, direction );",
				"\trenderer.render( scene, camera );",
				"",
				"}"
			]
		],
		[
			"Load Baked Model",
			[
				"var scene = resources.get( 'scene' );",
				"var loader = resources.get( 'fbx-loader' );",
				"var tl = new THREE.TextureLoader();",
				"var camera = resources.get( 'camera' );",
				"",
				"var group = new THREE.Group();",
				"var groups = {",
				"\ta: new THREE.Group(),",
				"\tb: new THREE.Group()",
				"};",
				"",
				"var origin = new THREE.Vector3();",
				"var destination = new THREE.Vector3();",
				"",
				"loader.load( '../assets/models/basic-baked-doll/model.fbx', function( fbx ) {",
				"",
				"\tvar doll = fbx.children[1];",
				"\tdoll.scale.set( 0.005, 0.005, 0.005 );",
				"\tdoll.position.set( 0, - 7, 0 );",
				"",
				"\tdoll.rotation.y = - Math.PI / 4;",
				"",
				"\tdoll.traverse( function( child ) {",
				"",
				"\t\tif ( !child.isMesh ) {",
				"\t\t\treturn;",
				"\t\t}",
				"",
				"\t\tvar mesh = child;",
				"\t\tvar material = mesh.material;",
				"\t\t",
				"\t\tmesh.material = new THREE.MeshBasicMaterial( {",
				"\t\t\tmap: tl.load( '../assets/models/basic-baked-doll/' + material.emissiveMap.name )",
				"\t\t} );",
				"",
				"\t} );",
				"",
				"\tgroups.a.userData.doll = doll;",
				"\tgroups.b.userData.doll = doll.clone();",
				"",
				"\tgroups.a.add( groups.a.userData.doll );",
				"\tgroups.b.add( groups.b.userData.doll );",
				"",
				"});",
				"",
				"groups.b.scale.set( 0.1, 0.1, 0.1 );",
				"",
				"group.add( groups.a );",
				"group.add( groups.b );",
				"",
				"var geometry = new THREE.BufferGeometry();",
				"var vertices = [];",
				"for ( var i = 0; i < 1000; i++ ) {",
				"",
				"\tvar a = 10;",
				"\tvar b = 10;",
				"\tvar c = 10;",
				"\t",
				"\tvar w = 100;",
				"\tvar h = 100;",
				"\tvar d = 100;",
				"",
				"\tvar xpct = ( i % a ) / ( a - 1 );",
				"\tvar ypct = ( Math.floor( i / a ) % b ) / ( b - 1 );",
				"\tvar zpct = ( Math.floor( i / ( a * b ) ) % c ) / ( c - 1 );",
				"",
				"\tvar x = w * xpct - w / 2;",
				"\tvar y = h * ypct - h / 2;",
				"\tvar z = d * zpct - d / 2;",
				"",
				"\tvertices.push( x, y, z );",
				"",
				"}",
				"geometry.addAttribute( 'position', new THREE.Float32BufferAttribute( vertices, 3 ) );",
				"var material = new THREE.PointsMaterial( {",
				"\tcolor: 'white',",
				"\tsize: 2,",
				"\ttransparent: true,",
				"\topacity: 0.5,",
				"\tsizeAttenuation: false",
				"} );",
				"",
				"var particles = new THREE.Points( geometry, material );",
				"",
				"groups.a.userData.particles = particles;",
				"groups.b.userData.particles = particles.clone();",
				"",
				"groups.a.add( groups.a.userData.particles );",
				"groups.b.add( groups.b.userData.particles );",
				"",
				"function start( progress ) {",
				"\torigin.z = - 30;",
				"//\torigin.y = destination.y = 1.6;",
				"\tdestination.z = origin.z * 0.1;",
				"\tscene.add( group );",
				"}",
				"",
				"function end( progress ) {",
				"\tscene.remove( group );",
				"}",
				"",
				"function update( progress ) {",
				"",
				"\tvar t = ( progress - 0.33 ) / 0.25;",
				"",
				"\tif ( t > 1 ) {",
				"\t\tt = 1;",
				"\t} else if ( t < 0 ) {",
				"\t\tt = 0;",
				"\t}",
				"",
				"\tt = TWEEN.Easing.Circular.InOut( t );",
				"\tt = TWEEN.Easing.Circular.InOut( t );",
				"\tt = TWEEN.Easing.Circular.InOut( t );",
				"",
				"\tgroup.position.copy( origin )",
				"\t\t.lerp( destination, t );",
				"",
				"\tgroups.a.userData.particles.visible = progress < 0.454;",
				"\tgroups.b.userData.particles.visible = progress > 0.455;",
				"",
				"\tvar doll = groups.a.userData.doll;",
				"",
				"\tif ( !doll ) {",
				"\t\treturn;",
				"\t}",
				"\t",
				"\tvar top = doll.children[0];",
				"\tvar bot = doll.children[1];",
				"",
				"\tvar t = TWEEN.Easing.Circular.Out( progress );",
				"",
				"\ttop.position.y = 2000 * t + 1174.382958078;",
				"\tbot.position.y = - 2000 * t;",
				"",
				"}",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				""
			]
		],
		[
			"Play Verse",
			[
				"var audio = new WebAudio();",
				"audio.src = '../assets/loops/LOW-beat-up-all-my-cues-for-you.ogg';",
				"",
				"function start( progress ) {",
				"",
				"\tplayer.setAudio( audio );",
				"",
				"}",
				"",
				"function end( progress ) {",
				"",
				"\tplayer.currentTime = 0;",
				"",
				"}",
				"",
				"function update( progress ){}"
			]
		]
	],
	"animations": [
		[
			"Audio",
			0,
			10.6666,
			0,
			2,
			true
		],
		[
			"Scene",
			0,
			10.6666,
			1,
			1,
			true
		],
		[
			"Update Video",
			0,
			10.6666,
			2,
			0,
			true
		]
	]
}
